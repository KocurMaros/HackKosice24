
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c4  080043c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043cc  080043cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080043e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080043e0  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001084a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234f  00000000  00000000  000308c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b73  00000000  00000000  00033aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002223  00000000  00000000  0003461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cec  00000000  00000000  0003683e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b81cf  00000000  00000000  0004852a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003458  00000000  00000000  001006fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00103b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080042bc 	.word	0x080042bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080042bc 	.word	0x080042bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	; 0x2c
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 fe19 	bl	8004264 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <MX_GPIO_Init+0xf0>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <MX_GPIO_Init+0xf0>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <MX_GPIO_Init+0xf0>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <MX_GPIO_Init+0xf0>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b2f      	ldr	r3, [pc, #188]	; (800070c <MX_GPIO_Init+0xf0>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0xf0>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <MX_GPIO_Init+0xf0>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_GPIO_Init+0xf0>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <MX_GPIO_Init+0xf0>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <MX_GPIO_Init+0xf0>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_GPIO_Init+0xf0>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_GPIO_Init+0xf0>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000692:	23a0      	movs	r3, #160	; 0xa0
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fe16 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2212      	movs	r2, #18
 80006a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2201      	movs	r2, #1
 80006b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	193a      	adds	r2, r7, r4
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fc9a 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2220      	movs	r2, #32
 80006c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006d8:	193a      	adds	r2, r7, r4
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fc87 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2201      	movs	r2, #1
 80006f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <MX_GPIO_Init+0xf4>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f000 fc78 	bl	8000ff4 <HAL_GPIO_Init>

}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b00b      	add	sp, #44	; 0x2c
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	50000400 	.word	0x50000400

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b0bb      	sub	sp, #236	; 0xec
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fb31 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f88b 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f7ff ff7b 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000726:	f000 fa53 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800072a:	f000 f913 	bl	8000954 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 800072e:	23cc      	movs	r3, #204	; 0xcc
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <main+0x11c>)
 8000734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000736:	c313      	stmia	r3!, {r0, r1, r4}
 8000738:	6811      	ldr	r1, [r2, #0]
 800073a:	6019      	str	r1, [r3, #0]
 800073c:	8892      	ldrh	r2, [r2, #4]
 800073e:	809a      	strh	r2, [r3, #4]
  uint8_t Rx_data[100] = {0};  //  creating a buffer of 10 bytes
 8000740:	2368      	movs	r3, #104	; 0x68
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	3304      	adds	r3, #4
 800074a:	2260      	movs	r2, #96	; 0x60
 800074c:	2100      	movs	r1, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f003 fd88 	bl	8004264 <memset>
  uint8_t Tx_data[100] = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	2260      	movs	r2, #96	; 0x60
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f003 fd7f 	bl	8004264 <memset>
  	  bool start_read = false;
 8000766:	23e7      	movs	r3, #231	; 0xe7
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
//			buzzer_freq(440);
//		}else{
//			buzzer_freq(0);
//		}
//	  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
	  HAL_UART_Receive (&huart2, Rx_data, 1000, 500);  // receive 4 bytes of data
 800076e:	23fa      	movs	r3, #250	; 0xfa
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	22fa      	movs	r2, #250	; 0xfa
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	2468      	movs	r4, #104	; 0x68
 8000778:	1939      	adds	r1, r7, r4
 800077a:	482e      	ldr	r0, [pc, #184]	; (8000834 <main+0x120>)
 800077c:	f002 fde8 	bl	8003350 <HAL_UART_Receive>
	  if(Rx_data[0] == '%'){
 8000780:	0021      	movs	r1, r4
 8000782:	187b      	adds	r3, r7, r1
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b25      	cmp	r3, #37	; 0x25
 8000788:	d106      	bne.n	8000798 <main+0x84>
		  start_read = true;
 800078a:	23e7      	movs	r3, #231	; 0xe7
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
		  Rx_data[0] = 0;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_read){
 8000798:	22e7      	movs	r2, #231	; 0xe7
 800079a:	18bb      	adds	r3, r7, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0e5      	beq.n	800076e <main+0x5a>
		  start_read = false;
 80007a2:	18bb      	adds	r3, r7, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
		  for(size_t i = 1; i <100;i++){
 80007a8:	2301      	movs	r3, #1
 80007aa:	22e0      	movs	r2, #224	; 0xe0
 80007ac:	18ba      	adds	r2, r7, r2
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	e037      	b.n	8000822 <main+0x10e>
			  if(Rx_data[i] == '$'){
 80007b2:	2368      	movs	r3, #104	; 0x68
 80007b4:	18fa      	adds	r2, r7, r3
 80007b6:	20e0      	movs	r0, #224	; 0xe0
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	18d3      	adds	r3, r2, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b24      	cmp	r3, #36	; 0x24
 80007c2:	d11c      	bne.n	80007fe <main+0xea>
				  Tx_data[i-1] = '\n';
 80007c4:	183b      	adds	r3, r7, r0
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	1d3a      	adds	r2, r7, #4
 80007cc:	210a      	movs	r1, #10
 80007ce:	54d1      	strb	r1, [r2, r3]
				  Tx_data[i] = '\r';
 80007d0:	1d3a      	adds	r2, r7, #4
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	220d      	movs	r2, #13
 80007da:	701a      	strb	r2, [r3, #0]
				  Tx_data[i+1] = '\0';
 80007dc:	183b      	adds	r3, r7, r0
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	2100      	movs	r1, #0
 80007e6:	54d1      	strb	r1, [r2, r3]
				  HAL_UART_Transmit(&huart2,Tx_data,i+1,10);// Sending in normal mode
 80007e8:	183b      	adds	r3, r7, r0
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	1d39      	adds	r1, r7, #4
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <main+0x120>)
 80007f6:	230a      	movs	r3, #10
 80007f8:	f002 fd06 	bl	8003208 <HAL_UART_Transmit>
 80007fc:	e00b      	b.n	8000816 <main+0x102>
			  }
			  else{
				  Tx_data[i-1] = Rx_data[i];
 80007fe:	22e0      	movs	r2, #224	; 0xe0
 8000800:	18bb      	adds	r3, r7, r2
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	2168      	movs	r1, #104	; 0x68
 8000808:	1879      	adds	r1, r7, r1
 800080a:	18ba      	adds	r2, r7, r2
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	188a      	adds	r2, r1, r2
 8000810:	7811      	ldrb	r1, [r2, #0]
 8000812:	1d3a      	adds	r2, r7, #4
 8000814:	54d1      	strb	r1, [r2, r3]
		  for(size_t i = 1; i <100;i++){
 8000816:	22e0      	movs	r2, #224	; 0xe0
 8000818:	18bb      	adds	r3, r7, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	23e0      	movs	r3, #224	; 0xe0
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b63      	cmp	r3, #99	; 0x63
 800082a:	d9c2      	bls.n	80007b2 <main+0x9e>
	  HAL_UART_Receive (&huart2, Rx_data, 1000, 500);  // receive 4 bytes of data
 800082c:	e79f      	b.n	800076e <main+0x5a>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	080042d4 	.word	0x080042d4
 8000834:	20000074 	.word	0x20000074

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b095      	sub	sp, #84	; 0x54
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	2414      	movs	r4, #20
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	233c      	movs	r3, #60	; 0x3c
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 fd0b 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	2310      	movs	r3, #16
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 fd04 	bl	8004264 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fd51 	bl	8001308 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2202      	movs	r2, #2
 800086a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	193b      	adds	r3, r7, r4
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fd89 	bl	80013a0 <HAL_RCC_OscConfig>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000892:	f000 f819 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2100      	movs	r1, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f8d4 	bl	8001a60 <HAL_RCC_ClockConfig>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008bc:	f000 f804 	bl	80008c8 <Error_Handler>
  }
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b015      	add	sp, #84	; 0x54
 80008c6:	bd90      	pop	{r4, r7, pc}

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x44>)
 80008dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_MspInit+0x44>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x44>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x44>)
 80008f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_MspInit+0x44>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0549      	lsls	r1, r1, #21
 80008fc:	430a      	orrs	r2, r1
 80008fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_MspInit+0x44>)
 8000902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	055b      	lsls	r3, r3, #21
 8000908:	4013      	ands	r3, r2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 fa88 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	; 0x70
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	0018      	movs	r0, r3
 8000960:	2310      	movs	r3, #16
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f003 fc7d 	bl	8004264 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	2354      	movs	r3, #84	; 0x54
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	230c      	movs	r3, #12
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f003 fc75 	bl	8004264 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	2338      	movs	r3, #56	; 0x38
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	231c      	movs	r3, #28
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f003 fc6d 	bl	8004264 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	0018      	movs	r0, r3
 800098e:	2334      	movs	r3, #52	; 0x34
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 fc66 	bl	8004264 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000998:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 800099a:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <MX_TIM1_Init+0x190>)
 800099c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800099e:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009a0:	220f      	movs	r2, #15
 80009a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80009aa:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009ac:	2263      	movs	r2, #99	; 0x63
 80009ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b6:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c2:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fc31 	bl	800222c <HAL_TIM_Base_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80009ce:	f7ff ff7b 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d2:	2160      	movs	r1, #96	; 0x60
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0152      	lsls	r2, r2, #5
 80009da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fdda 	bl	800259c <HAL_TIM_ConfigClockSource>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009ec:	f7ff ff6c 	bl	80008c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f0:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fc72 	bl	80022dc <HAL_TIM_PWM_Init>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009fc:	f7ff ff64 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2154      	movs	r1, #84	; 0x54
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 fa8c 	bl	8002f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a24:	f7ff ff50 	bl	80008c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2138      	movs	r1, #56	; 0x38
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2260      	movs	r2, #96	; 0x60
 8000a2e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a54:	1879      	adds	r1, r7, r1
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 8000a58:	2204      	movs	r2, #4
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 fc9e 	bl	800239c <HAL_TIM_PWM_ConfigChannel>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000a64:	f7ff ff30 	bl	80008c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0192      	lsls	r2, r2, #6
 8000a8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0492      	lsls	r2, r2, #18
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aba:	1d3a      	adds	r2, r7, #4
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f002 faaf 	bl	8003024 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000aca:	f7ff fefd 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <MX_TIM1_Init+0x18c>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 f83f 	bl	8000b54 <HAL_TIM_MspPostInit>

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b01c      	add	sp, #112	; 0x70
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b097      	sub	sp, #92	; 0x5c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	240c      	movs	r4, #12
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	0018      	movs	r0, r3
 8000af6:	234c      	movs	r3, #76	; 0x4c
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f003 fbb2 	bl	8004264 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_TIM_Base_MspInit+0x64>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d11c      	bne.n	8000b44 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0392      	lsls	r2, r2, #14
 8000b10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 f94a 	bl	8001db4 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000b24:	f7ff fed0 	bl	80008c8 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_TIM_Base_MspInit+0x68>)
 8000b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_TIM_Base_MspInit+0x68>)
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	0109      	lsls	r1, r1, #4
 8000b32:	430a      	orrs	r2, r1
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_TIM_Base_MspInit+0x68>)
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b017      	add	sp, #92	; 0x5c
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	240c      	movs	r4, #12
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f003 fb7c 	bl	8004264 <memset>
  if(timHandle->Instance==TIM1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_TIM_MspPostInit+0x70>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d121      	bne.n	8000bba <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_TIM_MspPostInit+0x74>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_TIM_MspPostInit+0x74>)
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_TIM_MspPostInit+0x74>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	2202      	movs	r2, #2
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2208      	movs	r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2202      	movs	r2, #2
 8000b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2201      	movs	r2, #1
 8000bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_TIM_MspPostInit+0x78>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f000 fa1d 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b009      	add	sp, #36	; 0x24
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	50000400 	.word	0x50000400

08000bd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <MX_USART2_UART_Init+0x98>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bdc:	22e1      	movs	r2, #225	; 0xe1
 8000bde:	0252      	lsls	r2, r2, #9
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 fa9e 	bl	800315c <HAL_UART_Init>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c24:	f7ff fe50 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f003 fa39 	bl	80040a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c36:	f7ff fe47 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f003 fa70 	bl	8004124 <HAL_UARTEx_SetRxFifoThreshold>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c48:	f7ff fe3e 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_USART2_UART_Init+0x94>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f003 f9ee 	bl	8004030 <HAL_UARTEx_DisableFifoMode>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c58:	f7ff fe36 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000074 	.word	0x20000074
 8000c68:	40004400 	.word	0x40004400

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b09d      	sub	sp, #116	; 0x74
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	235c      	movs	r3, #92	; 0x5c
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f003 faf0 	bl	8004264 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	2410      	movs	r4, #16
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	234c      	movs	r3, #76	; 0x4c
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f003 fae8 	bl	8004264 <memset>
  if(uartHandle->Instance==USART2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d13e      	bne.n	8000d1c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	f001 f881 	bl	8001db4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb6:	f7ff fe07 	bl	80008c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0289      	lsls	r1, r1, #10
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	029b      	lsls	r3, r3, #10
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cee:	215c      	movs	r1, #92	; 0x5c
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	187a      	adds	r2, r7, r1
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 f96c 	bl	8000ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b01d      	add	sp, #116	; 0x74
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40021000 	.word	0x40021000

08000d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f7ff fe0b 	bl	800094a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5a:	f003 fa8b 	bl	8004274 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d5e:	f7ff fcd9 	bl	8000714 <main>

08000d62 <LoopForever>:

LoopForever:
  b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   r0, =_estack
 8000d64:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d70:	080043d4 	.word	0x080043d4
  ldr r2, =_sbss
 8000d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d78:	2000010c 	.word	0x2000010c

08000d7c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_COMP_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x3c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Init+0x3c>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0049      	lsls	r1, r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f810 	bl	8000dc0 <HAL_InitTick>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d003      	beq.n	8000dac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e001      	b.n	8000db0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fd92 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_InitTick+0x88>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d02b      	beq.n	8000e30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_InitTick+0x8c>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_InitTick+0x88>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0019      	movs	r1, r3
 8000de2:	23fa      	movs	r3, #250	; 0xfa
 8000de4:	0098      	lsls	r0, r3, #2
 8000de6:	f7ff f98d 	bl	8000104 <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff f988 	bl	8000104 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f8ef 	bl	8000fda <HAL_SYSTICK_Config>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d112      	bne.n	8000e26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80a      	bhi.n	8000e1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8ce 	bl	8000fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_InitTick+0x90>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e00d      	b.n	8000e38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e008      	b.n	8000e38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e003      	b.n	8000e38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b005      	add	sp, #20
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	18d2      	adds	r2, r2, r3
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_IncTick+0x20>)
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000108 	.word	0x20000108

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	20000108 	.word	0x20000108

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	0002      	movs	r2, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea0:	d828      	bhi.n	8000ef4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <__NVIC_SetPriority+0xd4>)
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	33c0      	adds	r3, #192	; 0xc0
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	589b      	ldr	r3, [r3, r2]
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	400a      	ands	r2, r1
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	21ff      	movs	r1, #255	; 0xff
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	019b      	lsls	r3, r3, #6
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2303      	movs	r3, #3
 8000eda:	4003      	ands	r3, r0
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee0:	481f      	ldr	r0, [pc, #124]	; (8000f60 <__NVIC_SetPriority+0xd4>)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	430a      	orrs	r2, r1
 8000eec:	33c0      	adds	r3, #192	; 0xc0
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ef2:	e031      	b.n	8000f58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <__NVIC_SetPriority+0xd8>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0019      	movs	r1, r3
 8000efc:	230f      	movs	r3, #15
 8000efe:	400b      	ands	r3, r1
 8000f00:	3b08      	subs	r3, #8
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3306      	adds	r3, #6
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	18d3      	adds	r3, r2, r3
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	0011      	movs	r1, r2
 8000f14:	2203      	movs	r2, #3
 8000f16:	400a      	ands	r2, r1
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	21ff      	movs	r1, #255	; 0xff
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	401a      	ands	r2, r3
 8000f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	22ff      	movs	r2, #255	; 0xff
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0018      	movs	r0, r3
 8000f34:	2303      	movs	r3, #3
 8000f36:	4003      	ands	r3, r0
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <__NVIC_SetPriority+0xd8>)
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	001c      	movs	r4, r3
 8000f44:	230f      	movs	r3, #15
 8000f46:	4023      	ands	r3, r4
 8000f48:	3b08      	subs	r3, #8
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	3306      	adds	r3, #6
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	18c3      	adds	r3, r0, r3
 8000f54:	3304      	adds	r3, #4
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b003      	add	sp, #12
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	045b      	lsls	r3, r3, #17
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d301      	bcc.n	8000f80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e010      	b.n	8000fa2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <SysTick_Config+0x44>)
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	3a01      	subs	r2, #1
 8000f86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f88:	2301      	movs	r3, #1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff ff7c 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x44>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x44>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	210f      	movs	r1, #15
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	1c02      	adds	r2, r0, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ffbf 	bl	8000f68 <SysTick_Config>
 8000fea:	0003      	movs	r3, r0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e14d      	b.n	80012a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x28>
 800101a:	e13e      	b.n	800129a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_GPIO_Init+0x40>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	4013      	ands	r3, r2
 8001030:	2b02      	cmp	r3, #2
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	2201      	movs	r2, #1
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	4013      	ands	r3, r2
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d017      	beq.n	80010d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	4013      	ands	r3, r2
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2207      	movs	r2, #7
 80010f0:	4013      	ands	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2107      	movs	r1, #7
 800110a:	400b      	ands	r3, r1
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	029b      	lsls	r3, r3, #10
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_GPIO_Init+0x174>
 8001166:	e098      	b.n	800129a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3318      	adds	r3, #24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	589b      	ldr	r3, [r3, r2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2203      	movs	r2, #3
 800117a:	4013      	ands	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	220f      	movs	r2, #15
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	429a      	cmp	r2, r3
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x1d6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a48      	ldr	r2, [pc, #288]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x1d2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a47      	ldr	r2, [pc, #284]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x1ce>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x1ca>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a45      	ldr	r2, [pc, #276]	; (80012c8 <HAL_GPIO_Init+0x2d4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x1c6>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x1d8>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x1d8>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x1d8>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x1d8>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x1d8>
 80011ca:	2300      	movs	r3, #0
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	2103      	movs	r1, #3
 80011d0:	400a      	ands	r2, r1
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	4093      	lsls	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011dc:	4936      	ldr	r1, [pc, #216]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	035b      	lsls	r3, r3, #13
 8001202:	4013      	ands	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	039b      	lsls	r3, r3, #14
 800122c:	4013      	ands	r3, r2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 8001240:	2384      	movs	r3, #132	; 0x84
 8001242:	58d3      	ldr	r3, [r2, r3]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001264:	4914      	ldr	r1, [pc, #80]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 8001266:	2284      	movs	r2, #132	; 0x84
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	58d3      	ldr	r3, [r2, r3]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	4013      	ands	r3, r2
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001292:	4909      	ldr	r1, [pc, #36]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	40da      	lsrs	r2, r3
 80012a8:	1e13      	subs	r3, r2, #0
 80012aa:	d000      	beq.n	80012ae <HAL_GPIO_Init+0x2ba>
 80012ac:	e6aa      	b.n	8001004 <HAL_GPIO_Init+0x10>
  }
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b006      	add	sp, #24
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021800 	.word	0x40021800
 80012bc:	50000400 	.word	0x50000400
 80012c0:	50000800 	.word	0x50000800
 80012c4:	50000c00 	.word	0x50000c00
 80012c8:	50001000 	.word	0x50001000

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	0008      	movs	r0, r1
 80012d6:	0011      	movs	r1, r2
 80012d8:	1cbb      	adds	r3, r7, #2
 80012da:	1c02      	adds	r2, r0, #0
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	1c7b      	adds	r3, r7, #1
 80012e0:	1c0a      	adds	r2, r1, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e4:	1c7b      	adds	r3, r7, #1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ec:	1cbb      	adds	r3, r7, #2
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	881a      	ldrh	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001316:	4013      	ands	r3, r2
 8001318:	0019      	movs	r1, r3
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d11f      	bne.n	800136c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	0013      	movs	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	189b      	adds	r3, r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4912      	ldr	r1, [pc, #72]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800133a:	0018      	movs	r0, r3
 800133c:	f7fe fee2 	bl	8000104 <__udivsi3>
 8001340:	0003      	movs	r3, r0
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001346:	e008      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3b01      	subs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e001      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e009      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	401a      	ands	r2, r3
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	429a      	cmp	r2, r3
 800136a:	d0ed      	beq.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40007000 	.word	0x40007000
 800137c:	fffff9ff 	.word	0xfffff9ff
 8001380:	20000000 	.word	0x20000000
 8001384:	000f4240 	.word	0x000f4240

08001388 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <LL_RCC_GetAPB1Prescaler+0x14>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	23e0      	movs	r3, #224	; 0xe0
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4013      	ands	r3, r2
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f000 fb50 	bl	8001a54 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_RCC_OscConfig+0x20>
 80013be:	e07c      	b.n	80014ba <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c0:	4bc3      	ldr	r3, [pc, #780]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2238      	movs	r2, #56	; 0x38
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ca:	4bc1      	ldr	r3, [pc, #772]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2203      	movs	r2, #3
 80013d0:	4013      	ands	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x40>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d002      	beq.n	80013e6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d10b      	bne.n	80013fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e6:	4bba      	ldr	r3, [pc, #744]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d062      	beq.n	80014b8 <HAL_RCC_OscConfig+0x118>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d15e      	bne.n	80014b8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e32a      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	429a      	cmp	r2, r3
 8001408:	d107      	bne.n	800141a <HAL_RCC_OscConfig+0x7a>
 800140a:	4bb1      	ldr	r3, [pc, #708]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4bb0      	ldr	r3, [pc, #704]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0249      	lsls	r1, r1, #9
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e020      	b.n	800145c <HAL_RCC_OscConfig+0xbc>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	02db      	lsls	r3, r3, #11
 8001422:	429a      	cmp	r2, r3
 8001424:	d10e      	bne.n	8001444 <HAL_RCC_OscConfig+0xa4>
 8001426:	4baa      	ldr	r3, [pc, #680]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4ba9      	ldr	r3, [pc, #676]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	02c9      	lsls	r1, r1, #11
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	4ba6      	ldr	r3, [pc, #664]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4ba5      	ldr	r3, [pc, #660]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0249      	lsls	r1, r1, #9
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xbc>
 8001444:	4ba2      	ldr	r3, [pc, #648]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4ba1      	ldr	r3, [pc, #644]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 800144a:	49a2      	ldr	r1, [pc, #648]	; (80016d4 <HAL_RCC_OscConfig+0x334>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	4b9f      	ldr	r3, [pc, #636]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b9e      	ldr	r3, [pc, #632]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001456:	49a0      	ldr	r1, [pc, #640]	; (80016d8 <HAL_RCC_OscConfig+0x338>)
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d014      	beq.n	800148e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fd08 	bl	8000e78 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146e:	f7ff fd03 	bl	8000e78 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e2e9      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0xce>
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fcf3 	bl	8000e78 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcee 	bl	8000e78 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e2d4      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	029b      	lsls	r3, r3, #10
 80014b2:	4013      	ands	r3, r2
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0xf8>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x126>
 80014c4:	e099      	b.n	80015fa <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2238      	movs	r2, #56	; 0x38
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2203      	movs	r2, #3
 80014d6:	4013      	ands	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x146>
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d002      	beq.n	80014ec <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d135      	bne.n	8001558 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x164>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e2a7      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a74      	ldr	r2, [pc, #464]	; (80016dc <HAL_RCC_OscConfig+0x33c>)
 800150a:	4013      	ands	r3, r2
 800150c:	0019      	movs	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	021a      	lsls	r2, r3, #8
 8001514:	4b6e      	ldr	r3, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d112      	bne.n	8001546 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a6e      	ldr	r2, [pc, #440]	; (80016e0 <HAL_RCC_OscConfig+0x340>)
 8001526:	4013      	ands	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0adb      	lsrs	r3, r3, #11
 800153a:	2207      	movs	r2, #7
 800153c:	4013      	ands	r3, r2
 800153e:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x344>)
 8001540:	40da      	lsrs	r2, r3
 8001542:	4b69      	ldr	r3, [pc, #420]	; (80016e8 <HAL_RCC_OscConfig+0x348>)
 8001544:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001546:	4b69      	ldr	r3, [pc, #420]	; (80016ec <HAL_RCC_OscConfig+0x34c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fc38 	bl	8000dc0 <HAL_InitTick>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d051      	beq.n	80015f8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e27d      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d030      	beq.n	80015c2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_RCC_OscConfig+0x340>)
 8001566:	4013      	ands	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	0049      	lsls	r1, r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fc79 	bl	8000e78 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fc74 	bl	8000e78 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e25a      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159e:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4013      	ands	r3, r2
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_RCC_OscConfig+0x33c>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	021a      	lsls	r2, r3, #8
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	e01b      	b.n	80015fa <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80015c8:	4949      	ldr	r1, [pc, #292]	; (80016f0 <HAL_RCC_OscConfig+0x350>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc53 	bl	8000e78 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc4e 	bl	8000e78 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e234      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x238>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2208      	movs	r2, #8
 8001600:	4013      	ands	r3, r2
 8001602:	d047      	beq.n	8001694 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2238      	movs	r2, #56	; 0x38
 800160a:	4013      	ands	r3, r2
 800160c:	2b18      	cmp	r3, #24
 800160e:	d10a      	bne.n	8001626 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	2202      	movs	r2, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d03c      	beq.n	8001694 <HAL_RCC_OscConfig+0x2f4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d138      	bne.n	8001694 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e216      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d019      	beq.n	8001662 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc1d 	bl	8000e78 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fc18 	bl	8000e78 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1fe      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d0f1      	beq.n	8001644 <HAL_RCC_OscConfig+0x2a4>
 8001660:	e018      	b.n	8001694 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001664:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 8001668:	2101      	movs	r1, #1
 800166a:	438a      	bics	r2, r1
 800166c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fc03 	bl	8000e78 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fbfe 	bl	8000e78 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1e4      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d1f1      	bne.n	8001678 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2204      	movs	r2, #4
 800169a:	4013      	ands	r3, r2
 800169c:	d100      	bne.n	80016a0 <HAL_RCC_OscConfig+0x300>
 800169e:	e0c7      	b.n	8001830 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a0:	231f      	movs	r3, #31
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2238      	movs	r2, #56	; 0x38
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d11f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x330>)
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2202      	movs	r2, #2
 80016ba:	4013      	ands	r3, r2
 80016bc:	d100      	bne.n	80016c0 <HAL_RCC_OscConfig+0x320>
 80016be:	e0b7      	b.n	8001830 <HAL_RCC_OscConfig+0x490>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d000      	beq.n	80016ca <HAL_RCC_OscConfig+0x32a>
 80016c8:	e0b2      	b.n	8001830 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c2      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40021000 	.word	0x40021000
 80016d4:	fffeffff 	.word	0xfffeffff
 80016d8:	fffbffff 	.word	0xfffbffff
 80016dc:	ffff80ff 	.word	0xffff80ff
 80016e0:	ffffc7ff 	.word	0xffffc7ff
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004
 80016f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016f4:	4bb5      	ldr	r3, [pc, #724]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80016f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	055b      	lsls	r3, r3, #21
 80016fc:	4013      	ands	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x364>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x366>
 8001704:	2300      	movs	r3, #0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d011      	beq.n	800172e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800170c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800170e:	4baf      	ldr	r3, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
 8001718:	4bac      	ldr	r3, [pc, #688]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800171a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	055b      	lsls	r3, r3, #21
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001726:	231f      	movs	r3, #31
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	4ba8      	ldr	r3, [pc, #672]	; (80019d0 <HAL_RCC_OscConfig+0x630>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4013      	ands	r3, r2
 8001738:	d11a      	bne.n	8001770 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800173a:	4ba5      	ldr	r3, [pc, #660]	; (80019d0 <HAL_RCC_OscConfig+0x630>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4ba4      	ldr	r3, [pc, #656]	; (80019d0 <HAL_RCC_OscConfig+0x630>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	0049      	lsls	r1, r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001748:	f7ff fb96 	bl	8000e78 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff fb91 	bl	8000e78 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e177      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4b9a      	ldr	r3, [pc, #616]	; (80019d0 <HAL_RCC_OscConfig+0x630>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x3e6>
 8001778:	4b94      	ldr	r3, [pc, #592]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800177a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800177c:	4b93      	ldr	r3, [pc, #588]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	65da      	str	r2, [r3, #92]	; 0x5c
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x420>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x408>
 800178e:	4b8f      	ldr	r3, [pc, #572]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001790:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001792:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	65da      	str	r2, [r3, #92]	; 0x5c
 800179a:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800179c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800179e:	4b8b      	ldr	r3, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x420>
 80017a8:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80017aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ac:	4b87      	ldr	r3, [pc, #540]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	438a      	bics	r2, r1
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b4:	4b85      	ldr	r3, [pc, #532]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80017b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b8:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	438a      	bics	r2, r1
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb56 	bl	8000e78 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fb51 	bl	8000e78 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a7d      	ldr	r2, [pc, #500]	; (80019d4 <HAL_RCC_OscConfig+0x634>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e136      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	4b79      	ldr	r3, [pc, #484]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x432>
 80017f0:	e013      	b.n	800181a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fb41 	bl	8000e78 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fa:	e009      	b.n	8001810 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb3c 	bl	8000e78 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4a73      	ldr	r2, [pc, #460]	; (80019d4 <HAL_RCC_OscConfig+0x634>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e121      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800181a:	231f      	movs	r3, #31
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b69      	ldr	r3, [pc, #420]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800182a:	496b      	ldr	r1, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x638>)
 800182c:	400a      	ands	r2, r1
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2220      	movs	r2, #32
 8001836:	4013      	ands	r3, r2
 8001838:	d039      	beq.n	80018ae <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01b      	beq.n	800187a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001842:	4b62      	ldr	r3, [pc, #392]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	03c9      	lsls	r1, r1, #15
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fb12 	bl	8000e78 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185a:	f7ff fb0d 	bl	8000e78 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0f3      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800186c:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	4013      	ands	r3, r2
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x4ba>
 8001878:	e019      	b.n	80018ae <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800187a:	4b54      	ldr	r3, [pc, #336]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001880:	4956      	ldr	r1, [pc, #344]	; (80019dc <HAL_RCC_OscConfig+0x63c>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff faf7 	bl	8000e78 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001890:	f7ff faf2 	bl	8000e78 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0d8      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d100      	bne.n	80018b8 <HAL_RCC_OscConfig+0x518>
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2238      	movs	r2, #56	; 0x38
 80018be:	4013      	ands	r3, r2
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0x526>
 80018c4:	e07b      	b.n	80019be <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d156      	bne.n	800197c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80018d4:	4942      	ldr	r1, [pc, #264]	; (80019e0 <HAL_RCC_OscConfig+0x640>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff facd 	bl	8000e78 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fac8 	bl	8000e78 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0ae      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	049b      	lsls	r3, r3, #18
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a37      	ldr	r2, [pc, #220]	; (80019e4 <HAL_RCC_OscConfig+0x644>)
 8001908:	4013      	ands	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	431a      	orrs	r2, r3
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001932:	430a      	orrs	r2, r1
 8001934:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0449      	lsls	r1, r1, #17
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0549      	lsls	r1, r1, #21
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fa91 	bl	8000e78 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fa8c 	bl	8000e78 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e072      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	049b      	lsls	r3, r3, #18
 8001976:	4013      	ands	r3, r2
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x5bc>
 800197a:	e06a      	b.n	8001a52 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 8001982:	4917      	ldr	r1, [pc, #92]	; (80019e0 <HAL_RCC_OscConfig+0x640>)
 8001984:	400a      	ands	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fa76 	bl	8000e78 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff fa71 	bl	8000e78 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e057      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	049b      	lsls	r3, r3, #18
 80019ac:	4013      	ands	r3, r2
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_OscConfig+0x62c>)
 80019b6:	490c      	ldr	r1, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x648>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	e049      	b.n	8001a52 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d112      	bne.n	80019ec <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e044      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	00001388 	.word	0x00001388
 80019d8:	efffffff 	.word	0xefffffff
 80019dc:	ffbfffff 	.word	0xffbfffff
 80019e0:	feffffff 	.word	0xfeffffff
 80019e4:	11c1808c 	.word	0x11c1808c
 80019e8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x6bc>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2203      	movs	r2, #3
 80019f6:	401a      	ands	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d126      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2270      	movs	r2, #112	; 0x70
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d11f      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	23fe      	movs	r3, #254	; 0xfe
 8001a12:	01db      	lsls	r3, r3, #7
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d116      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	23f8      	movs	r3, #248	; 0xf8
 8001a24:	039b      	lsls	r3, r3, #14
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d10e      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	23e0      	movs	r3, #224	; 0xe0
 8001a34:	051b      	lsls	r3, r3, #20
 8001a36:	401a      	ands	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	0f5b      	lsrs	r3, r3, #29
 8001a44:	075a      	lsls	r2, r3, #29
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b008      	add	sp, #32
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0e9      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2207      	movs	r2, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d91e      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2207      	movs	r2, #7
 8001a88:	4393      	bics	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a94:	f7ff f9f0 	bl	8000e78 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9e:	f7ff f9eb 	bl	8000e78 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x1f4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0ca      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	4013      	ands	r3, r2
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d015      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d006      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ad4:	4b60      	ldr	r3, [pc, #384]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	21e0      	movs	r1, #224	; 0xe0
 8001adc:	01c9      	lsls	r1, r1, #7
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	; (8001c5c <HAL_RCC_ClockConfig+0x1fc>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	d057      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	d12b      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e097      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	049b      	lsls	r3, r3, #18
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d11f      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e08b      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4013      	ands	r3, r2
 8001b42:	d113      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e07f      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b54:	2202      	movs	r2, #2
 8001b56:	4013      	ands	r3, r2
 8001b58:	d108      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e074      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	2202      	movs	r2, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e06d      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2207      	movs	r2, #7
 8001b72:	4393      	bics	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b80:	f7ff f97a 	bl	8000e78 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7ff f975 	bl	8000e78 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_RCC_ClockConfig+0x1f4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e054      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2238      	movs	r2, #56	; 0x38
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ec      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d21e      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f952 	bl	8000e78 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7ff f94d 	bl	8000e78 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_RCC_ClockConfig+0x1f4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e02c      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2204      	movs	r2, #4
 8001c02:	4013      	ands	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <HAL_RCC_ClockConfig+0x200>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c1a:	f000 f829 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c1e:	0001      	movs	r1, r0
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	220f      	movs	r2, #15
 8001c28:	401a      	ands	r2, r3
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x204>)
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	58d3      	ldr	r3, [r2, r3]
 8001c30:	221f      	movs	r2, #31
 8001c32:	4013      	ands	r3, r2
 8001c34:	000a      	movs	r2, r1
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x208>)
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x20c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff f8bd 	bl	8000dc0 <HAL_InitTick>
 8001c46:	0003      	movs	r3, r0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40022000 	.word	0x40022000
 8001c54:	00001388 	.word	0x00001388
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	fffff0ff 	.word	0xfffff0ff
 8001c60:	ffff8fff 	.word	0xffff8fff
 8001c64:	080042e8 	.word	0x080042e8
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2238      	movs	r2, #56	; 0x38
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0adb      	lsrs	r3, r3, #11
 8001c86:	2207      	movs	r2, #7
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	0013      	movs	r3, r2
 8001c90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	4835      	ldr	r0, [pc, #212]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c96:	f7fe fa35 	bl	8000104 <__udivsi3>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	e05d      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2238      	movs	r2, #56	; 0x38
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e054      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2238      	movs	r2, #56	; 0x38
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d138      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	2207      	movs	r2, #7
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	4824      	ldr	r0, [pc, #144]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ce0:	f7fe fa10 	bl	8000104 <__udivsi3>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	227f      	movs	r2, #127	; 0x7f
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	434b      	muls	r3, r1
 8001cf4:	617b      	str	r3, [r7, #20]
        break;
 8001cf6:	e00d      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	481c      	ldr	r0, [pc, #112]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cfc:	f7fe fa02 	bl	8000104 <__udivsi3>
 8001d00:	0003      	movs	r3, r0
 8001d02:	0019      	movs	r1, r3
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	227f      	movs	r2, #127	; 0x7f
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	434b      	muls	r3, r1
 8001d10:	617b      	str	r3, [r7, #20]
        break;
 8001d12:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0f5b      	lsrs	r3, r3, #29
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	6978      	ldr	r0, [r7, #20]
 8001d26:	f7fe f9ed 	bl	8000104 <__udivsi3>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2238      	movs	r2, #56	; 0x38
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d103      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2238      	movs	r2, #56	; 0x38
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b18      	cmp	r3, #24
 8001d4e:	d103      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d50:	23fa      	movs	r3, #250	; 0xfa
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e001      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d5c:	693b      	ldr	r3, [r7, #16]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b006      	add	sp, #24
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d8c:	f7ff fff2 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d90:	0004      	movs	r4, r0
 8001d92:	f7ff faf9 	bl	8001388 <LL_RCC_GetAPB1Prescaler>
 8001d96:	0003      	movs	r3, r0
 8001d98:	0b1a      	lsrs	r2, r3, #12
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	58d3      	ldr	r3, [r2, r3]
 8001da0:	221f      	movs	r2, #31
 8001da2:	4013      	ands	r3, r2
 8001da4:	40dc      	lsrs	r4, r3
 8001da6:	0023      	movs	r3, r4
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	08004328 	.word	0x08004328

08001db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dbc:	2313      	movs	r3, #19
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	029b      	lsls	r3, r3, #10
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d100      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001dd8:	e0ad      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2011      	movs	r0, #17
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	055b      	lsls	r3, r3, #21
 8001dea:	4013      	ands	r3, r2
 8001dec:	d110      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0549      	lsls	r1, r1, #21
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	183b      	adds	r3, r7, r0
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e10:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	0049      	lsls	r1, r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e1e:	f7ff f82b 	bl	8000e78 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e26:	e00b      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e28:	f7ff f826 	bl	8000e78 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d904      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e36:	2313      	movs	r3, #19
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	701a      	strb	r2, [r3, #0]
        break;
 8001e3e:	e005      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d0ed      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e4c:	2313      	movs	r3, #19
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d15e      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e5a:	23c0      	movs	r3, #192	; 0xc0
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d014      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0249      	lsls	r1, r1, #9
 8001e86:	430a      	orrs	r2, r1
 8001e88:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e90:	491e      	ldr	r1, [pc, #120]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d016      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ffe8 	bl	8000e78 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eac:	e00c      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe ffe3 	bl	8000e78 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d904      	bls.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ebe:	2313      	movs	r3, #19
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	701a      	strb	r2, [r3, #0]
            break;
 8001ec6:	e004      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2202      	movs	r2, #2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d0ed      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ed2:	2313      	movs	r3, #19
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ef0:	e016      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ef2:	2312      	movs	r3, #18
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2213      	movs	r2, #19
 8001ef8:	18ba      	adds	r2, r7, r2
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e00f      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	fffffcff 	.word	0xfffffcff
 8001f0c:	fffeffff 	.word	0xfffeffff
 8001f10:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f14:	2312      	movs	r3, #18
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2213      	movs	r2, #19
 8001f1a:	18ba      	adds	r2, r7, r2
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f20:	2311      	movs	r3, #17
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4bb6      	ldr	r3, [pc, #728]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2e:	4bb5      	ldr	r3, [pc, #724]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f30:	49b5      	ldr	r1, [pc, #724]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f40:	4bb0      	ldr	r3, [pc, #704]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	2203      	movs	r2, #3
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4bad      	ldr	r3, [pc, #692]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f5e:	4ba9      	ldr	r3, [pc, #676]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	220c      	movs	r2, #12
 8001f64:	4393      	bics	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	4ba5      	ldr	r3, [pc, #660]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f7c:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	2230      	movs	r2, #48	; 0x30
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b9e      	ldr	r3, [pc, #632]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f9a:	4b9a      	ldr	r3, [pc, #616]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	4a9b      	ldr	r2, [pc, #620]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	015b      	lsls	r3, r3, #5
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001fba:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fda:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	4a8d      	ldr	r2, [pc, #564]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d009      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	4a86      	ldr	r2, [pc, #536]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200a:	430a      	orrs	r2, r1
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2220      	movs	r2, #32
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002018:	4b7a      	ldr	r3, [pc, #488]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	4a7f      	ldr	r2, [pc, #508]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	4b77      	ldr	r3, [pc, #476]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	4a79      	ldr	r2, [pc, #484]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002046:	430a      	orrs	r2, r1
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	01db      	lsls	r3, r3, #7
 8002052:	4013      	ands	r3, r2
 8002054:	d015      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	0899      	lsrs	r1, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002064:	430a      	orrs	r2, r1
 8002066:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	05db      	lsls	r3, r3, #23
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002074:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0249      	lsls	r1, r1, #9
 800207e:	430a      	orrs	r2, r1
 8002080:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	031b      	lsls	r3, r3, #12
 800208a:	4013      	ands	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	039b      	lsls	r3, r3, #14
 80020aa:	4013      	ands	r3, r2
 80020ac:	d016      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020ae:	4b55      	ldr	r3, [pc, #340]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	4a5c      	ldr	r2, [pc, #368]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020bc:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	03db      	lsls	r3, r3, #15
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d106      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0449      	lsls	r1, r1, #17
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	03db      	lsls	r3, r3, #15
 80020e4:	4013      	ands	r3, r2
 80020e6:	d016      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	045b      	lsls	r3, r3, #17
 8002104:	429a      	cmp	r2, r3
 8002106:	d106      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0449      	lsls	r1, r1, #17
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4013      	ands	r3, r2
 8002120:	d014      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	2203      	movs	r2, #3
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002132:	430a      	orrs	r2, r1
 8002134:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d106      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0249      	lsls	r1, r1, #9
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	4013      	ands	r3, r2
 8002156:	d014      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	220c      	movs	r2, #12
 800215e:	4393      	bics	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002168:	430a      	orrs	r2, r1
 800216a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2b04      	cmp	r3, #4
 8002172:	d106      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	045b      	lsls	r3, r3, #17
 800218a:	4013      	ands	r3, r2
 800218c:	d016      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d106      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0449      	lsls	r1, r1, #17
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	049b      	lsls	r3, r3, #18
 80021c4:	4013      	ands	r3, r2
 80021c6:	d016      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d106      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	0449      	lsls	r1, r1, #17
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021f6:	2312      	movs	r3, #18
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b006      	add	sp, #24
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	efffffff 	.word	0xefffffff
 800220c:	fffff3ff 	.word	0xfffff3ff
 8002210:	fffffcff 	.word	0xfffffcff
 8002214:	fff3ffff 	.word	0xfff3ffff
 8002218:	ffcfffff 	.word	0xffcfffff
 800221c:	ffffcfff 	.word	0xffffcfff
 8002220:	ffff3fff 	.word	0xffff3fff
 8002224:	ffbfffff 	.word	0xffbfffff
 8002228:	feffffff 	.word	0xfeffffff

0800222c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e04a      	b.n	80022d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	223d      	movs	r2, #61	; 0x3d
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223c      	movs	r2, #60	; 0x3c
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe fc47 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223d      	movs	r2, #61	; 0x3d
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	0019      	movs	r1, r3
 800226c:	0010      	movs	r0, r2
 800226e:	f000 fa6b 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2248      	movs	r2, #72	; 0x48
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223e      	movs	r2, #62	; 0x3e
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223f      	movs	r2, #63	; 0x3f
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2241      	movs	r2, #65	; 0x41
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2242      	movs	r2, #66	; 0x42
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2243      	movs	r2, #67	; 0x43
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2244      	movs	r2, #68	; 0x44
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2245      	movs	r2, #69	; 0x45
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2246      	movs	r2, #70	; 0x46
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2247      	movs	r2, #71	; 0x47
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	223d      	movs	r2, #61	; 0x3d
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e04a      	b.n	8002384 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223d      	movs	r2, #61	; 0x3d
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	223c      	movs	r2, #60	; 0x3c
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f841 	bl	800238c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223d      	movs	r2, #61	; 0x3d
 800230e:	2102      	movs	r1, #2
 8002310:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	0019      	movs	r1, r3
 800231c:	0010      	movs	r0, r2
 800231e:	f000 fa13 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2248      	movs	r2, #72	; 0x48
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223e      	movs	r2, #62	; 0x3e
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223f      	movs	r2, #63	; 0x3f
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2241      	movs	r2, #65	; 0x41
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2242      	movs	r2, #66	; 0x42
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2243      	movs	r2, #67	; 0x43
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2244      	movs	r2, #68	; 0x44
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2245      	movs	r2, #69	; 0x45
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2246      	movs	r2, #70	; 0x46
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2247      	movs	r2, #71	; 0x47
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223d      	movs	r2, #61	; 0x3d
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2317      	movs	r3, #23
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	223c      	movs	r2, #60	; 0x3c
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_TIM_PWM_ConfigChannel+0x22>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0e5      	b.n	800258a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	223c      	movs	r2, #60	; 0x3c
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b14      	cmp	r3, #20
 80023ca:	d900      	bls.n	80023ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80023cc:	e0d1      	b.n	8002572 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 fa48 	bl	8002878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2108      	movs	r1, #8
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2104      	movs	r1, #4
 8002404:	438a      	bics	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6999      	ldr	r1, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	619a      	str	r2, [r3, #24]
      break;
 800241a:	e0af      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fab1 	bl	800298c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	0109      	lsls	r1, r1, #4
 8002438:	430a      	orrs	r2, r1
 800243a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4954      	ldr	r1, [pc, #336]	; (8002598 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002448:	400a      	ands	r2, r1
 800244a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6999      	ldr	r1, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	021a      	lsls	r2, r3, #8
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	619a      	str	r2, [r3, #24]
      break;
 8002460:	e08c      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	0011      	movs	r1, r2
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fb12 	bl	8002a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69da      	ldr	r2, [r3, #28]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2108      	movs	r1, #8
 800247c:	430a      	orrs	r2, r1
 800247e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69d9      	ldr	r1, [r3, #28]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	61da      	str	r2, [r3, #28]
      break;
 80024a2:	e06b      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 fb79 	bl	8002ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0109      	lsls	r1, r1, #4
 80024c0:	430a      	orrs	r2, r1
 80024c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4932      	ldr	r1, [pc, #200]	; (8002598 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69d9      	ldr	r1, [r3, #28]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	61da      	str	r2, [r3, #28]
      break;
 80024e8:	e048      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fbc0 	bl	8002c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2108      	movs	r1, #8
 8002504:	430a      	orrs	r2, r1
 8002506:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2104      	movs	r1, #4
 8002514:	438a      	bics	r2, r1
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800252a:	e027      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	0011      	movs	r1, r2
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fbff 	bl	8002d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0109      	lsls	r1, r1, #4
 8002548:	430a      	orrs	r2, r1
 800254a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4910      	ldr	r1, [pc, #64]	; (8002598 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002558:	400a      	ands	r2, r1
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002570:	e004      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002572:	2317      	movs	r3, #23
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
      break;
 800257a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	223c      	movs	r2, #60	; 0x3c
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]

  return status;
 8002584:	2317      	movs	r3, #23
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b006      	add	sp, #24
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	08004348 	.word	0x08004348
 8002598:	fffffbff 	.word	0xfffffbff

0800259c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	230f      	movs	r3, #15
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223c      	movs	r2, #60	; 0x3c
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_TIM_ConfigClockSource+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0bc      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x19a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223c      	movs	r2, #60	; 0x3c
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	223d      	movs	r2, #61	; 0x3d
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4a5a      	ldr	r2, [pc, #360]	; (8002740 <HAL_TIM_ConfigClockSource+0x1a4>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4a59      	ldr	r2, [pc, #356]	; (8002744 <HAL_TIM_ConfigClockSource+0x1a8>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0192      	lsls	r2, r2, #6
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d040      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xde>
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0192      	lsls	r2, r2, #6
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x66>
 8002600:	e088      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	0152      	lsls	r2, r2, #5
 8002606:	4293      	cmp	r3, r2
 8002608:	d100      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x70>
 800260a:	e088      	b.n	800271e <HAL_TIM_ConfigClockSource+0x182>
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0152      	lsls	r2, r2, #5
 8002610:	4293      	cmp	r3, r2
 8002612:	d900      	bls.n	8002616 <HAL_TIM_ConfigClockSource+0x7a>
 8002614:	e07e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002616:	2b70      	cmp	r3, #112	; 0x70
 8002618:	d018      	beq.n	800264c <HAL_TIM_ConfigClockSource+0xb0>
 800261a:	d900      	bls.n	800261e <HAL_TIM_ConfigClockSource+0x82>
 800261c:	e07a      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800261e:	2b60      	cmp	r3, #96	; 0x60
 8002620:	d04f      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x126>
 8002622:	d900      	bls.n	8002626 <HAL_TIM_ConfigClockSource+0x8a>
 8002624:	e076      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002626:	2b50      	cmp	r3, #80	; 0x50
 8002628:	d03b      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x106>
 800262a:	d900      	bls.n	800262e <HAL_TIM_ConfigClockSource+0x92>
 800262c:	e072      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	d057      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x146>
 8002632:	d900      	bls.n	8002636 <HAL_TIM_ConfigClockSource+0x9a>
 8002634:	e06e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002636:	2b30      	cmp	r3, #48	; 0x30
 8002638:	d063      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002640:	d868      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d05d      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002646:	2b10      	cmp	r3, #16
 8002648:	d05b      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800264a:	e063      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800265c:	f000 fc4c 	bl	8002ef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2277      	movs	r2, #119	; 0x77
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e052      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	f000 fc35 	bl	8002ef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	01c9      	lsls	r1, r1, #7
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	001a      	movs	r2, r3
 80026b0:	f000 fba6 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fc00 	bl	8002ec0 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ce:	001a      	movs	r2, r3
 80026d0:	f000 fbc4 	bl	8002e5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fbf0 	bl	8002ec0 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ee:	001a      	movs	r2, r3
 80026f0:	f000 fb86 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fbe0 	bl	8002ec0 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f000 fbd7 	bl	8002ec0 <TIM_ITRx_SetConfig>
      break;
 8002712:	e005      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800271e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	223d      	movs	r2, #61	; 0x3d
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	223c      	movs	r2, #60	; 0x3c
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

  return status;
 8002730:	230f      	movs	r3, #15
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	ffceff88 	.word	0xffceff88
 8002744:	ffff00ff 	.word	0xffff00ff

08002748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <TIM_Base_SetConfig+0x110>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00c      	beq.n	800277a <TIM_Base_SetConfig+0x32>
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	05db      	lsls	r3, r3, #23
 8002766:	429a      	cmp	r2, r3
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x32>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a3b      	ldr	r2, [pc, #236]	; (800285c <TIM_Base_SetConfig+0x114>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x32>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <TIM_Base_SetConfig+0x118>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2270      	movs	r2, #112	; 0x70
 800277e:	4393      	bics	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a32      	ldr	r2, [pc, #200]	; (8002858 <TIM_Base_SetConfig+0x110>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01c      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	429a      	cmp	r2, r3
 800279c:	d017      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2e      	ldr	r2, [pc, #184]	; (800285c <TIM_Base_SetConfig+0x114>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <TIM_Base_SetConfig+0x118>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00f      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <TIM_Base_SetConfig+0x11c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <TIM_Base_SetConfig+0x120>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a2a      	ldr	r2, [pc, #168]	; (800286c <TIM_Base_SetConfig+0x124>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0x86>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a29      	ldr	r2, [pc, #164]	; (8002870 <TIM_Base_SetConfig+0x128>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <TIM_Base_SetConfig+0x12c>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	4393      	bics	r3, r2
 80027e6:	001a      	movs	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <TIM_Base_SetConfig+0x110>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0xde>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <TIM_Base_SetConfig+0x120>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0xde>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <TIM_Base_SetConfig+0x124>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0xde>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a13      	ldr	r2, [pc, #76]	; (8002870 <TIM_Base_SetConfig+0x128>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d103      	bne.n	800282e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2201      	movs	r2, #1
 800283a:	4013      	ands	r3, r2
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2201      	movs	r2, #1
 8002846:	4393      	bics	r3, r2
 8002848:	001a      	movs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]
  }
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40002000 	.word	0x40002000
 8002868:	40014000 	.word	0x40014000
 800286c:	40014400 	.word	0x40014400
 8002870:	40014800 	.word	0x40014800
 8002874:	fffffcff 	.word	0xfffffcff

08002878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	2201      	movs	r2, #1
 800288e:	4393      	bics	r3, r2
 8002890:	001a      	movs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a32      	ldr	r2, [pc, #200]	; (8002970 <TIM_OC1_SetConfig+0xf8>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2203      	movs	r2, #3
 80028ae:	4393      	bics	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2202      	movs	r2, #2
 80028c0:	4393      	bics	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <TIM_OC1_SetConfig+0xfc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00b      	beq.n	80028ee <TIM_OC1_SetConfig+0x76>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <TIM_OC1_SetConfig+0x100>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_OC1_SetConfig+0x76>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <TIM_OC1_SetConfig+0x104>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <TIM_OC1_SetConfig+0x76>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <TIM_OC1_SetConfig+0x108>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10c      	bne.n	8002908 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2208      	movs	r2, #8
 80028f2:	4393      	bics	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2204      	movs	r2, #4
 8002904:	4393      	bics	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <TIM_OC1_SetConfig+0xfc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_OC1_SetConfig+0xb0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <TIM_OC1_SetConfig+0x100>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_OC1_SetConfig+0xb0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <TIM_OC1_SetConfig+0x104>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_OC1_SetConfig+0xb0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <TIM_OC1_SetConfig+0x108>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <TIM_OC1_SetConfig+0x10c>)
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <TIM_OC1_SetConfig+0x110>)
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b006      	add	sp, #24
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	fffeff8f 	.word	0xfffeff8f
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40014000 	.word	0x40014000
 800297c:	40014400 	.word	0x40014400
 8002980:	40014800 	.word	0x40014800
 8002984:	fffffeff 	.word	0xfffffeff
 8002988:	fffffdff 	.word	0xfffffdff

0800298c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4393      	bics	r3, r2
 80029a4:	001a      	movs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <TIM_OC2_SetConfig+0xe8>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <TIM_OC2_SetConfig+0xec>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4393      	bics	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <TIM_OC2_SetConfig+0xf0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10d      	bne.n	8002a0a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	4393      	bics	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	4393      	bics	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <TIM_OC2_SetConfig+0xf0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_OC2_SetConfig+0x9e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <TIM_OC2_SetConfig+0xf4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_OC2_SetConfig+0x9e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <TIM_OC2_SetConfig+0xf8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_OC2_SetConfig+0x9e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <TIM_OC2_SetConfig+0xfc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d113      	bne.n	8002a52 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <TIM_OC2_SetConfig+0x100>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <TIM_OC2_SetConfig+0x104>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	feff8fff 	.word	0xfeff8fff
 8002a78:	fffffcff 	.word	0xfffffcff
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	fffffbff 	.word	0xfffffbff
 8002a90:	fffff7ff 	.word	0xfffff7ff

08002a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a33      	ldr	r2, [pc, #204]	; (8002b78 <TIM_OC3_SetConfig+0xe4>)
 8002aaa:	401a      	ands	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <TIM_OC3_SetConfig+0xe8>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	4393      	bics	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <TIM_OC3_SetConfig+0xec>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <TIM_OC3_SetConfig+0xf0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <TIM_OC3_SetConfig+0xf4>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <TIM_OC3_SetConfig+0xf8>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <TIM_OC3_SetConfig+0xf0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_OC3_SetConfig+0x9a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <TIM_OC3_SetConfig+0xfc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_OC3_SetConfig+0x9a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <TIM_OC3_SetConfig+0x100>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_OC3_SetConfig+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <TIM_OC3_SetConfig+0x104>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d113      	bne.n	8002b56 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <TIM_OC3_SetConfig+0x108>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4a19      	ldr	r2, [pc, #100]	; (8002ba0 <TIM_OC3_SetConfig+0x10c>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b006      	add	sp, #24
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	fffffeff 	.word	0xfffffeff
 8002b7c:	fffeff8f 	.word	0xfffeff8f
 8002b80:	fffffdff 	.word	0xfffffdff
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	fffff7ff 	.word	0xfffff7ff
 8002b8c:	fffffbff 	.word	0xfffffbff
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40014400 	.word	0x40014400
 8002b98:	40014800 	.word	0x40014800
 8002b9c:	ffffefff 	.word	0xffffefff
 8002ba0:	ffffdfff 	.word	0xffffdfff

08002ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a26      	ldr	r2, [pc, #152]	; (8002c54 <TIM_OC4_SetConfig+0xb0>)
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <TIM_OC4_SetConfig+0xb4>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <TIM_OC4_SetConfig+0xb8>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_OC4_SetConfig+0xbc>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	031b      	lsls	r3, r3, #12
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <TIM_OC4_SetConfig+0xc0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_OC4_SetConfig+0x78>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <TIM_OC4_SetConfig+0xc4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_OC4_SetConfig+0x78>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <TIM_OC4_SetConfig+0xc8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_OC4_SetConfig+0x78>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <TIM_OC4_SetConfig+0xcc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d109      	bne.n	8002c30 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <TIM_OC4_SetConfig+0xd0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b006      	add	sp, #24
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	ffffefff 	.word	0xffffefff
 8002c58:	feff8fff 	.word	0xfeff8fff
 8002c5c:	fffffcff 	.word	0xfffffcff
 8002c60:	ffffdfff 	.word	0xffffdfff
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800
 8002c74:	ffffbfff 	.word	0xffffbfff

08002c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <TIM_OC5_SetConfig+0xa4>)
 8002c8e:	401a      	ands	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <TIM_OC5_SetConfig+0xa8>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <TIM_OC5_SetConfig+0xac>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <TIM_OC5_SetConfig+0xb0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_OC5_SetConfig+0x6e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <TIM_OC5_SetConfig+0xb4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <TIM_OC5_SetConfig+0x6e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <TIM_OC5_SetConfig+0xb8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_OC5_SetConfig+0x6e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <TIM_OC5_SetConfig+0xbc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d109      	bne.n	8002cfa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <TIM_OC5_SetConfig+0xa4>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b006      	add	sp, #24
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	fffeffff 	.word	0xfffeffff
 8002d20:	fffeff8f 	.word	0xfffeff8f
 8002d24:	fffdffff 	.word	0xfffdffff
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40014400 	.word	0x40014400
 8002d34:	40014800 	.word	0x40014800

08002d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <TIM_OC6_SetConfig+0xa8>)
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <TIM_OC6_SetConfig+0xac>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <TIM_OC6_SetConfig+0xb0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	051b      	lsls	r3, r3, #20
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <TIM_OC6_SetConfig+0xb4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <TIM_OC6_SetConfig+0x70>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <TIM_OC6_SetConfig+0xb8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_OC6_SetConfig+0x70>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <TIM_OC6_SetConfig+0xbc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_OC6_SetConfig+0x70>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <TIM_OC6_SetConfig+0xc0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d109      	bne.n	8002dbc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <TIM_OC6_SetConfig+0xc4>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b006      	add	sp, #24
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	ffefffff 	.word	0xffefffff
 8002de4:	feff8fff 	.word	0xfeff8fff
 8002de8:	ffdfffff 	.word	0xffdfffff
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800
 8002dfc:	fffbffff 	.word	0xfffbffff

08002e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4393      	bics	r3, r2
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	22f0      	movs	r2, #240	; 0xf0
 8002e2a:	4393      	bics	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	220a      	movs	r2, #10
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b006      	add	sp, #24
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	2210      	movs	r2, #16
 8002e74:	4393      	bics	r3, r2
 8002e76:	001a      	movs	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <TIM_TI2_ConfigInputStage+0x60>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	031b      	lsls	r3, r3, #12
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	22a0      	movs	r2, #160	; 0xa0
 8002e98:	4393      	bics	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b006      	add	sp, #24
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	ffff0fff 	.word	0xffff0fff

08002ec0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <TIM_ITRx_SetConfig+0x34>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	2207      	movs	r2, #7
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b004      	add	sp, #16
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	ffcfff8f 	.word	0xffcfff8f

08002ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <TIM_ETR_SetConfig+0x3c>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b006      	add	sp, #24
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	ffff00ff 	.word	0xffff00ff

08002f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	223c      	movs	r2, #60	; 0x3c
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e05a      	b.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223c      	movs	r2, #60	; 0x3c
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	223d      	movs	r2, #61	; 0x3d
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2270      	movs	r2, #112	; 0x70
 8002f90:	4393      	bics	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d014      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	05db      	lsls	r3, r3, #23
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d00e      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a12      	ldr	r2, [pc, #72]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	4393      	bics	r3, r2
 8002fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	223d      	movs	r2, #61	; 0x3d
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	223c      	movs	r2, #60	; 0x3c
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b004      	add	sp, #16
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	40012c00 	.word	0x40012c00
 8003014:	ff0fffff 	.word	0xff0fffff
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40014000 	.word	0x40014000

08003024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	223c      	movs	r2, #60	; 0x3c
 8003036:	5c9b      	ldrb	r3, [r3, r2]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e06f      	b.n	8003120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	223c      	movs	r2, #60	; 0x3c
 8003044:	2101      	movs	r1, #1
 8003046:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	22ff      	movs	r2, #255	; 0xff
 800304c:	4393      	bics	r3, r2
 800304e:	001a      	movs	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800305c:	401a      	ands	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800306a:	401a      	ands	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003078:	401a      	ands	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003086:	401a      	ands	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003094:	401a      	ands	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a26      	ldr	r2, [pc, #152]	; (800313c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80030a2:	401a      	ands	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a24      	ldr	r2, [pc, #144]	; (8003140 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80030b0:	401a      	ands	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80030c0:	401a      	ands	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d11c      	bne.n	800310e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80030d8:	401a      	ands	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	051b      	lsls	r3, r3, #20
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a1a      	ldr	r2, [pc, #104]	; (8003150 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80030e8:	401a      	ands	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80030f6:	401a      	ands	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003104:	401a      	ands	r2, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	223c      	movs	r2, #60	; 0x3c
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffffcff 	.word	0xfffffcff
 800312c:	fffffbff 	.word	0xfffffbff
 8003130:	fffff7ff 	.word	0xfffff7ff
 8003134:	ffffefff 	.word	0xffffefff
 8003138:	ffffdfff 	.word	0xffffdfff
 800313c:	ffffbfff 	.word	0xffffbfff
 8003140:	fff0ffff 	.word	0xfff0ffff
 8003144:	efffffff 	.word	0xefffffff
 8003148:	40012c00 	.word	0x40012c00
 800314c:	ff0fffff 	.word	0xff0fffff
 8003150:	feffffff 	.word	0xfeffffff
 8003154:	fdffffff 	.word	0xfdffffff
 8003158:	dfffffff 	.word	0xdfffffff

0800315c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e046      	b.n	80031fc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2288      	movs	r2, #136	; 0x88
 8003172:	589b      	ldr	r3, [r3, r2]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2284      	movs	r2, #132	; 0x84
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f7fd fd72 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2288      	movs	r2, #136	; 0x88
 800318c:	2124      	movs	r1, #36	; 0x24
 800318e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2101      	movs	r1, #1
 800319c:	438a      	bics	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fd0c 	bl	8003bc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 f9b2 	bl	800351c <UART_SetConfig>
 80031b8:	0003      	movs	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01c      	b.n	80031fc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	490d      	ldr	r1, [pc, #52]	; (8003204 <HAL_UART_Init+0xa8>)
 80031ce:	400a      	ands	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	212a      	movs	r1, #42	; 0x2a
 80031de:	438a      	bics	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 fd9b 	bl	8003d30 <UART_CheckIdleState>
 80031fa:	0003      	movs	r3, r0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}
 8003204:	ffffb7ff 	.word	0xffffb7ff

08003208 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2288      	movs	r2, #136	; 0x88
 800321c:	589b      	ldr	r3, [r3, r2]
 800321e:	2b20      	cmp	r3, #32
 8003220:	d000      	beq.n	8003224 <HAL_UART_Transmit+0x1c>
 8003222:	e090      	b.n	8003346 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_UART_Transmit+0x2a>
 800322a:	1dbb      	adds	r3, r7, #6
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e088      	b.n	8003348 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	015b      	lsls	r3, r3, #5
 800323e:	429a      	cmp	r2, r3
 8003240:	d109      	bne.n	8003256 <HAL_UART_Transmit+0x4e>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d001      	beq.n	8003256 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e078      	b.n	8003348 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2290      	movs	r2, #144	; 0x90
 800325a:	2100      	movs	r1, #0
 800325c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2288      	movs	r2, #136	; 0x88
 8003262:	2121      	movs	r1, #33	; 0x21
 8003264:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003266:	f7fd fe07 	bl	8000e78 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1dba      	adds	r2, r7, #6
 8003272:	2154      	movs	r1, #84	; 0x54
 8003274:	8812      	ldrh	r2, [r2, #0]
 8003276:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1dba      	adds	r2, r7, #6
 800327c:	2156      	movs	r1, #86	; 0x56
 800327e:	8812      	ldrh	r2, [r2, #0]
 8003280:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	015b      	lsls	r3, r3, #5
 800328a:	429a      	cmp	r2, r3
 800328c:	d108      	bne.n	80032a0 <HAL_UART_Transmit+0x98>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	e003      	b.n	80032a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032a8:	e030      	b.n	800330c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	0013      	movs	r3, r2
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	f000 fde4 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d005      	beq.n	80032cc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2288      	movs	r2, #136	; 0x88
 80032c4:	2120      	movs	r1, #32
 80032c6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03d      	b.n	8003348 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	001a      	movs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	05d2      	lsls	r2, r2, #23
 80032de:	0dd2      	lsrs	r2, r2, #23
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	3302      	adds	r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	e007      	b.n	80032fa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	3301      	adds	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2256      	movs	r2, #86	; 0x56
 80032fe:	5a9b      	ldrh	r3, [r3, r2]
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b299      	uxth	r1, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2256      	movs	r2, #86	; 0x56
 800330a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2256      	movs	r2, #86	; 0x56
 8003310:	5a9b      	ldrh	r3, [r3, r2]
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1c8      	bne.n	80032aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	0013      	movs	r3, r2
 8003322:	2200      	movs	r2, #0
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	f000 fdad 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2288      	movs	r2, #136	; 0x88
 8003332:	2120      	movs	r1, #32
 8003334:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e006      	b.n	8003348 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2288      	movs	r2, #136	; 0x88
 800333e:	2120      	movs	r1, #32
 8003340:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b008      	add	sp, #32
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	228c      	movs	r2, #140	; 0x8c
 8003364:	589b      	ldr	r3, [r3, r2]
 8003366:	2b20      	cmp	r3, #32
 8003368:	d000      	beq.n	800336c <HAL_UART_Receive+0x1c>
 800336a:	e0d0      	b.n	800350e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_UART_Receive+0x2a>
 8003372:	1dbb      	adds	r3, r7, #6
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e0c8      	b.n	8003510 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	429a      	cmp	r2, r3
 8003388:	d109      	bne.n	800339e <HAL_UART_Receive+0x4e>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2201      	movs	r2, #1
 8003396:	4013      	ands	r3, r2
 8003398:	d001      	beq.n	800339e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0b8      	b.n	8003510 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2290      	movs	r2, #144	; 0x90
 80033a2:	2100      	movs	r1, #0
 80033a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	228c      	movs	r2, #140	; 0x8c
 80033aa:	2122      	movs	r1, #34	; 0x22
 80033ac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b4:	f7fd fd60 	bl	8000e78 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1dba      	adds	r2, r7, #6
 80033c0:	215c      	movs	r1, #92	; 0x5c
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1dba      	adds	r2, r7, #6
 80033ca:	215e      	movs	r1, #94	; 0x5e
 80033cc:	8812      	ldrh	r2, [r2, #0]
 80033ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	015b      	lsls	r3, r3, #5
 80033d8:	429a      	cmp	r2, r3
 80033da:	d10d      	bne.n	80033f8 <HAL_UART_Receive+0xa8>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_UART_Receive+0x9e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2260      	movs	r2, #96	; 0x60
 80033e8:	494b      	ldr	r1, [pc, #300]	; (8003518 <HAL_UART_Receive+0x1c8>)
 80033ea:	5299      	strh	r1, [r3, r2]
 80033ec:	e02e      	b.n	800344c <HAL_UART_Receive+0xfc>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2260      	movs	r2, #96	; 0x60
 80033f2:	21ff      	movs	r1, #255	; 0xff
 80033f4:	5299      	strh	r1, [r3, r2]
 80033f6:	e029      	b.n	800344c <HAL_UART_Receive+0xfc>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_UART_Receive+0xcc>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_UART_Receive+0xc2>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2260      	movs	r2, #96	; 0x60
 800340c:	21ff      	movs	r1, #255	; 0xff
 800340e:	5299      	strh	r1, [r3, r2]
 8003410:	e01c      	b.n	800344c <HAL_UART_Receive+0xfc>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2260      	movs	r2, #96	; 0x60
 8003416:	217f      	movs	r1, #127	; 0x7f
 8003418:	5299      	strh	r1, [r3, r2]
 800341a:	e017      	b.n	800344c <HAL_UART_Receive+0xfc>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	055b      	lsls	r3, r3, #21
 8003424:	429a      	cmp	r2, r3
 8003426:	d10d      	bne.n	8003444 <HAL_UART_Receive+0xf4>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <HAL_UART_Receive+0xea>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2260      	movs	r2, #96	; 0x60
 8003434:	217f      	movs	r1, #127	; 0x7f
 8003436:	5299      	strh	r1, [r3, r2]
 8003438:	e008      	b.n	800344c <HAL_UART_Receive+0xfc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2260      	movs	r2, #96	; 0x60
 800343e:	213f      	movs	r1, #63	; 0x3f
 8003440:	5299      	strh	r1, [r3, r2]
 8003442:	e003      	b.n	800344c <HAL_UART_Receive+0xfc>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2260      	movs	r2, #96	; 0x60
 8003448:	2100      	movs	r1, #0
 800344a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800344c:	2312      	movs	r3, #18
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	2160      	movs	r1, #96	; 0x60
 8003454:	5a52      	ldrh	r2, [r2, r1]
 8003456:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	015b      	lsls	r3, r3, #5
 8003460:	429a      	cmp	r2, r3
 8003462:	d108      	bne.n	8003476 <HAL_UART_Receive+0x126>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e003      	b.n	800347e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800347e:	e03a      	b.n	80034f6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	2200      	movs	r2, #0
 800348c:	2120      	movs	r1, #32
 800348e:	f000 fcf9 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003492:	1e03      	subs	r3, r0, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	228c      	movs	r2, #140	; 0x8c
 800349a:	2120      	movs	r1, #32
 800349c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e036      	b.n	8003510 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10e      	bne.n	80034c6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2212      	movs	r2, #18
 80034b2:	18ba      	adds	r2, r7, r2
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	4013      	ands	r3, r2
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3302      	adds	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e00e      	b.n	80034e4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2212      	movs	r2, #18
 80034d0:	18ba      	adds	r2, r7, r2
 80034d2:	8812      	ldrh	r2, [r2, #0]
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	225e      	movs	r2, #94	; 0x5e
 80034e8:	5a9b      	ldrh	r3, [r3, r2]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b299      	uxth	r1, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	225e      	movs	r2, #94	; 0x5e
 80034f4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	225e      	movs	r2, #94	; 0x5e
 80034fa:	5a9b      	ldrh	r3, [r3, r2]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1be      	bne.n	8003480 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	228c      	movs	r2, #140	; 0x8c
 8003506:	2120      	movs	r1, #32
 8003508:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b008      	add	sp, #32
 8003516:	bd80      	pop	{r7, pc}
 8003518:	000001ff 	.word	0x000001ff

0800351c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b090      	sub	sp, #64	; 0x40
 8003520:	af00      	add	r7, sp, #0
 8003522:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003524:	231a      	movs	r3, #26
 8003526:	2220      	movs	r2, #32
 8003528:	189b      	adds	r3, r3, r2
 800352a:	19db      	adds	r3, r3, r7
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	431a      	orrs	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	431a      	orrs	r2, r3
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4313      	orrs	r3, r2
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4ac1      	ldr	r2, [pc, #772]	; (8003854 <UART_SetConfig+0x338>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355a:	430b      	orrs	r3, r1
 800355c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4abc      	ldr	r2, [pc, #752]	; (8003858 <UART_SetConfig+0x33c>)
 8003566:	4013      	ands	r3, r2
 8003568:	0018      	movs	r0, r3
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	0003      	movs	r3, r0
 8003574:	430b      	orrs	r3, r1
 8003576:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4ab6      	ldr	r2, [pc, #728]	; (800385c <UART_SetConfig+0x340>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <UART_SetConfig+0x80>
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4ab4      	ldr	r2, [pc, #720]	; (8003860 <UART_SetConfig+0x344>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003598:	4313      	orrs	r3, r2
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4ab0      	ldr	r2, [pc, #704]	; (8003864 <UART_SetConfig+0x348>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	220f      	movs	r2, #15
 80035ba:	4393      	bics	r3, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	0003      	movs	r3, r0
 80035c8:	430b      	orrs	r3, r1
 80035ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4aa5      	ldr	r2, [pc, #660]	; (8003868 <UART_SetConfig+0x34c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d131      	bne.n	800363a <UART_SetConfig+0x11e>
 80035d6:	4ba5      	ldr	r3, [pc, #660]	; (800386c <UART_SetConfig+0x350>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	2203      	movs	r2, #3
 80035dc:	4013      	ands	r3, r2
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d01d      	beq.n	800361e <UART_SetConfig+0x102>
 80035e2:	d823      	bhi.n	800362c <UART_SetConfig+0x110>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d00c      	beq.n	8003602 <UART_SetConfig+0xe6>
 80035e8:	d820      	bhi.n	800362c <UART_SetConfig+0x110>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <UART_SetConfig+0xd8>
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d00e      	beq.n	8003610 <UART_SetConfig+0xf4>
 80035f2:	e01b      	b.n	800362c <UART_SetConfig+0x110>
 80035f4:	231b      	movs	r3, #27
 80035f6:	2220      	movs	r2, #32
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e154      	b.n	80038ac <UART_SetConfig+0x390>
 8003602:	231b      	movs	r3, #27
 8003604:	2220      	movs	r2, #32
 8003606:	189b      	adds	r3, r3, r2
 8003608:	19db      	adds	r3, r3, r7
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e14d      	b.n	80038ac <UART_SetConfig+0x390>
 8003610:	231b      	movs	r3, #27
 8003612:	2220      	movs	r2, #32
 8003614:	189b      	adds	r3, r3, r2
 8003616:	19db      	adds	r3, r3, r7
 8003618:	2204      	movs	r2, #4
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e146      	b.n	80038ac <UART_SetConfig+0x390>
 800361e:	231b      	movs	r3, #27
 8003620:	2220      	movs	r2, #32
 8003622:	189b      	adds	r3, r3, r2
 8003624:	19db      	adds	r3, r3, r7
 8003626:	2208      	movs	r2, #8
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e13f      	b.n	80038ac <UART_SetConfig+0x390>
 800362c:	231b      	movs	r3, #27
 800362e:	2220      	movs	r2, #32
 8003630:	189b      	adds	r3, r3, r2
 8003632:	19db      	adds	r3, r3, r7
 8003634:	2210      	movs	r2, #16
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e138      	b.n	80038ac <UART_SetConfig+0x390>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a8c      	ldr	r2, [pc, #560]	; (8003870 <UART_SetConfig+0x354>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d131      	bne.n	80036a8 <UART_SetConfig+0x18c>
 8003644:	4b89      	ldr	r3, [pc, #548]	; (800386c <UART_SetConfig+0x350>)
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	220c      	movs	r2, #12
 800364a:	4013      	ands	r3, r2
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d01d      	beq.n	800368c <UART_SetConfig+0x170>
 8003650:	d823      	bhi.n	800369a <UART_SetConfig+0x17e>
 8003652:	2b08      	cmp	r3, #8
 8003654:	d00c      	beq.n	8003670 <UART_SetConfig+0x154>
 8003656:	d820      	bhi.n	800369a <UART_SetConfig+0x17e>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <UART_SetConfig+0x146>
 800365c:	2b04      	cmp	r3, #4
 800365e:	d00e      	beq.n	800367e <UART_SetConfig+0x162>
 8003660:	e01b      	b.n	800369a <UART_SetConfig+0x17e>
 8003662:	231b      	movs	r3, #27
 8003664:	2220      	movs	r2, #32
 8003666:	189b      	adds	r3, r3, r2
 8003668:	19db      	adds	r3, r3, r7
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e11d      	b.n	80038ac <UART_SetConfig+0x390>
 8003670:	231b      	movs	r3, #27
 8003672:	2220      	movs	r2, #32
 8003674:	189b      	adds	r3, r3, r2
 8003676:	19db      	adds	r3, r3, r7
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e116      	b.n	80038ac <UART_SetConfig+0x390>
 800367e:	231b      	movs	r3, #27
 8003680:	2220      	movs	r2, #32
 8003682:	189b      	adds	r3, r3, r2
 8003684:	19db      	adds	r3, r3, r7
 8003686:	2204      	movs	r2, #4
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e10f      	b.n	80038ac <UART_SetConfig+0x390>
 800368c:	231b      	movs	r3, #27
 800368e:	2220      	movs	r2, #32
 8003690:	189b      	adds	r3, r3, r2
 8003692:	19db      	adds	r3, r3, r7
 8003694:	2208      	movs	r2, #8
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e108      	b.n	80038ac <UART_SetConfig+0x390>
 800369a:	231b      	movs	r3, #27
 800369c:	2220      	movs	r2, #32
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	19db      	adds	r3, r3, r7
 80036a2:	2210      	movs	r2, #16
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e101      	b.n	80038ac <UART_SetConfig+0x390>
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a71      	ldr	r2, [pc, #452]	; (8003874 <UART_SetConfig+0x358>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d131      	bne.n	8003716 <UART_SetConfig+0x1fa>
 80036b2:	4b6e      	ldr	r3, [pc, #440]	; (800386c <UART_SetConfig+0x350>)
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	2230      	movs	r2, #48	; 0x30
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b30      	cmp	r3, #48	; 0x30
 80036bc:	d01d      	beq.n	80036fa <UART_SetConfig+0x1de>
 80036be:	d823      	bhi.n	8003708 <UART_SetConfig+0x1ec>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d00c      	beq.n	80036de <UART_SetConfig+0x1c2>
 80036c4:	d820      	bhi.n	8003708 <UART_SetConfig+0x1ec>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <UART_SetConfig+0x1b4>
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d00e      	beq.n	80036ec <UART_SetConfig+0x1d0>
 80036ce:	e01b      	b.n	8003708 <UART_SetConfig+0x1ec>
 80036d0:	231b      	movs	r3, #27
 80036d2:	2220      	movs	r2, #32
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e0e6      	b.n	80038ac <UART_SetConfig+0x390>
 80036de:	231b      	movs	r3, #27
 80036e0:	2220      	movs	r2, #32
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	19db      	adds	r3, r3, r7
 80036e6:	2202      	movs	r2, #2
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e0df      	b.n	80038ac <UART_SetConfig+0x390>
 80036ec:	231b      	movs	r3, #27
 80036ee:	2220      	movs	r2, #32
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	2204      	movs	r2, #4
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e0d8      	b.n	80038ac <UART_SetConfig+0x390>
 80036fa:	231b      	movs	r3, #27
 80036fc:	2220      	movs	r2, #32
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	19db      	adds	r3, r3, r7
 8003702:	2208      	movs	r2, #8
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e0d1      	b.n	80038ac <UART_SetConfig+0x390>
 8003708:	231b      	movs	r3, #27
 800370a:	2220      	movs	r2, #32
 800370c:	189b      	adds	r3, r3, r2
 800370e:	19db      	adds	r3, r3, r7
 8003710:	2210      	movs	r2, #16
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e0ca      	b.n	80038ac <UART_SetConfig+0x390>
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a57      	ldr	r2, [pc, #348]	; (8003878 <UART_SetConfig+0x35c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d106      	bne.n	800372e <UART_SetConfig+0x212>
 8003720:	231b      	movs	r3, #27
 8003722:	2220      	movs	r2, #32
 8003724:	189b      	adds	r3, r3, r2
 8003726:	19db      	adds	r3, r3, r7
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e0be      	b.n	80038ac <UART_SetConfig+0x390>
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a52      	ldr	r2, [pc, #328]	; (800387c <UART_SetConfig+0x360>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d106      	bne.n	8003746 <UART_SetConfig+0x22a>
 8003738:	231b      	movs	r3, #27
 800373a:	2220      	movs	r2, #32
 800373c:	189b      	adds	r3, r3, r2
 800373e:	19db      	adds	r3, r3, r7
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e0b2      	b.n	80038ac <UART_SetConfig+0x390>
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4d      	ldr	r2, [pc, #308]	; (8003880 <UART_SetConfig+0x364>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d106      	bne.n	800375e <UART_SetConfig+0x242>
 8003750:	231b      	movs	r3, #27
 8003752:	2220      	movs	r2, #32
 8003754:	189b      	adds	r3, r3, r2
 8003756:	19db      	adds	r3, r3, r7
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e0a6      	b.n	80038ac <UART_SetConfig+0x390>
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3e      	ldr	r2, [pc, #248]	; (800385c <UART_SetConfig+0x340>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d13e      	bne.n	80037e6 <UART_SetConfig+0x2ca>
 8003768:	4b40      	ldr	r3, [pc, #256]	; (800386c <UART_SetConfig+0x350>)
 800376a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800376c:	23c0      	movs	r3, #192	; 0xc0
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4013      	ands	r3, r2
 8003772:	22c0      	movs	r2, #192	; 0xc0
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	4293      	cmp	r3, r2
 8003778:	d027      	beq.n	80037ca <UART_SetConfig+0x2ae>
 800377a:	22c0      	movs	r2, #192	; 0xc0
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	4293      	cmp	r3, r2
 8003780:	d82a      	bhi.n	80037d8 <UART_SetConfig+0x2bc>
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	4293      	cmp	r3, r2
 8003788:	d011      	beq.n	80037ae <UART_SetConfig+0x292>
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	4293      	cmp	r3, r2
 8003790:	d822      	bhi.n	80037d8 <UART_SetConfig+0x2bc>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <UART_SetConfig+0x284>
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	00d2      	lsls	r2, r2, #3
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <UART_SetConfig+0x2a0>
 800379e:	e01b      	b.n	80037d8 <UART_SetConfig+0x2bc>
 80037a0:	231b      	movs	r3, #27
 80037a2:	2220      	movs	r2, #32
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	19db      	adds	r3, r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e07e      	b.n	80038ac <UART_SetConfig+0x390>
 80037ae:	231b      	movs	r3, #27
 80037b0:	2220      	movs	r2, #32
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	19db      	adds	r3, r3, r7
 80037b6:	2202      	movs	r2, #2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e077      	b.n	80038ac <UART_SetConfig+0x390>
 80037bc:	231b      	movs	r3, #27
 80037be:	2220      	movs	r2, #32
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	19db      	adds	r3, r3, r7
 80037c4:	2204      	movs	r2, #4
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e070      	b.n	80038ac <UART_SetConfig+0x390>
 80037ca:	231b      	movs	r3, #27
 80037cc:	2220      	movs	r2, #32
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	19db      	adds	r3, r3, r7
 80037d2:	2208      	movs	r2, #8
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e069      	b.n	80038ac <UART_SetConfig+0x390>
 80037d8:	231b      	movs	r3, #27
 80037da:	2220      	movs	r2, #32
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	19db      	adds	r3, r3, r7
 80037e0:	2210      	movs	r2, #16
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e062      	b.n	80038ac <UART_SetConfig+0x390>
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <UART_SetConfig+0x344>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d157      	bne.n	80038a0 <UART_SetConfig+0x384>
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <UART_SetConfig+0x350>)
 80037f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037f4:	23c0      	movs	r3, #192	; 0xc0
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4013      	ands	r3, r2
 80037fa:	22c0      	movs	r2, #192	; 0xc0
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <UART_SetConfig+0x368>
 8003802:	22c0      	movs	r2, #192	; 0xc0
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	4293      	cmp	r3, r2
 8003808:	d843      	bhi.n	8003892 <UART_SetConfig+0x376>
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	4293      	cmp	r3, r2
 8003810:	d011      	beq.n	8003836 <UART_SetConfig+0x31a>
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	0092      	lsls	r2, r2, #2
 8003816:	4293      	cmp	r3, r2
 8003818:	d83b      	bhi.n	8003892 <UART_SetConfig+0x376>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <UART_SetConfig+0x30c>
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	0052      	lsls	r2, r2, #1
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <UART_SetConfig+0x328>
 8003826:	e034      	b.n	8003892 <UART_SetConfig+0x376>
 8003828:	231b      	movs	r3, #27
 800382a:	2220      	movs	r2, #32
 800382c:	189b      	adds	r3, r3, r2
 800382e:	19db      	adds	r3, r3, r7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e03a      	b.n	80038ac <UART_SetConfig+0x390>
 8003836:	231b      	movs	r3, #27
 8003838:	2220      	movs	r2, #32
 800383a:	189b      	adds	r3, r3, r2
 800383c:	19db      	adds	r3, r3, r7
 800383e:	2202      	movs	r2, #2
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e033      	b.n	80038ac <UART_SetConfig+0x390>
 8003844:	231b      	movs	r3, #27
 8003846:	2220      	movs	r2, #32
 8003848:	189b      	adds	r3, r3, r2
 800384a:	19db      	adds	r3, r3, r7
 800384c:	2204      	movs	r2, #4
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e02c      	b.n	80038ac <UART_SetConfig+0x390>
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	cfff69f3 	.word	0xcfff69f3
 8003858:	ffffcfff 	.word	0xffffcfff
 800385c:	40008000 	.word	0x40008000
 8003860:	40008400 	.word	0x40008400
 8003864:	11fff4ff 	.word	0x11fff4ff
 8003868:	40013800 	.word	0x40013800
 800386c:	40021000 	.word	0x40021000
 8003870:	40004400 	.word	0x40004400
 8003874:	40004800 	.word	0x40004800
 8003878:	40004c00 	.word	0x40004c00
 800387c:	40005000 	.word	0x40005000
 8003880:	40013c00 	.word	0x40013c00
 8003884:	231b      	movs	r3, #27
 8003886:	2220      	movs	r2, #32
 8003888:	189b      	adds	r3, r3, r2
 800388a:	19db      	adds	r3, r3, r7
 800388c:	2208      	movs	r2, #8
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e00c      	b.n	80038ac <UART_SetConfig+0x390>
 8003892:	231b      	movs	r3, #27
 8003894:	2220      	movs	r2, #32
 8003896:	189b      	adds	r3, r3, r2
 8003898:	19db      	adds	r3, r3, r7
 800389a:	2210      	movs	r2, #16
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e005      	b.n	80038ac <UART_SetConfig+0x390>
 80038a0:	231b      	movs	r3, #27
 80038a2:	2220      	movs	r2, #32
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	19db      	adds	r3, r3, r7
 80038a8:	2210      	movs	r2, #16
 80038aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4ac1      	ldr	r2, [pc, #772]	; (8003bb8 <UART_SetConfig+0x69c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d005      	beq.n	80038c2 <UART_SetConfig+0x3a6>
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4ac0      	ldr	r2, [pc, #768]	; (8003bbc <UART_SetConfig+0x6a0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d000      	beq.n	80038c2 <UART_SetConfig+0x3a6>
 80038c0:	e093      	b.n	80039ea <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038c2:	231b      	movs	r3, #27
 80038c4:	2220      	movs	r2, #32
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	19db      	adds	r3, r3, r7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d015      	beq.n	80038fc <UART_SetConfig+0x3e0>
 80038d0:	dc18      	bgt.n	8003904 <UART_SetConfig+0x3e8>
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00d      	beq.n	80038f2 <UART_SetConfig+0x3d6>
 80038d6:	dc15      	bgt.n	8003904 <UART_SetConfig+0x3e8>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <UART_SetConfig+0x3c6>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d005      	beq.n	80038ec <UART_SetConfig+0x3d0>
 80038e0:	e010      	b.n	8003904 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7fe fa51 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 80038e6:	0003      	movs	r3, r0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ea:	e014      	b.n	8003916 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ec:	4bb4      	ldr	r3, [pc, #720]	; (8003bc0 <UART_SetConfig+0x6a4>)
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038f0:	e011      	b.n	8003916 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe f9bd 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 80038f6:	0003      	movs	r3, r0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038fa:	e00c      	b.n	8003916 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003902:	e008      	b.n	8003916 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003908:	231a      	movs	r3, #26
 800390a:	2220      	movs	r2, #32
 800390c:	189b      	adds	r3, r3, r2
 800390e:	19db      	adds	r3, r3, r7
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
        break;
 8003914:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d100      	bne.n	800391e <UART_SetConfig+0x402>
 800391c:	e135      	b.n	8003b8a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003922:	4ba8      	ldr	r3, [pc, #672]	; (8003bc4 <UART_SetConfig+0x6a8>)
 8003924:	0052      	lsls	r2, r2, #1
 8003926:	5ad3      	ldrh	r3, [r2, r3]
 8003928:	0019      	movs	r1, r3
 800392a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800392c:	f7fc fbea 	bl	8000104 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	0013      	movs	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	189b      	adds	r3, r3, r2
 800393e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003940:	429a      	cmp	r2, r3
 8003942:	d305      	bcc.n	8003950 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800394a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394c:	429a      	cmp	r2, r3
 800394e:	d906      	bls.n	800395e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003950:	231a      	movs	r3, #26
 8003952:	2220      	movs	r2, #32
 8003954:	189b      	adds	r3, r3, r2
 8003956:	19db      	adds	r3, r3, r7
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e044      	b.n	80039e8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396a:	4b96      	ldr	r3, [pc, #600]	; (8003bc4 <UART_SetConfig+0x6a8>)
 800396c:	0052      	lsls	r2, r2, #1
 800396e:	5ad3      	ldrh	r3, [r2, r3]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	69b8      	ldr	r0, [r7, #24]
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	f7fc fd37 	bl	80003f0 <__aeabi_uldivmod>
 8003982:	0002      	movs	r2, r0
 8003984:	000b      	movs	r3, r1
 8003986:	0e11      	lsrs	r1, r2, #24
 8003988:	021d      	lsls	r5, r3, #8
 800398a:	430d      	orrs	r5, r1
 800398c:	0214      	lsls	r4, r2, #8
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68b8      	ldr	r0, [r7, #8]
 800399c:	68f9      	ldr	r1, [r7, #12]
 800399e:	1900      	adds	r0, r0, r4
 80039a0:	4169      	adcs	r1, r5
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f7fc fd1e 	bl	80003f0 <__aeabi_uldivmod>
 80039b4:	0002      	movs	r2, r0
 80039b6:	000b      	movs	r3, r1
 80039b8:	0013      	movs	r3, r2
 80039ba:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039be:	23c0      	movs	r3, #192	; 0xc0
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d309      	bcc.n	80039da <UART_SetConfig+0x4be>
 80039c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	035b      	lsls	r3, r3, #13
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d204      	bcs.n	80039da <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	e006      	b.n	80039e8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80039da:	231a      	movs	r3, #26
 80039dc:	2220      	movs	r2, #32
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80039e6:	e0d0      	b.n	8003b8a <UART_SetConfig+0x66e>
 80039e8:	e0cf      	b.n	8003b8a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d000      	beq.n	80039f8 <UART_SetConfig+0x4dc>
 80039f6:	e070      	b.n	8003ada <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80039f8:	231b      	movs	r3, #27
 80039fa:	2220      	movs	r2, #32
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	19db      	adds	r3, r3, r7
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d015      	beq.n	8003a32 <UART_SetConfig+0x516>
 8003a06:	dc18      	bgt.n	8003a3a <UART_SetConfig+0x51e>
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00d      	beq.n	8003a28 <UART_SetConfig+0x50c>
 8003a0c:	dc15      	bgt.n	8003a3a <UART_SetConfig+0x51e>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <UART_SetConfig+0x4fc>
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d005      	beq.n	8003a22 <UART_SetConfig+0x506>
 8003a16:	e010      	b.n	8003a3a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7fe f9b6 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a20:	e014      	b.n	8003a4c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <UART_SetConfig+0x6a4>)
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a26:	e011      	b.n	8003a4c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a28:	f7fe f922 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a3e:	231a      	movs	r3, #26
 8003a40:	2220      	movs	r2, #32
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
        break;
 8003a4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d100      	bne.n	8003a54 <UART_SetConfig+0x538>
 8003a52:	e09a      	b.n	8003b8a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <UART_SetConfig+0x6a8>)
 8003a5a:	0052      	lsls	r2, r2, #1
 8003a5c:	5ad3      	ldrh	r3, [r2, r3]
 8003a5e:	0019      	movs	r1, r3
 8003a60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a62:	f7fc fb4f 	bl	8000104 <__udivsi3>
 8003a66:	0003      	movs	r3, r0
 8003a68:	005a      	lsls	r2, r3, #1
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	18d2      	adds	r2, r2, r3
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0019      	movs	r1, r3
 8003a78:	0010      	movs	r0, r2
 8003a7a:	f7fc fb43 	bl	8000104 <__udivsi3>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	2b0f      	cmp	r3, #15
 8003a86:	d921      	bls.n	8003acc <UART_SetConfig+0x5b0>
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	025b      	lsls	r3, r3, #9
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d21c      	bcs.n	8003acc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	200e      	movs	r0, #14
 8003a98:	2420      	movs	r4, #32
 8003a9a:	1903      	adds	r3, r0, r4
 8003a9c:	19db      	adds	r3, r3, r7
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2207      	movs	r2, #7
 8003aac:	4013      	ands	r3, r2
 8003aae:	b299      	uxth	r1, r3
 8003ab0:	1903      	adds	r3, r0, r4
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	1902      	adds	r2, r0, r4
 8003ab6:	19d2      	adds	r2, r2, r7
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	1902      	adds	r2, r0, r4
 8003ac4:	19d2      	adds	r2, r2, r7
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	e05e      	b.n	8003b8a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003acc:	231a      	movs	r3, #26
 8003ace:	2220      	movs	r2, #32
 8003ad0:	189b      	adds	r3, r3, r2
 8003ad2:	19db      	adds	r3, r3, r7
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	e057      	b.n	8003b8a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ada:	231b      	movs	r3, #27
 8003adc:	2220      	movs	r2, #32
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d015      	beq.n	8003b14 <UART_SetConfig+0x5f8>
 8003ae8:	dc18      	bgt.n	8003b1c <UART_SetConfig+0x600>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00d      	beq.n	8003b0a <UART_SetConfig+0x5ee>
 8003aee:	dc15      	bgt.n	8003b1c <UART_SetConfig+0x600>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <UART_SetConfig+0x5de>
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d005      	beq.n	8003b04 <UART_SetConfig+0x5e8>
 8003af8:	e010      	b.n	8003b1c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afa:	f7fe f945 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003afe:	0003      	movs	r3, r0
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b02:	e014      	b.n	8003b2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <UART_SetConfig+0x6a4>)
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b08:	e011      	b.n	8003b2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7fe f8b1 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b12:	e00c      	b.n	8003b2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b1a:	e008      	b.n	8003b2e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b20:	231a      	movs	r3, #26
 8003b22:	2220      	movs	r2, #32
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	19db      	adds	r3, r3, r7
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
        break;
 8003b2c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02a      	beq.n	8003b8a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <UART_SetConfig+0x6a8>)
 8003b3a:	0052      	lsls	r2, r2, #1
 8003b3c:	5ad3      	ldrh	r3, [r2, r3]
 8003b3e:	0019      	movs	r1, r3
 8003b40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b42:	f7fc fadf 	bl	8000104 <__udivsi3>
 8003b46:	0003      	movs	r3, r0
 8003b48:	001a      	movs	r2, r3
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	18d2      	adds	r2, r2, r3
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	0019      	movs	r1, r3
 8003b58:	0010      	movs	r0, r2
 8003b5a:	f7fc fad3 	bl	8000104 <__udivsi3>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d90a      	bls.n	8003b7e <UART_SetConfig+0x662>
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	025b      	lsls	r3, r3, #9
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d205      	bcs.n	8003b7e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
 8003b7c:	e005      	b.n	8003b8a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7e:	231a      	movs	r3, #26
 8003b80:	2220      	movs	r2, #32
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	19db      	adds	r3, r3, r7
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	226a      	movs	r2, #106	; 0x6a
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	2268      	movs	r2, #104	; 0x68
 8003b96:	2101      	movs	r1, #1
 8003b98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003ba6:	231a      	movs	r3, #26
 8003ba8:	2220      	movs	r2, #32
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	781b      	ldrb	r3, [r3, #0]
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b010      	add	sp, #64	; 0x40
 8003bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb8:	40008000 	.word	0x40008000
 8003bbc:	40008400 	.word	0x40008400
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	0800439c 	.word	0x0800439c

08003bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <UART_AdvFeatureConfig+0x144>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a43      	ldr	r2, [pc, #268]	; (8003d10 <UART_AdvFeatureConfig+0x148>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	2202      	movs	r2, #2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <UART_AdvFeatureConfig+0x14c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a34      	ldr	r2, [pc, #208]	; (8003d18 <UART_AdvFeatureConfig+0x150>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <UART_AdvFeatureConfig+0x154>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <UART_AdvFeatureConfig+0x158>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <UART_AdvFeatureConfig+0x15c>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	035b      	lsls	r3, r3, #13
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10b      	bne.n	8003ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <UART_AdvFeatureConfig+0x160>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <UART_AdvFeatureConfig+0x164>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	ffff7fff 	.word	0xffff7fff
 8003d10:	fffdffff 	.word	0xfffdffff
 8003d14:	fffeffff 	.word	0xfffeffff
 8003d18:	fffbffff 	.word	0xfffbffff
 8003d1c:	ffffefff 	.word	0xffffefff
 8003d20:	ffffdfff 	.word	0xffffdfff
 8003d24:	ffefffff 	.word	0xffefffff
 8003d28:	ff9fffff 	.word	0xff9fffff
 8003d2c:	fff7ffff 	.word	0xfff7ffff

08003d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b092      	sub	sp, #72	; 0x48
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2290      	movs	r2, #144	; 0x90
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d40:	f7fd f89a 	bl	8000e78 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2208      	movs	r2, #8
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d12d      	bne.n	8003db2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	0391      	lsls	r1, r2, #14
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4a47      	ldr	r2, [pc, #284]	; (8003e7c <UART_CheckIdleState+0x14c>)
 8003d60:	9200      	str	r2, [sp, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f000 f88e 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d022      	beq.n	8003db2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d76:	2301      	movs	r3, #1
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	f383 8810 	msr	PRIMASK, r3
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	438a      	bics	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2288      	movs	r2, #136	; 0x88
 8003da2:	2120      	movs	r1, #32
 8003da4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	; 0x84
 8003daa:	2100      	movs	r1, #0
 8003dac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e060      	b.n	8003e74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2204      	movs	r2, #4
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d146      	bne.n	8003e4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	03d1      	lsls	r1, r2, #15
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <UART_CheckIdleState+0x14c>)
 8003dca:	9200      	str	r2, [sp, #0]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f000 f859 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d03b      	beq.n	8003e4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	2301      	movs	r3, #1
 8003de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4922      	ldr	r1, [pc, #136]	; (8003e80 <UART_CheckIdleState+0x150>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e08:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
 8003e12:	2301      	movs	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	438a      	bics	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f383 8810 	msr	PRIMASK, r3
}
 8003e38:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	228c      	movs	r2, #140	; 0x8c
 8003e3e:	2120      	movs	r1, #32
 8003e40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2284      	movs	r2, #132	; 0x84
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e012      	b.n	8003e74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2288      	movs	r2, #136	; 0x88
 8003e52:	2120      	movs	r1, #32
 8003e54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	228c      	movs	r2, #140	; 0x8c
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2284      	movs	r2, #132	; 0x84
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b010      	add	sp, #64	; 0x40
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	01ffffff 	.word	0x01ffffff
 8003e80:	fffffedf 	.word	0xfffffedf

08003e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	e051      	b.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	d04e      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	f7fc ffec 	bl	8000e78 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e051      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d038      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d035      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d111      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 f83c 	bl	8003f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2290      	movs	r2, #144	; 0x90
 8003ef0:	2108      	movs	r1, #8
 8003ef2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2284      	movs	r2, #132	; 0x84
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e02c      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d112      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 f81f 	bl	8003f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2290      	movs	r2, #144	; 0x90
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2284      	movs	r2, #132	; 0x84
 8003f32:	2100      	movs	r1, #0
 8003f34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e00f      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	425a      	negs	r2, r3
 8003f4a:	4153      	adcs	r3, r2
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	001a      	movs	r2, r3
 8003f50:	1dfb      	adds	r3, r7, #7
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d09e      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08e      	sub	sp, #56	; 0x38
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f70:	617b      	str	r3, [r7, #20]
  return(result);
 8003f72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4926      	ldr	r1, [pc, #152]	; (8004028 <UART_EndRxTransfer+0xc4>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa2:	623b      	str	r3, [r7, #32]
  return(result);
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa8:	2301      	movs	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	491b      	ldr	r1, [pc, #108]	; (800402c <UART_EndRxTransfer+0xc8>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d118      	bne.n	800400a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2110      	movs	r1, #16
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	228c      	movs	r2, #140	; 0x8c
 800400e:	2120      	movs	r1, #32
 8004010:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b00e      	add	sp, #56	; 0x38
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	fffffedf 	.word	0xfffffedf
 800402c:	effffffe 	.word	0xeffffffe

08004030 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2284      	movs	r2, #132	; 0x84
 800403c:	5c9b      	ldrb	r3, [r3, r2]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_UARTEx_DisableFifoMode+0x16>
 8004042:	2302      	movs	r3, #2
 8004044:	e027      	b.n	8004096 <HAL_UARTEx_DisableFifoMode+0x66>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2284      	movs	r2, #132	; 0x84
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2288      	movs	r2, #136	; 0x88
 8004052:	2124      	movs	r1, #36	; 0x24
 8004054:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2101      	movs	r1, #1
 800406a:	438a      	bics	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2288      	movs	r2, #136	; 0x88
 8004088:	2120      	movs	r1, #32
 800408a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2284      	movs	r2, #132	; 0x84
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	dfffffff 	.word	0xdfffffff

080040a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2284      	movs	r2, #132	; 0x84
 80040b2:	5c9b      	ldrb	r3, [r3, r2]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e02e      	b.n	800411a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2284      	movs	r2, #132	; 0x84
 80040c0:	2101      	movs	r1, #1
 80040c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2288      	movs	r2, #136	; 0x88
 80040c8:	2124      	movs	r1, #36	; 0x24
 80040ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2101      	movs	r1, #1
 80040e0:	438a      	bics	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	08d9      	lsrs	r1, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f854 	bl	80041a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2288      	movs	r2, #136	; 0x88
 800410c:	2120      	movs	r1, #32
 800410e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2284      	movs	r2, #132	; 0x84
 8004114:	2100      	movs	r1, #0
 8004116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2284      	movs	r2, #132	; 0x84
 8004132:	5c9b      	ldrb	r3, [r3, r2]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004138:	2302      	movs	r3, #2
 800413a:	e02f      	b.n	800419c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2284      	movs	r2, #132	; 0x84
 8004140:	2101      	movs	r1, #1
 8004142:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2288      	movs	r2, #136	; 0x88
 8004148:	2124      	movs	r1, #36	; 0x24
 800414a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2101      	movs	r1, #1
 8004160:	438a      	bics	r2, r1
 8004162:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800416c:	4013      	ands	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f813 	bl	80041a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2288      	movs	r2, #136	; 0x88
 800418e:	2120      	movs	r1, #32
 8004190:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2284      	movs	r2, #132	; 0x84
 8004196:	2100      	movs	r1, #0
 8004198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b004      	add	sp, #16
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	f1ffffff 	.word	0xf1ffffff

080041a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	226a      	movs	r2, #106	; 0x6a
 80041bc:	2101      	movs	r1, #1
 80041be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2268      	movs	r2, #104	; 0x68
 80041c4:	2101      	movs	r1, #1
 80041c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041c8:	e043      	b.n	8004252 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041ca:	260f      	movs	r6, #15
 80041cc:	19bb      	adds	r3, r7, r6
 80041ce:	2208      	movs	r2, #8
 80041d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041d2:	200e      	movs	r0, #14
 80041d4:	183b      	adds	r3, r7, r0
 80041d6:	2208      	movs	r2, #8
 80041d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	0e5b      	lsrs	r3, r3, #25
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	240d      	movs	r4, #13
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	2107      	movs	r1, #7
 80041ea:	400a      	ands	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	0f5b      	lsrs	r3, r3, #29
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	250c      	movs	r5, #12
 80041fa:	197b      	adds	r3, r7, r5
 80041fc:	2107      	movs	r1, #7
 80041fe:	400a      	ands	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004202:	183b      	adds	r3, r7, r0
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	197a      	adds	r2, r7, r5
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	4914      	ldr	r1, [pc, #80]	; (800425c <UARTEx_SetNbDataToProcess+0xb4>)
 800420c:	5c8a      	ldrb	r2, [r1, r2]
 800420e:	435a      	muls	r2, r3
 8004210:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004212:	197b      	adds	r3, r7, r5
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <UARTEx_SetNbDataToProcess+0xb8>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800421a:	0019      	movs	r1, r3
 800421c:	f7fb fffc 	bl	8000218 <__divsi3>
 8004220:	0003      	movs	r3, r0
 8004222:	b299      	uxth	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	226a      	movs	r2, #106	; 0x6a
 8004228:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800422a:	19bb      	adds	r3, r7, r6
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	193a      	adds	r2, r7, r4
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	490a      	ldr	r1, [pc, #40]	; (800425c <UARTEx_SetNbDataToProcess+0xb4>)
 8004234:	5c8a      	ldrb	r2, [r1, r2]
 8004236:	435a      	muls	r2, r3
 8004238:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800423a:	193b      	adds	r3, r7, r4
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	4a08      	ldr	r2, [pc, #32]	; (8004260 <UARTEx_SetNbDataToProcess+0xb8>)
 8004240:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004242:	0019      	movs	r1, r3
 8004244:	f7fb ffe8 	bl	8000218 <__divsi3>
 8004248:	0003      	movs	r3, r0
 800424a:	b299      	uxth	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2268      	movs	r2, #104	; 0x68
 8004250:	5299      	strh	r1, [r3, r2]
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b005      	add	sp, #20
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	080043b4 	.word	0x080043b4
 8004260:	080043bc 	.word	0x080043bc

08004264 <memset>:
 8004264:	0003      	movs	r3, r0
 8004266:	1882      	adds	r2, r0, r2
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	7019      	strb	r1, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	2600      	movs	r6, #0
 8004278:	4c0c      	ldr	r4, [pc, #48]	; (80042ac <__libc_init_array+0x38>)
 800427a:	4d0d      	ldr	r5, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	2600      	movs	r6, #0
 8004286:	f000 f819 	bl	80042bc <_init>
 800428a:	4c0a      	ldr	r4, [pc, #40]	; (80042b4 <__libc_init_array+0x40>)
 800428c:	4d0a      	ldr	r5, [pc, #40]	; (80042b8 <__libc_init_array+0x44>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	00b3      	lsls	r3, r6, #2
 800429a:	58eb      	ldr	r3, [r5, r3]
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	00b3      	lsls	r3, r6, #2
 80042a4:	58eb      	ldr	r3, [r5, r3]
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	080043cc 	.word	0x080043cc
 80042b0:	080043cc 	.word	0x080043cc
 80042b4:	080043d0 	.word	0x080043d0
 80042b8:	080043cc 	.word	0x080043cc

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
