
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006078  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006444  08006444  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800644c  0800644c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  080064b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080064b0  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bad  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1a  00000000  00000000  00032c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00035890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c76  00000000  00000000  00036888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc7a  00000000  00000000  000374fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c2c  00000000  00000000  00055178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc176  00000000  00000000  00069da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d64  00000000  00000000  00125f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00129c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800611c 	.word	0x0800611c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800611c 	.word	0x0800611c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 fc00 	bl	8000c54 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 fbfb 	bl	8000c54 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__aeabi_dmul>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	4657      	mov	r7, sl
 80005d0:	464e      	mov	r6, r9
 80005d2:	b5e0      	push	{r5, r6, r7, lr}
 80005d4:	001f      	movs	r7, r3
 80005d6:	030b      	lsls	r3, r1, #12
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	469b      	mov	fp, r3
 80005dc:	004d      	lsls	r5, r1, #1
 80005de:	0fcb      	lsrs	r3, r1, #31
 80005e0:	0004      	movs	r4, r0
 80005e2:	4691      	mov	r9, r2
 80005e4:	4698      	mov	r8, r3
 80005e6:	b087      	sub	sp, #28
 80005e8:	0d6d      	lsrs	r5, r5, #21
 80005ea:	d100      	bne.n	80005ee <__aeabi_dmul+0x26>
 80005ec:	e1cd      	b.n	800098a <__aeabi_dmul+0x3c2>
 80005ee:	4bce      	ldr	r3, [pc, #824]	; (8000928 <__aeabi_dmul+0x360>)
 80005f0:	429d      	cmp	r5, r3
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x2e>
 80005f4:	e1e9      	b.n	80009ca <__aeabi_dmul+0x402>
 80005f6:	465a      	mov	r2, fp
 80005f8:	0f43      	lsrs	r3, r0, #29
 80005fa:	00d2      	lsls	r2, r2, #3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0412      	lsls	r2, r2, #16
 8000602:	431a      	orrs	r2, r3
 8000604:	00c3      	lsls	r3, r0, #3
 8000606:	469a      	mov	sl, r3
 8000608:	4bc8      	ldr	r3, [pc, #800]	; (800092c <__aeabi_dmul+0x364>)
 800060a:	4693      	mov	fp, r2
 800060c:	469c      	mov	ip, r3
 800060e:	2300      	movs	r3, #0
 8000610:	2600      	movs	r6, #0
 8000612:	4465      	add	r5, ip
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	033c      	lsls	r4, r7, #12
 8000618:	007b      	lsls	r3, r7, #1
 800061a:	4648      	mov	r0, r9
 800061c:	0b24      	lsrs	r4, r4, #12
 800061e:	0d5b      	lsrs	r3, r3, #21
 8000620:	0fff      	lsrs	r7, r7, #31
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_dmul+0x60>
 8000626:	e189      	b.n	800093c <__aeabi_dmul+0x374>
 8000628:	4abf      	ldr	r2, [pc, #764]	; (8000928 <__aeabi_dmul+0x360>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d019      	beq.n	8000662 <__aeabi_dmul+0x9a>
 800062e:	0f42      	lsrs	r2, r0, #29
 8000630:	00e4      	lsls	r4, r4, #3
 8000632:	4322      	orrs	r2, r4
 8000634:	2480      	movs	r4, #128	; 0x80
 8000636:	0424      	lsls	r4, r4, #16
 8000638:	4314      	orrs	r4, r2
 800063a:	4abc      	ldr	r2, [pc, #752]	; (800092c <__aeabi_dmul+0x364>)
 800063c:	2100      	movs	r1, #0
 800063e:	4694      	mov	ip, r2
 8000640:	4642      	mov	r2, r8
 8000642:	4463      	add	r3, ip
 8000644:	195b      	adds	r3, r3, r5
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b01      	ldr	r3, [sp, #4]
 800064a:	407a      	eors	r2, r7
 800064c:	3301      	adds	r3, #1
 800064e:	00c0      	lsls	r0, r0, #3
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	2e0a      	cmp	r6, #10
 8000656:	dd1c      	ble.n	8000692 <__aeabi_dmul+0xca>
 8000658:	003a      	movs	r2, r7
 800065a:	2e0b      	cmp	r6, #11
 800065c:	d05e      	beq.n	800071c <__aeabi_dmul+0x154>
 800065e:	4647      	mov	r7, r8
 8000660:	e056      	b.n	8000710 <__aeabi_dmul+0x148>
 8000662:	4649      	mov	r1, r9
 8000664:	4bb0      	ldr	r3, [pc, #704]	; (8000928 <__aeabi_dmul+0x360>)
 8000666:	4321      	orrs	r1, r4
 8000668:	18eb      	adds	r3, r5, r3
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2900      	cmp	r1, #0
 800066e:	d12a      	bne.n	80006c6 <__aeabi_dmul+0xfe>
 8000670:	2080      	movs	r0, #128	; 0x80
 8000672:	2202      	movs	r2, #2
 8000674:	0100      	lsls	r0, r0, #4
 8000676:	002b      	movs	r3, r5
 8000678:	4684      	mov	ip, r0
 800067a:	4316      	orrs	r6, r2
 800067c:	4642      	mov	r2, r8
 800067e:	4463      	add	r3, ip
 8000680:	407a      	eors	r2, r7
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2e0a      	cmp	r6, #10
 8000688:	dd00      	ble.n	800068c <__aeabi_dmul+0xc4>
 800068a:	e231      	b.n	8000af0 <__aeabi_dmul+0x528>
 800068c:	2000      	movs	r0, #0
 800068e:	2400      	movs	r4, #0
 8000690:	2102      	movs	r1, #2
 8000692:	2e02      	cmp	r6, #2
 8000694:	dc26      	bgt.n	80006e4 <__aeabi_dmul+0x11c>
 8000696:	3e01      	subs	r6, #1
 8000698:	2e01      	cmp	r6, #1
 800069a:	d852      	bhi.n	8000742 <__aeabi_dmul+0x17a>
 800069c:	2902      	cmp	r1, #2
 800069e:	d04c      	beq.n	800073a <__aeabi_dmul+0x172>
 80006a0:	2901      	cmp	r1, #1
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dmul+0xde>
 80006a4:	e118      	b.n	80008d8 <__aeabi_dmul+0x310>
 80006a6:	2300      	movs	r3, #0
 80006a8:	2400      	movs	r4, #0
 80006aa:	2500      	movs	r5, #0
 80006ac:	051b      	lsls	r3, r3, #20
 80006ae:	4323      	orrs	r3, r4
 80006b0:	07d2      	lsls	r2, r2, #31
 80006b2:	4313      	orrs	r3, r2
 80006b4:	0028      	movs	r0, r5
 80006b6:	0019      	movs	r1, r3
 80006b8:	b007      	add	sp, #28
 80006ba:	bcf0      	pop	{r4, r5, r6, r7}
 80006bc:	46bb      	mov	fp, r7
 80006be:	46b2      	mov	sl, r6
 80006c0:	46a9      	mov	r9, r5
 80006c2:	46a0      	mov	r8, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	2203      	movs	r2, #3
 80006ca:	0109      	lsls	r1, r1, #4
 80006cc:	002b      	movs	r3, r5
 80006ce:	468c      	mov	ip, r1
 80006d0:	4316      	orrs	r6, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	4463      	add	r3, ip
 80006d6:	407a      	eors	r2, r7
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	9302      	str	r3, [sp, #8]
 80006dc:	2e0a      	cmp	r6, #10
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dmul+0x11a>
 80006e0:	e228      	b.n	8000b34 <__aeabi_dmul+0x56c>
 80006e2:	2103      	movs	r1, #3
 80006e4:	2501      	movs	r5, #1
 80006e6:	40b5      	lsls	r5, r6
 80006e8:	46ac      	mov	ip, r5
 80006ea:	26a6      	movs	r6, #166	; 0xa6
 80006ec:	4663      	mov	r3, ip
 80006ee:	00f6      	lsls	r6, r6, #3
 80006f0:	4035      	ands	r5, r6
 80006f2:	4233      	tst	r3, r6
 80006f4:	d10b      	bne.n	800070e <__aeabi_dmul+0x146>
 80006f6:	2690      	movs	r6, #144	; 0x90
 80006f8:	00b6      	lsls	r6, r6, #2
 80006fa:	4233      	tst	r3, r6
 80006fc:	d118      	bne.n	8000730 <__aeabi_dmul+0x168>
 80006fe:	3eb9      	subs	r6, #185	; 0xb9
 8000700:	3eff      	subs	r6, #255	; 0xff
 8000702:	421e      	tst	r6, r3
 8000704:	d01d      	beq.n	8000742 <__aeabi_dmul+0x17a>
 8000706:	46a3      	mov	fp, r4
 8000708:	4682      	mov	sl, r0
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	e000      	b.n	8000710 <__aeabi_dmul+0x148>
 800070e:	0017      	movs	r7, r2
 8000710:	9900      	ldr	r1, [sp, #0]
 8000712:	003a      	movs	r2, r7
 8000714:	2902      	cmp	r1, #2
 8000716:	d010      	beq.n	800073a <__aeabi_dmul+0x172>
 8000718:	465c      	mov	r4, fp
 800071a:	4650      	mov	r0, sl
 800071c:	2903      	cmp	r1, #3
 800071e:	d1bf      	bne.n	80006a0 <__aeabi_dmul+0xd8>
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	031b      	lsls	r3, r3, #12
 8000724:	431c      	orrs	r4, r3
 8000726:	0324      	lsls	r4, r4, #12
 8000728:	0005      	movs	r5, r0
 800072a:	4b7f      	ldr	r3, [pc, #508]	; (8000928 <__aeabi_dmul+0x360>)
 800072c:	0b24      	lsrs	r4, r4, #12
 800072e:	e7bd      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000730:	2480      	movs	r4, #128	; 0x80
 8000732:	2200      	movs	r2, #0
 8000734:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <__aeabi_dmul+0x360>)
 8000736:	0324      	lsls	r4, r4, #12
 8000738:	e7b8      	b.n	80006ac <__aeabi_dmul+0xe4>
 800073a:	2400      	movs	r4, #0
 800073c:	2500      	movs	r5, #0
 800073e:	4b7a      	ldr	r3, [pc, #488]	; (8000928 <__aeabi_dmul+0x360>)
 8000740:	e7b4      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000742:	4653      	mov	r3, sl
 8000744:	041e      	lsls	r6, r3, #16
 8000746:	0c36      	lsrs	r6, r6, #16
 8000748:	0c1f      	lsrs	r7, r3, #16
 800074a:	0033      	movs	r3, r6
 800074c:	0c01      	lsrs	r1, r0, #16
 800074e:	0400      	lsls	r0, r0, #16
 8000750:	0c00      	lsrs	r0, r0, #16
 8000752:	4343      	muls	r3, r0
 8000754:	4698      	mov	r8, r3
 8000756:	0003      	movs	r3, r0
 8000758:	437b      	muls	r3, r7
 800075a:	4699      	mov	r9, r3
 800075c:	0033      	movs	r3, r6
 800075e:	434b      	muls	r3, r1
 8000760:	469c      	mov	ip, r3
 8000762:	4643      	mov	r3, r8
 8000764:	000d      	movs	r5, r1
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	469a      	mov	sl, r3
 800076a:	437d      	muls	r5, r7
 800076c:	44cc      	add	ip, r9
 800076e:	44d4      	add	ip, sl
 8000770:	9500      	str	r5, [sp, #0]
 8000772:	45e1      	cmp	r9, ip
 8000774:	d904      	bls.n	8000780 <__aeabi_dmul+0x1b8>
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	025b      	lsls	r3, r3, #9
 800077a:	4699      	mov	r9, r3
 800077c:	444d      	add	r5, r9
 800077e:	9500      	str	r5, [sp, #0]
 8000780:	4663      	mov	r3, ip
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	001d      	movs	r5, r3
 8000786:	4663      	mov	r3, ip
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	469c      	mov	ip, r3
 800078c:	4643      	mov	r3, r8
 800078e:	041b      	lsls	r3, r3, #16
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	4698      	mov	r8, r3
 8000794:	4663      	mov	r3, ip
 8000796:	4443      	add	r3, r8
 8000798:	9303      	str	r3, [sp, #12]
 800079a:	0c23      	lsrs	r3, r4, #16
 800079c:	4698      	mov	r8, r3
 800079e:	0033      	movs	r3, r6
 80007a0:	0424      	lsls	r4, r4, #16
 80007a2:	0c24      	lsrs	r4, r4, #16
 80007a4:	4363      	muls	r3, r4
 80007a6:	469c      	mov	ip, r3
 80007a8:	0023      	movs	r3, r4
 80007aa:	437b      	muls	r3, r7
 80007ac:	4699      	mov	r9, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	435e      	muls	r6, r3
 80007b2:	435f      	muls	r7, r3
 80007b4:	444e      	add	r6, r9
 80007b6:	4663      	mov	r3, ip
 80007b8:	46b2      	mov	sl, r6
 80007ba:	0c1e      	lsrs	r6, r3, #16
 80007bc:	4456      	add	r6, sl
 80007be:	45b1      	cmp	r9, r6
 80007c0:	d903      	bls.n	80007ca <__aeabi_dmul+0x202>
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	4699      	mov	r9, r3
 80007c8:	444f      	add	r7, r9
 80007ca:	0c33      	lsrs	r3, r6, #16
 80007cc:	4699      	mov	r9, r3
 80007ce:	003b      	movs	r3, r7
 80007d0:	444b      	add	r3, r9
 80007d2:	9305      	str	r3, [sp, #20]
 80007d4:	4663      	mov	r3, ip
 80007d6:	46ac      	mov	ip, r5
 80007d8:	041f      	lsls	r7, r3, #16
 80007da:	0c3f      	lsrs	r7, r7, #16
 80007dc:	0436      	lsls	r6, r6, #16
 80007de:	19f6      	adds	r6, r6, r7
 80007e0:	44b4      	add	ip, r6
 80007e2:	4663      	mov	r3, ip
 80007e4:	9304      	str	r3, [sp, #16]
 80007e6:	465b      	mov	r3, fp
 80007e8:	0c1b      	lsrs	r3, r3, #16
 80007ea:	469c      	mov	ip, r3
 80007ec:	465b      	mov	r3, fp
 80007ee:	041f      	lsls	r7, r3, #16
 80007f0:	0c3f      	lsrs	r7, r7, #16
 80007f2:	003b      	movs	r3, r7
 80007f4:	4343      	muls	r3, r0
 80007f6:	4699      	mov	r9, r3
 80007f8:	4663      	mov	r3, ip
 80007fa:	4343      	muls	r3, r0
 80007fc:	469a      	mov	sl, r3
 80007fe:	464b      	mov	r3, r9
 8000800:	4660      	mov	r0, ip
 8000802:	0c1b      	lsrs	r3, r3, #16
 8000804:	469b      	mov	fp, r3
 8000806:	4348      	muls	r0, r1
 8000808:	4379      	muls	r1, r7
 800080a:	4451      	add	r1, sl
 800080c:	4459      	add	r1, fp
 800080e:	458a      	cmp	sl, r1
 8000810:	d903      	bls.n	800081a <__aeabi_dmul+0x252>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	025b      	lsls	r3, r3, #9
 8000816:	469a      	mov	sl, r3
 8000818:	4450      	add	r0, sl
 800081a:	0c0b      	lsrs	r3, r1, #16
 800081c:	469a      	mov	sl, r3
 800081e:	464b      	mov	r3, r9
 8000820:	041b      	lsls	r3, r3, #16
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	4699      	mov	r9, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4363      	muls	r3, r4
 800082a:	0409      	lsls	r1, r1, #16
 800082c:	4645      	mov	r5, r8
 800082e:	4449      	add	r1, r9
 8000830:	4699      	mov	r9, r3
 8000832:	4663      	mov	r3, ip
 8000834:	435c      	muls	r4, r3
 8000836:	436b      	muls	r3, r5
 8000838:	469c      	mov	ip, r3
 800083a:	464b      	mov	r3, r9
 800083c:	0c1b      	lsrs	r3, r3, #16
 800083e:	4698      	mov	r8, r3
 8000840:	436f      	muls	r7, r5
 8000842:	193f      	adds	r7, r7, r4
 8000844:	4447      	add	r7, r8
 8000846:	4450      	add	r0, sl
 8000848:	42bc      	cmp	r4, r7
 800084a:	d903      	bls.n	8000854 <__aeabi_dmul+0x28c>
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	025b      	lsls	r3, r3, #9
 8000850:	4698      	mov	r8, r3
 8000852:	44c4      	add	ip, r8
 8000854:	9b04      	ldr	r3, [sp, #16]
 8000856:	9d00      	ldr	r5, [sp, #0]
 8000858:	4698      	mov	r8, r3
 800085a:	4445      	add	r5, r8
 800085c:	42b5      	cmp	r5, r6
 800085e:	41b6      	sbcs	r6, r6
 8000860:	4273      	negs	r3, r6
 8000862:	4698      	mov	r8, r3
 8000864:	464b      	mov	r3, r9
 8000866:	041e      	lsls	r6, r3, #16
 8000868:	9b05      	ldr	r3, [sp, #20]
 800086a:	043c      	lsls	r4, r7, #16
 800086c:	4699      	mov	r9, r3
 800086e:	0c36      	lsrs	r6, r6, #16
 8000870:	19a4      	adds	r4, r4, r6
 8000872:	444c      	add	r4, r9
 8000874:	46a1      	mov	r9, r4
 8000876:	4683      	mov	fp, r0
 8000878:	186e      	adds	r6, r5, r1
 800087a:	44c1      	add	r9, r8
 800087c:	428e      	cmp	r6, r1
 800087e:	4189      	sbcs	r1, r1
 8000880:	44cb      	add	fp, r9
 8000882:	465d      	mov	r5, fp
 8000884:	4249      	negs	r1, r1
 8000886:	186d      	adds	r5, r5, r1
 8000888:	429c      	cmp	r4, r3
 800088a:	41a4      	sbcs	r4, r4
 800088c:	45c1      	cmp	r9, r8
 800088e:	419b      	sbcs	r3, r3
 8000890:	4583      	cmp	fp, r0
 8000892:	4180      	sbcs	r0, r0
 8000894:	428d      	cmp	r5, r1
 8000896:	4189      	sbcs	r1, r1
 8000898:	425b      	negs	r3, r3
 800089a:	4264      	negs	r4, r4
 800089c:	431c      	orrs	r4, r3
 800089e:	4240      	negs	r0, r0
 80008a0:	9b03      	ldr	r3, [sp, #12]
 80008a2:	4249      	negs	r1, r1
 80008a4:	4301      	orrs	r1, r0
 80008a6:	0270      	lsls	r0, r6, #9
 80008a8:	0c3f      	lsrs	r7, r7, #16
 80008aa:	4318      	orrs	r0, r3
 80008ac:	19e4      	adds	r4, r4, r7
 80008ae:	1e47      	subs	r7, r0, #1
 80008b0:	41b8      	sbcs	r0, r7
 80008b2:	1864      	adds	r4, r4, r1
 80008b4:	4464      	add	r4, ip
 80008b6:	0df6      	lsrs	r6, r6, #23
 80008b8:	0261      	lsls	r1, r4, #9
 80008ba:	4330      	orrs	r0, r6
 80008bc:	0dec      	lsrs	r4, r5, #23
 80008be:	026e      	lsls	r6, r5, #9
 80008c0:	430c      	orrs	r4, r1
 80008c2:	4330      	orrs	r0, r6
 80008c4:	01c9      	lsls	r1, r1, #7
 80008c6:	d400      	bmi.n	80008ca <__aeabi_dmul+0x302>
 80008c8:	e0f1      	b.n	8000aae <__aeabi_dmul+0x4e6>
 80008ca:	2101      	movs	r1, #1
 80008cc:	0843      	lsrs	r3, r0, #1
 80008ce:	4001      	ands	r1, r0
 80008d0:	430b      	orrs	r3, r1
 80008d2:	07e0      	lsls	r0, r4, #31
 80008d4:	4318      	orrs	r0, r3
 80008d6:	0864      	lsrs	r4, r4, #1
 80008d8:	4915      	ldr	r1, [pc, #84]	; (8000930 <__aeabi_dmul+0x368>)
 80008da:	9b02      	ldr	r3, [sp, #8]
 80008dc:	468c      	mov	ip, r1
 80008de:	4463      	add	r3, ip
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_dmul+0x31e>
 80008e4:	e097      	b.n	8000a16 <__aeabi_dmul+0x44e>
 80008e6:	0741      	lsls	r1, r0, #29
 80008e8:	d009      	beq.n	80008fe <__aeabi_dmul+0x336>
 80008ea:	210f      	movs	r1, #15
 80008ec:	4001      	ands	r1, r0
 80008ee:	2904      	cmp	r1, #4
 80008f0:	d005      	beq.n	80008fe <__aeabi_dmul+0x336>
 80008f2:	1d01      	adds	r1, r0, #4
 80008f4:	4281      	cmp	r1, r0
 80008f6:	4180      	sbcs	r0, r0
 80008f8:	4240      	negs	r0, r0
 80008fa:	1824      	adds	r4, r4, r0
 80008fc:	0008      	movs	r0, r1
 80008fe:	01e1      	lsls	r1, r4, #7
 8000900:	d506      	bpl.n	8000910 <__aeabi_dmul+0x348>
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	00c9      	lsls	r1, r1, #3
 8000906:	468c      	mov	ip, r1
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <__aeabi_dmul+0x36c>)
 800090a:	401c      	ands	r4, r3
 800090c:	9b02      	ldr	r3, [sp, #8]
 800090e:	4463      	add	r3, ip
 8000910:	4909      	ldr	r1, [pc, #36]	; (8000938 <__aeabi_dmul+0x370>)
 8000912:	428b      	cmp	r3, r1
 8000914:	dd00      	ble.n	8000918 <__aeabi_dmul+0x350>
 8000916:	e710      	b.n	800073a <__aeabi_dmul+0x172>
 8000918:	0761      	lsls	r1, r4, #29
 800091a:	08c5      	lsrs	r5, r0, #3
 800091c:	0264      	lsls	r4, r4, #9
 800091e:	055b      	lsls	r3, r3, #21
 8000920:	430d      	orrs	r5, r1
 8000922:	0b24      	lsrs	r4, r4, #12
 8000924:	0d5b      	lsrs	r3, r3, #21
 8000926:	e6c1      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000928:	000007ff 	.word	0x000007ff
 800092c:	fffffc01 	.word	0xfffffc01
 8000930:	000003ff 	.word	0x000003ff
 8000934:	feffffff 	.word	0xfeffffff
 8000938:	000007fe 	.word	0x000007fe
 800093c:	464b      	mov	r3, r9
 800093e:	4323      	orrs	r3, r4
 8000940:	d059      	beq.n	80009f6 <__aeabi_dmul+0x42e>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_dmul+0x380>
 8000946:	e0a3      	b.n	8000a90 <__aeabi_dmul+0x4c8>
 8000948:	0020      	movs	r0, r4
 800094a:	f000 f965 	bl	8000c18 <__clzsi2>
 800094e:	0001      	movs	r1, r0
 8000950:	0003      	movs	r3, r0
 8000952:	390b      	subs	r1, #11
 8000954:	221d      	movs	r2, #29
 8000956:	1a52      	subs	r2, r2, r1
 8000958:	4649      	mov	r1, r9
 800095a:	0018      	movs	r0, r3
 800095c:	40d1      	lsrs	r1, r2
 800095e:	464a      	mov	r2, r9
 8000960:	3808      	subs	r0, #8
 8000962:	4082      	lsls	r2, r0
 8000964:	4084      	lsls	r4, r0
 8000966:	0010      	movs	r0, r2
 8000968:	430c      	orrs	r4, r1
 800096a:	4a74      	ldr	r2, [pc, #464]	; (8000b3c <__aeabi_dmul+0x574>)
 800096c:	1aeb      	subs	r3, r5, r3
 800096e:	4694      	mov	ip, r2
 8000970:	4642      	mov	r2, r8
 8000972:	4463      	add	r3, ip
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	9b01      	ldr	r3, [sp, #4]
 8000978:	407a      	eors	r2, r7
 800097a:	3301      	adds	r3, #1
 800097c:	2100      	movs	r1, #0
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2e0a      	cmp	r6, #10
 8000984:	dd00      	ble.n	8000988 <__aeabi_dmul+0x3c0>
 8000986:	e667      	b.n	8000658 <__aeabi_dmul+0x90>
 8000988:	e683      	b.n	8000692 <__aeabi_dmul+0xca>
 800098a:	465b      	mov	r3, fp
 800098c:	4303      	orrs	r3, r0
 800098e:	469a      	mov	sl, r3
 8000990:	d02a      	beq.n	80009e8 <__aeabi_dmul+0x420>
 8000992:	465b      	mov	r3, fp
 8000994:	2b00      	cmp	r3, #0
 8000996:	d06d      	beq.n	8000a74 <__aeabi_dmul+0x4ac>
 8000998:	4658      	mov	r0, fp
 800099a:	f000 f93d 	bl	8000c18 <__clzsi2>
 800099e:	0001      	movs	r1, r0
 80009a0:	0003      	movs	r3, r0
 80009a2:	390b      	subs	r1, #11
 80009a4:	221d      	movs	r2, #29
 80009a6:	1a52      	subs	r2, r2, r1
 80009a8:	0021      	movs	r1, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	465d      	mov	r5, fp
 80009ae:	40d1      	lsrs	r1, r2
 80009b0:	3808      	subs	r0, #8
 80009b2:	4085      	lsls	r5, r0
 80009b4:	000a      	movs	r2, r1
 80009b6:	4084      	lsls	r4, r0
 80009b8:	432a      	orrs	r2, r5
 80009ba:	4693      	mov	fp, r2
 80009bc:	46a2      	mov	sl, r4
 80009be:	4d5f      	ldr	r5, [pc, #380]	; (8000b3c <__aeabi_dmul+0x574>)
 80009c0:	2600      	movs	r6, #0
 80009c2:	1aed      	subs	r5, r5, r3
 80009c4:	2300      	movs	r3, #0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	e625      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009ca:	465b      	mov	r3, fp
 80009cc:	4303      	orrs	r3, r0
 80009ce:	469a      	mov	sl, r3
 80009d0:	d105      	bne.n	80009de <__aeabi_dmul+0x416>
 80009d2:	2300      	movs	r3, #0
 80009d4:	469b      	mov	fp, r3
 80009d6:	3302      	adds	r3, #2
 80009d8:	2608      	movs	r6, #8
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	e61b      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009de:	2303      	movs	r3, #3
 80009e0:	4682      	mov	sl, r0
 80009e2:	260c      	movs	r6, #12
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	e616      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009e8:	2300      	movs	r3, #0
 80009ea:	469b      	mov	fp, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	2604      	movs	r6, #4
 80009f0:	2500      	movs	r5, #0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	e60f      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009f6:	4642      	mov	r2, r8
 80009f8:	3301      	adds	r3, #1
 80009fa:	9501      	str	r5, [sp, #4]
 80009fc:	431e      	orrs	r6, r3
 80009fe:	9b01      	ldr	r3, [sp, #4]
 8000a00:	407a      	eors	r2, r7
 8000a02:	3301      	adds	r3, #1
 8000a04:	2400      	movs	r4, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2e0a      	cmp	r6, #10
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_dmul+0x44c>
 8000a12:	e621      	b.n	8000658 <__aeabi_dmul+0x90>
 8000a14:	e63d      	b.n	8000692 <__aeabi_dmul+0xca>
 8000a16:	2101      	movs	r1, #1
 8000a18:	1ac9      	subs	r1, r1, r3
 8000a1a:	2938      	cmp	r1, #56	; 0x38
 8000a1c:	dd00      	ble.n	8000a20 <__aeabi_dmul+0x458>
 8000a1e:	e642      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000a20:	291f      	cmp	r1, #31
 8000a22:	dd47      	ble.n	8000ab4 <__aeabi_dmul+0x4ec>
 8000a24:	261f      	movs	r6, #31
 8000a26:	0025      	movs	r5, r4
 8000a28:	4276      	negs	r6, r6
 8000a2a:	1af3      	subs	r3, r6, r3
 8000a2c:	40dd      	lsrs	r5, r3
 8000a2e:	002b      	movs	r3, r5
 8000a30:	2920      	cmp	r1, #32
 8000a32:	d005      	beq.n	8000a40 <__aeabi_dmul+0x478>
 8000a34:	4942      	ldr	r1, [pc, #264]	; (8000b40 <__aeabi_dmul+0x578>)
 8000a36:	9d02      	ldr	r5, [sp, #8]
 8000a38:	468c      	mov	ip, r1
 8000a3a:	4465      	add	r5, ip
 8000a3c:	40ac      	lsls	r4, r5
 8000a3e:	4320      	orrs	r0, r4
 8000a40:	1e41      	subs	r1, r0, #1
 8000a42:	4188      	sbcs	r0, r1
 8000a44:	4318      	orrs	r0, r3
 8000a46:	2307      	movs	r3, #7
 8000a48:	001d      	movs	r5, r3
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	4005      	ands	r5, r0
 8000a4e:	4203      	tst	r3, r0
 8000a50:	d04a      	beq.n	8000ae8 <__aeabi_dmul+0x520>
 8000a52:	230f      	movs	r3, #15
 8000a54:	2400      	movs	r4, #0
 8000a56:	4003      	ands	r3, r0
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d042      	beq.n	8000ae2 <__aeabi_dmul+0x51a>
 8000a5c:	1d03      	adds	r3, r0, #4
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	4240      	negs	r0, r0
 8000a64:	1824      	adds	r4, r4, r0
 8000a66:	0018      	movs	r0, r3
 8000a68:	0223      	lsls	r3, r4, #8
 8000a6a:	d53a      	bpl.n	8000ae2 <__aeabi_dmul+0x51a>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2400      	movs	r4, #0
 8000a70:	2500      	movs	r5, #0
 8000a72:	e61b      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000a74:	f000 f8d0 	bl	8000c18 <__clzsi2>
 8000a78:	0001      	movs	r1, r0
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	3115      	adds	r1, #21
 8000a7e:	3320      	adds	r3, #32
 8000a80:	291c      	cmp	r1, #28
 8000a82:	dd8f      	ble.n	80009a4 <__aeabi_dmul+0x3dc>
 8000a84:	3808      	subs	r0, #8
 8000a86:	2200      	movs	r2, #0
 8000a88:	4084      	lsls	r4, r0
 8000a8a:	4692      	mov	sl, r2
 8000a8c:	46a3      	mov	fp, r4
 8000a8e:	e796      	b.n	80009be <__aeabi_dmul+0x3f6>
 8000a90:	f000 f8c2 	bl	8000c18 <__clzsi2>
 8000a94:	0001      	movs	r1, r0
 8000a96:	0003      	movs	r3, r0
 8000a98:	3115      	adds	r1, #21
 8000a9a:	3320      	adds	r3, #32
 8000a9c:	291c      	cmp	r1, #28
 8000a9e:	dc00      	bgt.n	8000aa2 <__aeabi_dmul+0x4da>
 8000aa0:	e758      	b.n	8000954 <__aeabi_dmul+0x38c>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	464c      	mov	r4, r9
 8000aa6:	3a08      	subs	r2, #8
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	e75d      	b.n	800096a <__aeabi_dmul+0x3a2>
 8000aae:	9b01      	ldr	r3, [sp, #4]
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	e711      	b.n	80008d8 <__aeabi_dmul+0x310>
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <__aeabi_dmul+0x57c>)
 8000ab6:	0026      	movs	r6, r4
 8000ab8:	469c      	mov	ip, r3
 8000aba:	0003      	movs	r3, r0
 8000abc:	9d02      	ldr	r5, [sp, #8]
 8000abe:	40cb      	lsrs	r3, r1
 8000ac0:	4465      	add	r5, ip
 8000ac2:	40ae      	lsls	r6, r5
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	40ab      	lsls	r3, r5
 8000aca:	1e58      	subs	r0, r3, #1
 8000acc:	4183      	sbcs	r3, r0
 8000ace:	0030      	movs	r0, r6
 8000ad0:	4318      	orrs	r0, r3
 8000ad2:	40cc      	lsrs	r4, r1
 8000ad4:	0743      	lsls	r3, r0, #29
 8000ad6:	d0c7      	beq.n	8000a68 <__aeabi_dmul+0x4a0>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4003      	ands	r3, r0
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d1bd      	bne.n	8000a5c <__aeabi_dmul+0x494>
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dmul+0x4a0>
 8000ae2:	0765      	lsls	r5, r4, #29
 8000ae4:	0264      	lsls	r4, r4, #9
 8000ae6:	0b24      	lsrs	r4, r4, #12
 8000ae8:	08c0      	lsrs	r0, r0, #3
 8000aea:	2300      	movs	r3, #0
 8000aec:	4305      	orrs	r5, r0
 8000aee:	e5dd      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000af0:	2500      	movs	r5, #0
 8000af2:	2302      	movs	r3, #2
 8000af4:	2e0f      	cmp	r6, #15
 8000af6:	d10c      	bne.n	8000b12 <__aeabi_dmul+0x54a>
 8000af8:	2480      	movs	r4, #128	; 0x80
 8000afa:	465b      	mov	r3, fp
 8000afc:	0324      	lsls	r4, r4, #12
 8000afe:	4223      	tst	r3, r4
 8000b00:	d00e      	beq.n	8000b20 <__aeabi_dmul+0x558>
 8000b02:	4221      	tst	r1, r4
 8000b04:	d10c      	bne.n	8000b20 <__aeabi_dmul+0x558>
 8000b06:	430c      	orrs	r4, r1
 8000b08:	0324      	lsls	r4, r4, #12
 8000b0a:	003a      	movs	r2, r7
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <__aeabi_dmul+0x580>)
 8000b0e:	0b24      	lsrs	r4, r4, #12
 8000b10:	e5cc      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000b12:	2e0b      	cmp	r6, #11
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dmul+0x550>
 8000b16:	e5a2      	b.n	800065e <__aeabi_dmul+0x96>
 8000b18:	468b      	mov	fp, r1
 8000b1a:	46aa      	mov	sl, r5
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	e5f7      	b.n	8000710 <__aeabi_dmul+0x148>
 8000b20:	2480      	movs	r4, #128	; 0x80
 8000b22:	465b      	mov	r3, fp
 8000b24:	0324      	lsls	r4, r4, #12
 8000b26:	431c      	orrs	r4, r3
 8000b28:	0324      	lsls	r4, r4, #12
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	4655      	mov	r5, sl
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <__aeabi_dmul+0x580>)
 8000b30:	0b24      	lsrs	r4, r4, #12
 8000b32:	e5bb      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000b34:	464d      	mov	r5, r9
 8000b36:	0021      	movs	r1, r4
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e7db      	b.n	8000af4 <__aeabi_dmul+0x52c>
 8000b3c:	fffffc0d 	.word	0xfffffc0d
 8000b40:	0000043e 	.word	0x0000043e
 8000b44:	0000041e 	.word	0x0000041e
 8000b48:	000007ff 	.word	0x000007ff

08000b4c <__aeabi_d2iz>:
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	4c13      	ldr	r4, [pc, #76]	; (8000ba0 <__aeabi_d2iz+0x54>)
 8000b52:	0053      	lsls	r3, r2, #1
 8000b54:	0309      	lsls	r1, r1, #12
 8000b56:	0005      	movs	r5, r0
 8000b58:	0b09      	lsrs	r1, r1, #12
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	0d5b      	lsrs	r3, r3, #21
 8000b5e:	0fd2      	lsrs	r2, r2, #31
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	dd04      	ble.n	8000b6e <__aeabi_d2iz+0x22>
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <__aeabi_d2iz+0x58>)
 8000b66:	4283      	cmp	r3, r0
 8000b68:	dd02      	ble.n	8000b70 <__aeabi_d2iz+0x24>
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <__aeabi_d2iz+0x5c>)
 8000b6c:	18d0      	adds	r0, r2, r3
 8000b6e:	bd30      	pop	{r4, r5, pc}
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	0340      	lsls	r0, r0, #13
 8000b74:	4301      	orrs	r1, r0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <__aeabi_d2iz+0x60>)
 8000b78:	1ac0      	subs	r0, r0, r3
 8000b7a:	281f      	cmp	r0, #31
 8000b7c:	dd08      	ble.n	8000b90 <__aeabi_d2iz+0x44>
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <__aeabi_d2iz+0x64>)
 8000b80:	1ac3      	subs	r3, r0, r3
 8000b82:	40d9      	lsrs	r1, r3
 8000b84:	000b      	movs	r3, r1
 8000b86:	4258      	negs	r0, r3
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	d1f0      	bne.n	8000b6e <__aeabi_d2iz+0x22>
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	e7ee      	b.n	8000b6e <__aeabi_d2iz+0x22>
 8000b90:	4c08      	ldr	r4, [pc, #32]	; (8000bb4 <__aeabi_d2iz+0x68>)
 8000b92:	40c5      	lsrs	r5, r0
 8000b94:	46a4      	mov	ip, r4
 8000b96:	4463      	add	r3, ip
 8000b98:	4099      	lsls	r1, r3
 8000b9a:	000b      	movs	r3, r1
 8000b9c:	432b      	orrs	r3, r5
 8000b9e:	e7f2      	b.n	8000b86 <__aeabi_d2iz+0x3a>
 8000ba0:	000003fe 	.word	0x000003fe
 8000ba4:	0000041d 	.word	0x0000041d
 8000ba8:	7fffffff 	.word	0x7fffffff
 8000bac:	00000433 	.word	0x00000433
 8000bb0:	00000413 	.word	0x00000413
 8000bb4:	fffffbed 	.word	0xfffffbed

08000bb8 <__aeabi_i2d>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d016      	beq.n	8000bec <__aeabi_i2d+0x34>
 8000bbe:	17c3      	asrs	r3, r0, #31
 8000bc0:	18c5      	adds	r5, r0, r3
 8000bc2:	405d      	eors	r5, r3
 8000bc4:	0fc4      	lsrs	r4, r0, #31
 8000bc6:	0028      	movs	r0, r5
 8000bc8:	f000 f826 	bl	8000c18 <__clzsi2>
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <__aeabi_i2d+0x5c>)
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	280a      	cmp	r0, #10
 8000bd2:	dc16      	bgt.n	8000c02 <__aeabi_i2d+0x4a>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	002e      	movs	r6, r5
 8000bd8:	3215      	adds	r2, #21
 8000bda:	4096      	lsls	r6, r2
 8000bdc:	220b      	movs	r2, #11
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	40d5      	lsrs	r5, r2
 8000be2:	055b      	lsls	r3, r3, #21
 8000be4:	032d      	lsls	r5, r5, #12
 8000be6:	0b2d      	lsrs	r5, r5, #12
 8000be8:	0d5b      	lsrs	r3, r3, #21
 8000bea:	e003      	b.n	8000bf4 <__aeabi_i2d+0x3c>
 8000bec:	2400      	movs	r4, #0
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	051b      	lsls	r3, r3, #20
 8000bf6:	432b      	orrs	r3, r5
 8000bf8:	07e4      	lsls	r4, r4, #31
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	0030      	movs	r0, r6
 8000bfe:	0019      	movs	r1, r3
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
 8000c02:	380b      	subs	r0, #11
 8000c04:	4085      	lsls	r5, r0
 8000c06:	055b      	lsls	r3, r3, #21
 8000c08:	032d      	lsls	r5, r5, #12
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	0b2d      	lsrs	r5, r5, #12
 8000c0e:	0d5b      	lsrs	r3, r3, #21
 8000c10:	e7f0      	b.n	8000bf4 <__aeabi_i2d+0x3c>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	0000041e 	.word	0x0000041e

08000c18 <__clzsi2>:
 8000c18:	211c      	movs	r1, #28
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	4298      	cmp	r0, r3
 8000c20:	d301      	bcc.n	8000c26 <__clzsi2+0xe>
 8000c22:	0c00      	lsrs	r0, r0, #16
 8000c24:	3910      	subs	r1, #16
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d301      	bcc.n	8000c30 <__clzsi2+0x18>
 8000c2c:	0a00      	lsrs	r0, r0, #8
 8000c2e:	3908      	subs	r1, #8
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d301      	bcc.n	8000c3a <__clzsi2+0x22>
 8000c36:	0900      	lsrs	r0, r0, #4
 8000c38:	3904      	subs	r1, #4
 8000c3a:	a202      	add	r2, pc, #8	; (adr r2, 8000c44 <__clzsi2+0x2c>)
 8000c3c:	5c10      	ldrb	r0, [r2, r0]
 8000c3e:	1840      	adds	r0, r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	02020304 	.word	0x02020304
 8000c48:	01010101 	.word	0x01010101
	...

08000c54 <__clzdi2>:
 8000c54:	b510      	push	{r4, lr}
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d103      	bne.n	8000c62 <__clzdi2+0xe>
 8000c5a:	f7ff ffdd 	bl	8000c18 <__clzsi2>
 8000c5e:	3020      	adds	r0, #32
 8000c60:	e002      	b.n	8000c68 <__clzdi2+0x14>
 8000c62:	0008      	movs	r0, r1
 8000c64:	f7ff ffd8 	bl	8000c18 <__clzsi2>
 8000c68:	bd10      	pop	{r4, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)

08000c6c <MC74HCT595A_init>:
// Will point to our light patterns. A byte is an 8-bit BINARY variable to match the 8 lights
uint8_t * registerPatterns;

void clearRegisters();
numbers_t segments[10];
void MC74HCT595A_init(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
    registerPatterns = malloc(REGISTERS * sizeof(uint8_t));
 8000c72:	2002      	movs	r0, #2
 8000c74:	f005 f85e 	bl	8005d34 <malloc>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <MC74HCT595A_init+0x100>)
 8000c7e:	601a      	str	r2, [r3, #0]
    registerPatterns[0] = 5;
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <MC74HCT595A_init+0x100>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2205      	movs	r2, #5
 8000c86:	701a      	strb	r2, [r3, #0]
    registerPatterns[1] = 6;
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <MC74HCT595A_init+0x100>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	2206      	movs	r2, #6
 8000c90:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < 10; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	e061      	b.n	8000d5c <MC74HCT595A_init+0xf0>
        segments[i].number = i;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	b2d9      	uxtb	r1, r3
 8000c9c:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	54d1      	strb	r1, [r2, r3]
        switch (i){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b09      	cmp	r3, #9
 8000ca8:	d855      	bhi.n	8000d56 <MC74HCT595A_init+0xea>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	009a      	lsls	r2, r3, #2
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MC74HCT595A_init+0x108>)
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	469f      	mov	pc, r3
        case 0:
            segments[i].segments = 255 & (1 << SEG_G);
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	701a      	strb	r2, [r3, #0]
            break;
 8000cc4:	e047      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 1:
            segments[i].segments =255 & ~((1 << SEG_B) | (1 << SEG_C));
 8000cc6:	4a2a      	ldr	r2, [pc, #168]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	229f      	movs	r2, #159	; 0x9f
 8000cd2:	701a      	strb	r2, [r3, #0]
            break;
 8000cd4:	e03f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 2:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_E) | (1 << SEG_D));
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	2225      	movs	r2, #37	; 0x25
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e037      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 3:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D));
 8000ce6:	4a22      	ldr	r2, [pc, #136]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	220d      	movs	r2, #13
 8000cf2:	701a      	strb	r2, [r3, #0]
            break;
 8000cf4:	e02f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 4:
            segments[i].segments = 255 & ~ ((1 << SEG_F) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C));
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	2299      	movs	r2, #153	; 0x99
 8000d02:	701a      	strb	r2, [r3, #0]
            break;
 8000d04:	e027      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 5:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_F) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D));
 8000d06:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2249      	movs	r2, #73	; 0x49
 8000d12:	701a      	strb	r2, [r3, #0]
            break;
 8000d14:	e01f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 6:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_F) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D) | (1 << SEG_E));
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	2241      	movs	r2, #65	; 0x41
 8000d22:	701a      	strb	r2, [r3, #0]
            break;
 8000d24:	e017      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 7:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_C));
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	221f      	movs	r2, #31
 8000d32:	701a      	strb	r2, [r3, #0]
            break;
 8000d34:	e00f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 8:
            segments[i].segments = 0;
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
            break;
 8000d44:	e007      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 9:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D) | (1 << SEG_F));
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	2209      	movs	r2, #9
 8000d52:	701a      	strb	r2, [r3, #0]
            break;
 8000d54:	46c0      	nop			; (mov r8, r8)
    for(size_t i = 0; i < 10; i++){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d99a      	bls.n	8000c98 <MC74HCT595A_init+0x2c>
        }
    }
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000078 	.word	0x20000078
 8000d70:	2000007c 	.word	0x2000007c
 8000d74:	0800623c 	.word	0x0800623c

08000d78 <calc_segments>:
            else
                *pattern &= ~(1 << q); 
        }
    }
}
uint8_t calc_segments(uint8_t data){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
    uint8_t result = 0;
 8000d84:	200f      	movs	r0, #15
 8000d86:	183b      	adds	r3, r7, r0
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
    result = segments[data].segments;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	4906      	ldr	r1, [pc, #24]	; (8000dac <calc_segments+0x34>)
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	188a      	adds	r2, r1, r2
 8000d98:	3201      	adds	r2, #1
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
    return result;
 8000d9e:	183b      	adds	r3, r7, r0
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	2000007c 	.word	0x2000007c

08000db0 <MC74HCT595A_shiftOut>:
void MC74HCT595A_shiftOut(uint16_t data){
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	801a      	strh	r2, [r3, #0]
	//clock PA8
	//LATch PB5
	//data pa9
    uint8_t temp; 
    uint16_t segm = 0;
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	801a      	strh	r2, [r3, #0]
 
    uint16_t printofka;
    for(int i = 0;i<4;i++){
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e080      	b.n	8000ecc <MC74HCT595A_shiftOut+0x11c>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <MC74HCT595A_shiftOut+0x130>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2120      	movs	r1, #32
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 fb28 	bl	8002426 <HAL_GPIO_WritePin>
       temp  = calc_segments(data%10);
 8000dd6:	1dbb      	adds	r3, r7, #6
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	210a      	movs	r1, #10
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fa17 	bl	8000210 <__aeabi_uidivmod>
 8000de2:	000b      	movs	r3, r1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	250d      	movs	r5, #13
 8000dea:	197c      	adds	r4, r7, r5
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ffc3 	bl	8000d78 <calc_segments>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]
       data = data/10;
 8000df6:	1dbc      	adds	r4, r7, #6
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff f980 	bl	8000104 <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	8023      	strh	r3, [r4, #0]
		segm = (1 << SEG_4+i);
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	330c      	adds	r3, #12
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	240e      	movs	r4, #14
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	801a      	strh	r2, [r3, #0]
       printofka = segm | temp;
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	183b      	adds	r3, r7, r0
 8000e20:	193a      	adds	r2, r7, r4
 8000e22:	8812      	ldrh	r2, [r2, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	801a      	strh	r2, [r3, #0]
       printofka |= 0b1;
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	183a      	adds	r2, r7, r0
 8000e2c:	8812      	ldrh	r2, [r2, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	801a      	strh	r2, [r3, #0]
        for(int j = 0;j<16;j++){
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e03c      	b.n	8000eb4 <MC74HCT595A_shiftOut+0x104>
            if(printofka & (1 << j)){
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	411a      	asrs	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	2201      	movs	r2, #1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d018      	beq.n	8000e7e <MC74HCT595A_shiftOut+0xce>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	009a      	lsls	r2, r3, #2
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 fb02 	bl	8002460 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	005a      	lsls	r2, r3, #1
 8000e60:	23a0      	movs	r3, #160	; 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 fafa 	bl	8002460 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	009a      	lsls	r2, r3, #2
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 faf2 	bl	8002460 <HAL_GPIO_TogglePin>
 8000e7c:	e00f      	b.n	8000e9e <MC74HCT595A_shiftOut+0xee>
            }
            else{
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	005a      	lsls	r2, r3, #1
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fae9 	bl	8002460 <HAL_GPIO_TogglePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	0099      	lsls	r1, r3, #2
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2200      	movs	r2, #0
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 fac4 	bl	8002426 <HAL_GPIO_WritePin>
            }
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	005a      	lsls	r2, r3, #1
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 fad9 	bl	8002460 <HAL_GPIO_TogglePin>
        for(int j = 0;j<16;j++){
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	ddbf      	ble.n	8000e3a <MC74HCT595A_shiftOut+0x8a>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MC74HCT595A_shiftOut+0x130>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f001 fab0 	bl	8002426 <HAL_GPIO_WritePin>
    for(int i = 0;i<4;i++){
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	dc00      	bgt.n	8000ed4 <MC74HCT595A_shiftOut+0x124>
 8000ed2:	e77a      	b.n	8000dca <MC74HCT595A_shiftOut+0x1a>
	}
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b006      	add	sp, #24
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	50000400 	.word	0x50000400

08000ee4 <writeToRegisters>:

void writeToRegisters(uint16_t freq) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	1dbb      	adds	r3, r7, #6
 8000eee:	801a      	strh	r2, [r3, #0]

  // Lock the registers to ready them to be written
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <writeToRegisters+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fa95 	bl	8002426 <HAL_GPIO_WritePin>
    MC74HCT595A_shiftOut(freq);
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ff55 	bl	8000db0 <MC74HCT595A_shiftOut>
  // Go through each of our stored patterns and write them back to the registers in order
  
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <writeToRegisters+0x38>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 fa8a 	bl	8002426 <HAL_GPIO_WritePin>
  // Unlock the registers
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	50000400 	.word	0x50000400

08000f20 <buzzer_tone>:
 */
#include "buzzer.h"

uint32_t Channel = TIM_CHANNEL_2;
//TIM_HandleTypeDef htim1; // declare the timer handle
void buzzer_tone(int note, int duration){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	buzzer_freq(note);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 f8e1 	bl	80010f4 <buzzer_freq>
	HAL_Delay(duration);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 ff23 	bl	8001d80 <HAL_Delay>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <play_note>:

void play_note(int note, int duration){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	buzzer_tone(note,9*duration/10);
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	0013      	movs	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	210a      	movs	r1, #10
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff f95e 	bl	8000218 <__divsi3>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	001a      	movs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffdb 	bl	8000f20 <buzzer_tone>
	buzzer_stop();
 8000f6a:	f000 f8e7 	bl	800113c <buzzer_stop>
	HAL_Delay(duration/10);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	210a      	movs	r1, #10
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff f950 	bl	8000218 <__divsi3>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 ff00 	bl	8001d80 <HAL_Delay>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <calculate_duration>:
//2 je cela nota
//4 je dvojdoba
//8 je pol doba
//

int calculate_duration(int bpm, int note_type){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	int beat = 4*60000/bpm; // preco je tu 4?
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <calculate_duration+0x70>)
 8000f96:	f7ff f93f 	bl	8000218 <__divsi3>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	60bb      	str	r3, [r7, #8]
	int duration = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
	if (note_type > 0) {
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dd06      	ble.n	8000fb6 <calculate_duration+0x2e>
	      // regular note, just proceed
		duration = (beat) / note_type;
 8000fa8:	6839      	ldr	r1, [r7, #0]
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	f7ff f934 	bl	8000218 <__divsi3>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e01b      	b.n	8000fee <calculate_duration+0x66>
	    } else if (note_type < 0) {
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da18      	bge.n	8000fee <calculate_duration+0x66>
	      // dotted notes are represented with negative durations!!
	    	duration = (beat) / abs(note_type);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	17da      	asrs	r2, r3, #31
 8000fc0:	189b      	adds	r3, r3, r2
 8000fc2:	4053      	eors	r3, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f7ff f926 	bl	8000218 <__divsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
	    	duration *= 1.5; // increases the duration in half for dotted notes
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff fdf1 	bl	8000bb8 <__aeabi_i2d>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <calculate_duration+0x74>)
 8000fda:	f7ff faf5 	bl	80005c8 <__aeabi_dmul>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	f7ff fdb1 	bl	8000b4c <__aeabi_d2iz>
 8000fea:	0003      	movs	r3, r0
 8000fec:	60fb      	str	r3, [r7, #12]
	    }
	return duration;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b004      	add	sp, #16
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0003a980 	.word	0x0003a980
 8000ffc:	3ff80000 	.word	0x3ff80000

08001000 <play_scale>:

void play_scale(){
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af00      	add	r7, sp, #0
	int whole_note = 4;
 8001006:	2304      	movs	r3, #4
 8001008:	623b      	str	r3, [r7, #32]
	int scale[8]={NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5};
 800100a:	003b      	movs	r3, r7
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <play_scale+0x5c>)
 800100e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001010:	c313      	stmia	r3!, {r0, r1, r4}
 8001012:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001014:	c313      	stmia	r3!, {r0, r1, r4}
 8001016:	ca03      	ldmia	r2!, {r0, r1}
 8001018:	c303      	stmia	r3!, {r0, r1}
	for (int i=0;i<8;i++){
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
 800101e:	e010      	b.n	8001042 <play_scale+0x42>
		play_note(scale[i],calculate_duration(90, whole_note));
 8001020:	003b      	movs	r3, r7
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	58d4      	ldr	r4, [r2, r3]
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	0019      	movs	r1, r3
 800102c:	205a      	movs	r0, #90	; 0x5a
 800102e:	f7ff ffab 	bl	8000f88 <calculate_duration>
 8001032:	0003      	movs	r3, r0
 8001034:	0019      	movs	r1, r3
 8001036:	0020      	movs	r0, r4
 8001038:	f7ff ff83 	bl	8000f42 <play_note>
	for (int i=0;i<8;i++){
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3301      	adds	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddeb      	ble.n	8001020 <play_scale+0x20>
	}
	HAL_Delay(1000);
 8001048:	23fa      	movs	r3, #250	; 0xfa
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fe97 	bl	8001d80 <HAL_Delay>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b00b      	add	sp, #44	; 0x2c
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	08006134 	.word	0x08006134

08001060 <play_rick_roll>:

void play_rick_roll(){
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b0be      	sub	sp, #248	; 0xf8
 8001064:	af00      	add	r7, sp, #0
	int bpm = 115;
 8001066:	2373      	movs	r3, #115	; 0x73
 8001068:	22f0      	movs	r2, #240	; 0xf0
 800106a:	18ba      	adds	r2, r7, r2
 800106c:	6013      	str	r3, [r2, #0]
	int melody[] = {
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <play_rick_roll+0x8c>)
 8001072:	0010      	movs	r0, r2
 8001074:	0019      	movs	r1, r3
 8001076:	23e8      	movs	r3, #232	; 0xe8
 8001078:	001a      	movs	r2, r3
 800107a:	f004 fffb 	bl	8006074 <memcpy>
	  NOTE_E5,-8, NOTE_E5,-8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,-8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //18
	  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,8, NOTE_A4,8, NOTE_A4,8,
	  NOTE_E5,4, NOTE_D5,2,
	};

	int for_cycle_end = sizeof(melody) / sizeof(melody[0]);
 800107e:	233a      	movs	r3, #58	; 0x3a
 8001080:	22ec      	movs	r2, #236	; 0xec
 8001082:	18ba      	adds	r2, r7, r2
 8001084:	6013      	str	r3, [r2, #0]

	for (int this_note = 0;this_note< for_cycle_end; this_note+=2){
 8001086:	2300      	movs	r3, #0
 8001088:	22f4      	movs	r2, #244	; 0xf4
 800108a:	18ba      	adds	r2, r7, r2
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e01c      	b.n	80010ca <play_rick_roll+0x6a>
		play_note(melody[this_note], calculate_duration(bpm,melody[this_note+1]));
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	25f4      	movs	r5, #244	; 0xf4
 8001094:	197a      	adds	r2, r7, r5
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	58d4      	ldr	r4, [r2, r3]
 800109c:	197b      	adds	r3, r7, r5
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	58d2      	ldr	r2, [r2, r3]
 80010a8:	23f0      	movs	r3, #240	; 0xf0
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff69 	bl	8000f88 <calculate_duration>
 80010b6:	0003      	movs	r3, r0
 80010b8:	0019      	movs	r1, r3
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff ff41 	bl	8000f42 <play_note>
	for (int this_note = 0;this_note< for_cycle_end; this_note+=2){
 80010c0:	197b      	adds	r3, r7, r5
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	197a      	adds	r2, r7, r5
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	23f4      	movs	r3, #244	; 0xf4
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	23ec      	movs	r3, #236	; 0xec
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbda      	blt.n	8001090 <play_rick_roll+0x30>
	}

	HAL_Delay(3000);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <play_rick_roll+0x90>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fe4f 	bl	8001d80 <HAL_Delay>
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b03e      	add	sp, #248	; 0xf8
 80010e8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	08006154 	.word	0x08006154
 80010f0:	00000bb8 	.word	0x00000bb8

080010f4 <buzzer_freq>:
	TIM1->CCR2 = arr/amp;//1150;  //duty cycle
	TIM1->ARR = arr;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
void buzzer_freq(int freq) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	int arr = 1000000/freq;   //ARR diveder
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <buzzer_freq+0x3c>)
 8001100:	f7ff f88a 	bl	8000218 <__divsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	60fb      	str	r3, [r7, #12]
//	TIM1->CCR1 = 1000;
	TIM1->CCR2 = arr/2;//1150;  //duty cycle
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da00      	bge.n	8001110 <buzzer_freq+0x1c>
 800110e:	3301      	adds	r3, #1
 8001110:	105b      	asrs	r3, r3, #1
 8001112:	001a      	movs	r2, r3
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <buzzer_freq+0x40>)
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->ARR = arr;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <buzzer_freq+0x40>)
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <buzzer_freq+0x44>)
 8001120:	2104      	movs	r1, #4
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa02 	bl	800352c <HAL_TIM_PWM_Start>

}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}
 8001130:	000f4240 	.word	0x000f4240
 8001134:	40012c00 	.word	0x40012c00
 8001138:	20000094 	.word	0x20000094

0800113c <buzzer_stop>:
void buzzer_stop(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // Stop the PWM signal
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <buzzer_stop+0x14>)
 8001142:	2104      	movs	r1, #4
 8001144:	0018      	movs	r0, r3
 8001146:	f002 fae1 	bl	800370c <HAL_TIM_PWM_Stop>
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000094 	.word	0x20000094

08001154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b08b      	sub	sp, #44	; 0x2c
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2414      	movs	r4, #20
 800115c:	193b      	adds	r3, r7, r4
 800115e:	0018      	movs	r0, r3
 8001160:	2314      	movs	r3, #20
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f004 ff3f 	bl	8005fe8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <MX_GPIO_Init+0x150>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
 8001176:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	2204      	movs	r2, #4
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001188:	2120      	movs	r1, #32
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	2220      	movs	r2, #32
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <MX_GPIO_Init+0x150>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011aa:	2201      	movs	r2, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_8|DataOut_Pin, GPIO_PIN_RESET);
 80011ca:	23c8      	movs	r3, #200	; 0xc8
 80011cc:	0099      	lsls	r1, r3, #2
 80011ce:	23a0      	movs	r3, #160	; 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	2200      	movs	r2, #0
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 f926 	bl	8002426 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <MX_GPIO_Init+0x154>)
 80011dc:	2200      	movs	r2, #0
 80011de:	2120      	movs	r1, #32
 80011e0:	0018      	movs	r0, r3
 80011e2:	f001 f920 	bl	8002426 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2212      	movs	r2, #18
 80011ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2201      	movs	r2, #1
 80011f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	193a      	adds	r2, r7, r4
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f000 ff87 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001206:	193b      	adds	r3, r7, r4
 8001208:	2220      	movs	r2, #32
 800120a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	193b      	adds	r3, r7, r4
 800120e:	2201      	movs	r2, #1
 8001210:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2202      	movs	r2, #2
 800121c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800121e:	193a      	adds	r2, r7, r4
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f000 ff74 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2202      	movs	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2201      	movs	r2, #1
 800123c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 800123e:	193b      	adds	r3, r7, r4
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <MX_GPIO_Init+0x154>)
 8001242:	0019      	movs	r1, r3
 8001244:	0010      	movs	r0, r2
 8001246:	f000 ff65 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|DataOut_Pin;
 800124a:	0021      	movs	r1, r4
 800124c:	187b      	adds	r3, r7, r1
 800124e:	22c0      	movs	r2, #192	; 0xc0
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	000c      	movs	r4, r1
 8001256:	193b      	adds	r3, r7, r4
 8001258:	2201      	movs	r2, #1
 800125a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	193b      	adds	r3, r7, r4
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	193a      	adds	r2, r7, r4
 800126a:	23a0      	movs	r3, #160	; 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f000 ff4f 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001276:	0021      	movs	r1, r4
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2220      	movs	r2, #32
 800127c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2201      	movs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	187b      	adds	r3, r7, r1
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <MX_GPIO_Init+0x154>)
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f000 ff3c 	bl	8002114 <HAL_GPIO_Init>

}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b00b      	add	sp, #44	; 0x2c
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	50000400 	.word	0x50000400

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b0cb      	sub	sp, #300	; 0x12c
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fcdf 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f9ed 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff ff4b 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012be:	f000 fbf9 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012c2:	f000 fab7 	bl	8001834 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MC74HCT595A_init();
 80012c6:	f7ff fcd1 	bl	8000c6c <MC74HCT595A_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t Rx_data[150] = {0};  //  creating a buffer of 10 bytes
 80012ca:	237c      	movs	r3, #124	; 0x7c
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	3304      	adds	r3, #4
 80012d4:	2292      	movs	r2, #146	; 0x92
 80012d6:	2100      	movs	r1, #0
 80012d8:	0018      	movs	r0, r3
 80012da:	f004 fe85 	bl	8005fe8 <memset>
  uint16_t frequnecy_usart[20]={0};
 80012de:	2354      	movs	r3, #84	; 0x54
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	0018      	movs	r0, r3
 80012e4:	2328      	movs	r3, #40	; 0x28
 80012e6:	001a      	movs	r2, r3
 80012e8:	2100      	movs	r1, #0
 80012ea:	f004 fe7d 	bl	8005fe8 <memset>
  uint16_t type_usart[20]={0};
 80012ee:	232c      	movs	r3, #44	; 0x2c
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	0018      	movs	r0, r3
 80012f4:	2328      	movs	r3, #40	; 0x28
 80012f6:	001a      	movs	r2, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	f004 fe75 	bl	8005fe8 <memset>
  uint16_t bpm_usart[20]={0};
 80012fe:	4bc4      	ldr	r3, [pc, #784]	; (8001610 <main+0x364>)
 8001300:	2294      	movs	r2, #148	; 0x94
 8001302:	0052      	lsls	r2, r2, #1
 8001304:	189b      	adds	r3, r3, r2
 8001306:	19db      	adds	r3, r3, r7
 8001308:	0018      	movs	r0, r3
 800130a:	2328      	movs	r3, #40	; 0x28
 800130c:	001a      	movs	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	f004 fe6a 	bl	8005fe8 <memset>
    uint8_t tones = 0;
 8001314:	2328      	movs	r3, #40	; 0x28
 8001316:	33ff      	adds	r3, #255	; 0xff
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
    uint8_t commas = 0;
 800131e:	2393      	movs	r3, #147	; 0x93
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
  bool start_read = false;
 8001328:	2314      	movs	r3, #20
 800132a:	33ff      	adds	r3, #255	; 0xff
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
   buzzer_stop();
 8001332:	f7ff ff03 	bl	800113c <buzzer_stop>
    uint16_t freq = 0;
 8001336:	2392      	movs	r3, #146	; 0x92
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2200      	movs	r2, #0
 800133e:	801a      	strh	r2, [r3, #0]

    bool button_pressed = false;
 8001340:	2324      	movs	r3, #36	; 0x24
 8001342:	33ff      	adds	r3, #255	; 0xff
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    bool ricko_rool = false;
 800134a:	2391      	movs	r3, #145	; 0x91
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
    {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(freq>=10000)
 8001354:	2392      	movs	r3, #146	; 0x92
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4aad      	ldr	r2, [pc, #692]	; (8001614 <main+0x368>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d904      	bls.n	800136c <main+0xc0>
        writeToRegisters(9999);
 8001362:	4bac      	ldr	r3, [pc, #688]	; (8001614 <main+0x368>)
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff fdbd 	bl	8000ee4 <writeToRegisters>
 800136a:	e006      	b.n	800137a <main+0xce>
    else
        writeToRegisters(freq);
 800136c:	2392      	movs	r3, #146	; 0x92
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff fdb5 	bl	8000ee4 <writeToRegisters>
    if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){
 800137a:	23a0      	movs	r3, #160	; 0xa0
 800137c:	05db      	lsls	r3, r3, #23
 800137e:	2102      	movs	r1, #2
 8001380:	0018      	movs	r0, r3
 8001382:	f001 f833 	bl	80023ec <HAL_GPIO_ReadPin>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d121      	bne.n	80013ce <main+0x122>
        if(freq<10000 && !button_pressed)
 800138a:	2192      	movs	r1, #146	; 0x92
 800138c:	0049      	lsls	r1, r1, #1
 800138e:	187b      	adds	r3, r7, r1
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4aa0      	ldr	r2, [pc, #640]	; (8001614 <main+0x368>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d80d      	bhi.n	80013b4 <main+0x108>
 8001398:	2324      	movs	r3, #36	; 0x24
 800139a:	33ff      	adds	r3, #255	; 0xff
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4053      	eors	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <main+0x108>
            freq+=100;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	187a      	adds	r2, r7, r1
 80013ae:	8812      	ldrh	r2, [r2, #0]
 80013b0:	3264      	adds	r2, #100	; 0x64
 80013b2:	801a      	strh	r2, [r3, #0]
        button_pressed = true;
 80013b4:	2324      	movs	r3, #36	; 0x24
 80013b6:	33ff      	adds	r3, #255	; 0xff
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
         buzzer_freq(freq);
 80013be:	2392      	movs	r3, #146	; 0x92
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff fe94 	bl	80010f4 <buzzer_freq>
 80013cc:	e057      	b.n	800147e <main+0x1d2>
	}else if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)){
 80013ce:	23a0      	movs	r3, #160	; 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	2110      	movs	r1, #16
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 f809 	bl	80023ec <HAL_GPIO_ReadPin>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d120      	bne.n	8001420 <main+0x174>
        if(freq>0 && !button_pressed)
 80013de:	2192      	movs	r1, #146	; 0x92
 80013e0:	0049      	lsls	r1, r1, #1
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00d      	beq.n	8001406 <main+0x15a>
 80013ea:	2324      	movs	r3, #36	; 0x24
 80013ec:	33ff      	adds	r3, #255	; 0xff
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4053      	eors	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <main+0x15a>
            freq-=100;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	187a      	adds	r2, r7, r1
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	3a64      	subs	r2, #100	; 0x64
 8001404:	801a      	strh	r2, [r3, #0]
		button_pressed = true;
 8001406:	2324      	movs	r3, #36	; 0x24
 8001408:	33ff      	adds	r3, #255	; 0xff
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
         buzzer_freq(freq);
 8001410:	2392      	movs	r3, #146	; 0x92
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fe6b 	bl	80010f4 <buzzer_freq>
 800141e:	e02e      	b.n	800147e <main+0x1d2>
	}else if(!HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 8001420:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <main+0x36c>)
 8001422:	2102      	movs	r1, #2
 8001424:	0018      	movs	r0, r3
 8001426:	f000 ffe1 	bl	80023ec <HAL_GPIO_ReadPin>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d124      	bne.n	8001478 <main+0x1cc>
		if(!button_pressed){
 800142e:	2324      	movs	r3, #36	; 0x24
 8001430:	33ff      	adds	r3, #255	; 0xff
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	4053      	eors	r3, r2
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <main+0x1c0>
			if(!ricko_rool){
 8001440:	2491      	movs	r4, #145	; 0x91
 8001442:	0064      	lsls	r4, r4, #1
 8001444:	193b      	adds	r3, r7, r4
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4053      	eors	r3, r2
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <main+0x1b2>
				 play_scale();
 8001452:	f7ff fdd5 	bl	8001000 <play_scale>
				 ricko_rool = true;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e006      	b.n	800146c <main+0x1c0>
			}else{
				 play_rick_roll();
 800145e:	f7ff fdff 	bl	8001060 <play_rick_roll>
				 ricko_rool = false;
 8001462:	2391      	movs	r3, #145	; 0x91
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
			}
		}
		 button_pressed = true;
 800146c:	2324      	movs	r3, #36	; 0x24
 800146e:	33ff      	adds	r3, #255	; 0xff
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e002      	b.n	800147e <main+0x1d2>
	}else{
		buzzer_freq(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fe3b 	bl	80010f4 <buzzer_freq>
	}
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) && HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4) && HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	2102      	movs	r1, #2
 8001484:	0018      	movs	r0, r3
 8001486:	f000 ffb1 	bl	80023ec <HAL_GPIO_ReadPin>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d013      	beq.n	80014b6 <main+0x20a>
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	2110      	movs	r1, #16
 8001494:	0018      	movs	r0, r3
 8001496:	f000 ffa9 	bl	80023ec <HAL_GPIO_ReadPin>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d00b      	beq.n	80014b6 <main+0x20a>
 800149e:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <main+0x36c>)
 80014a0:	2102      	movs	r1, #2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 ffa2 	bl	80023ec <HAL_GPIO_ReadPin>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d004      	beq.n	80014b6 <main+0x20a>
        button_pressed = false;
 80014ac:	2324      	movs	r3, #36	; 0x24
 80014ae:	33ff      	adds	r3, #255	; 0xff
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive (&huart2, Rx_data, 1, 10);  // receive 4 bytes of data
 80014b6:	247c      	movs	r4, #124	; 0x7c
 80014b8:	1939      	adds	r1, r7, r4
 80014ba:	4858      	ldr	r0, [pc, #352]	; (800161c <main+0x370>)
 80014bc:	230a      	movs	r3, #10
 80014be:	2201      	movs	r2, #1
 80014c0:	f003 f90a 	bl	80046d8 <HAL_UART_Receive>
    if(Rx_data[0] == '$'){
 80014c4:	0022      	movs	r2, r4
 80014c6:	18bb      	adds	r3, r7, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b24      	cmp	r3, #36	; 0x24
 80014cc:	d000      	beq.n	80014d0 <main+0x224>
 80014ce:	e0db      	b.n	8001688 <main+0x3dc>
    	HAL_UART_Receive (&huart2, Rx_data, 150, 500);
 80014d0:	23fa      	movs	r3, #250	; 0xfa
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	0014      	movs	r4, r2
 80014d6:	18b9      	adds	r1, r7, r2
 80014d8:	4850      	ldr	r0, [pc, #320]	; (800161c <main+0x370>)
 80014da:	2296      	movs	r2, #150	; 0x96
 80014dc:	f003 f8fc 	bl	80046d8 <HAL_UART_Receive>
		if(Rx_data[0] == '&'){
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b26      	cmp	r3, #38	; 0x26
 80014e6:	d000      	beq.n	80014ea <main+0x23e>
 80014e8:	e0ce      	b.n	8001688 <main+0x3dc>
			char *temp;
			temp = malloc(3*sizeof(char));
 80014ea:	2003      	movs	r0, #3
 80014ec:	f004 fc22 	bl	8005d34 <malloc>
 80014f0:	0003      	movs	r3, r0
 80014f2:	228e      	movs	r2, #142	; 0x8e
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	18ba      	adds	r2, r7, r2
 80014f8:	6013      	str	r3, [r2, #0]
			int j = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	228c      	movs	r2, #140	; 0x8c
 80014fe:	0052      	lsls	r2, r2, #1
 8001500:	18ba      	adds	r2, r7, r2
 8001502:	6013      	str	r3, [r2, #0]
			for(size_t i = 1; i <100;i++){
 8001504:	2301      	movs	r3, #1
 8001506:	228a      	movs	r2, #138	; 0x8a
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	18ba      	adds	r2, r7, r2
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e0b4      	b.n	800167a <main+0x3ce>
				if(Rx_data[i] == '%'){
 8001510:	237c      	movs	r3, #124	; 0x7c
 8001512:	18fa      	adds	r2, r7, r3
 8001514:	238a      	movs	r3, #138	; 0x8a
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	18d3      	adds	r3, r2, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b25      	cmp	r3, #37	; 0x25
 8001522:	d10d      	bne.n	8001540 <main+0x294>
					free(temp);
 8001524:	238e      	movs	r3, #142	; 0x8e
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0018      	movs	r0, r3
 800152e:	f004 fc0b 	bl	8005d48 <free>
					while(1){
						buzzer_freq(frequnecy_usart[0]);
 8001532:	2354      	movs	r3, #84	; 0x54
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fddb 	bl	80010f4 <buzzer_freq>
 800153e:	e7f8      	b.n	8001532 <main+0x286>

					}
					break;
				}
				else if(Rx_data[i] == ','){
 8001540:	237c      	movs	r3, #124	; 0x7c
 8001542:	18fa      	adds	r2, r7, r3
 8001544:	238a      	movs	r3, #138	; 0x8a
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b2c      	cmp	r3, #44	; 0x2c
 8001552:	d165      	bne.n	8001620 <main+0x374>
					j=0;
 8001554:	2300      	movs	r3, #0
 8001556:	228c      	movs	r2, #140	; 0x8c
 8001558:	0052      	lsls	r2, r2, #1
 800155a:	18ba      	adds	r2, r7, r2
 800155c:	6013      	str	r3, [r2, #0]
					commas++;
 800155e:	2193      	movs	r1, #147	; 0x93
 8001560:	0049      	lsls	r1, r1, #1
 8001562:	187b      	adds	r3, r7, r1
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	187b      	adds	r3, r7, r1
 8001568:	3201      	adds	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
					switch (commas)
 800156c:	187b      	adds	r3, r7, r1
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d029      	beq.n	80015c8 <main+0x31c>
 8001574:	dc3d      	bgt.n	80015f2 <main+0x346>
 8001576:	2b01      	cmp	r3, #1
 8001578:	d002      	beq.n	8001580 <main+0x2d4>
 800157a:	2b02      	cmp	r3, #2
 800157c:	d012      	beq.n	80015a4 <main+0x2f8>
						break;
					case 3:
						bpm_usart[tones] = atoi(temp);
						break;
					default:
						break;
 800157e:	e038      	b.n	80015f2 <main+0x346>
						frequnecy_usart[tones] = atoi(temp);
 8001580:	238e      	movs	r3, #142	; 0x8e
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0018      	movs	r0, r3
 800158a:	f004 fbcd 	bl	8005d28 <atoi>
 800158e:	0001      	movs	r1, r0
 8001590:	2328      	movs	r3, #40	; 0x28
 8001592:	33ff      	adds	r3, #255	; 0xff
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	b289      	uxth	r1, r1
 800159a:	2354      	movs	r3, #84	; 0x54
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	0052      	lsls	r2, r2, #1
 80015a0:	52d1      	strh	r1, [r2, r3]
						break;
 80015a2:	e027      	b.n	80015f4 <main+0x348>
						type_usart[tones] = atoi(temp);
 80015a4:	238e      	movs	r3, #142	; 0x8e
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f004 fbbb 	bl	8005d28 <atoi>
 80015b2:	0001      	movs	r1, r0
 80015b4:	2328      	movs	r3, #40	; 0x28
 80015b6:	33ff      	adds	r3, #255	; 0xff
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	b289      	uxth	r1, r1
 80015be:	232c      	movs	r3, #44	; 0x2c
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	52d1      	strh	r1, [r2, r3]
						break;
 80015c6:	e015      	b.n	80015f4 <main+0x348>
						bpm_usart[tones] = atoi(temp);
 80015c8:	238e      	movs	r3, #142	; 0x8e
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f004 fba9 	bl	8005d28 <atoi>
 80015d6:	0001      	movs	r1, r0
 80015d8:	2328      	movs	r3, #40	; 0x28
 80015da:	33ff      	adds	r3, #255	; 0xff
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	b289      	uxth	r1, r1
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <main+0x364>)
 80015e4:	2094      	movs	r0, #148	; 0x94
 80015e6:	0040      	lsls	r0, r0, #1
 80015e8:	181b      	adds	r3, r3, r0
 80015ea:	19db      	adds	r3, r3, r7
 80015ec:	0052      	lsls	r2, r2, #1
 80015ee:	52d1      	strh	r1, [r2, r3]
						break;
 80015f0:	e000      	b.n	80015f4 <main+0x348>
						break;
 80015f2:	46c0      	nop			; (mov r8, r8)
					}
					free(temp);
 80015f4:	248e      	movs	r4, #142	; 0x8e
 80015f6:	0064      	lsls	r4, r4, #1
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f004 fba3 	bl	8005d48 <free>
					temp = malloc(3*sizeof(char));
 8001602:	2003      	movs	r0, #3
 8001604:	f004 fb96 	bl	8005d34 <malloc>
 8001608:	0003      	movs	r3, r0
 800160a:	193a      	adds	r2, r7, r4
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <main+0x3a0>
 8001610:	fffffedc 	.word	0xfffffedc
 8001614:	0000270f 	.word	0x0000270f
 8001618:	50000400 	.word	0x50000400
 800161c:	200000e0 	.word	0x200000e0
				}else{
					temp[j++] = Rx_data[i];
 8001620:	218c      	movs	r1, #140	; 0x8c
 8001622:	0049      	lsls	r1, r1, #1
 8001624:	187b      	adds	r3, r7, r1
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	1879      	adds	r1, r7, r1
 800162c:	600a      	str	r2, [r1, #0]
 800162e:	001a      	movs	r2, r3
 8001630:	238e      	movs	r3, #142	; 0x8e
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	189b      	adds	r3, r3, r2
 800163a:	227c      	movs	r2, #124	; 0x7c
 800163c:	18b9      	adds	r1, r7, r2
 800163e:	228a      	movs	r2, #138	; 0x8a
 8001640:	0052      	lsls	r2, r2, #1
 8001642:	18ba      	adds	r2, r7, r2
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	188a      	adds	r2, r1, r2
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	701a      	strb	r2, [r3, #0]
				}
				if(commas == 3){
 800164c:	2293      	movs	r2, #147	; 0x93
 800164e:	0052      	lsls	r2, r2, #1
 8001650:	18bb      	adds	r3, r7, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d109      	bne.n	800166c <main+0x3c0>
					commas = 0;
 8001658:	18bb      	adds	r3, r7, r2
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
					tones++;
 800165e:	2128      	movs	r1, #40	; 0x28
 8001660:	31ff      	adds	r1, #255	; 0xff
 8001662:	187b      	adds	r3, r7, r1
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	187b      	adds	r3, r7, r1
 8001668:	3201      	adds	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
			for(size_t i = 1; i <100;i++){
 800166c:	228a      	movs	r2, #138	; 0x8a
 800166e:	0052      	lsls	r2, r2, #1
 8001670:	18bb      	adds	r3, r7, r2
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	18ba      	adds	r2, r7, r2
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	238a      	movs	r3, #138	; 0x8a
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b63      	cmp	r3, #99	; 0x63
 8001684:	d800      	bhi.n	8001688 <main+0x3dc>
 8001686:	e743      	b.n	8001510 <main+0x264>
			}
		}

    }
//    	HAL_UART_Transmit(&huart2,Rx_data,sizeof(Rx_data),10);// Sending in normal mode
   Rx_data[0] = 0;
 8001688:	237c      	movs	r3, #124	; 0x7c
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    if(freq>=10000)
 8001690:	e660      	b.n	8001354 <main+0xa8>
 8001692:	46c0      	nop			; (mov r8, r8)

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b095      	sub	sp, #84	; 0x54
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	2414      	movs	r4, #20
 800169c:	193b      	adds	r3, r7, r4
 800169e:	0018      	movs	r0, r3
 80016a0:	233c      	movs	r3, #60	; 0x3c
 80016a2:	001a      	movs	r2, r3
 80016a4:	2100      	movs	r1, #0
 80016a6:	f004 fc9f 	bl	8005fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	0018      	movs	r0, r3
 80016ae:	2310      	movs	r3, #16
 80016b0:	001a      	movs	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	f004 fc98 	bl	8005fe8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 feeb 	bl	8002498 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2202      	movs	r2, #2
 80016c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	0052      	lsls	r2, r2, #1
 80016ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 ff23 	bl	8002530 <HAL_RCC_OscConfig>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80016ee:	f000 f819 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2100      	movs	r1, #0
 800170e:	0018      	movs	r0, r3
 8001710:	f001 fa6e 	bl	8002bf0 <HAL_RCC_ClockConfig>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001718:	f000 f804 	bl	8001724 <Error_Handler>
  }
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b015      	add	sp, #84	; 0x54
 8001722:	bd90      	pop	{r4, r7, pc}

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x44>)
 8001738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_MspInit+0x44>)
 800173c:	2101      	movs	r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x44>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x44>)
 8001750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_MspInit+0x44>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0549      	lsls	r1, r1, #21
 8001758:	430a      	orrs	r2, r1
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_MspInit+0x44>)
 800175e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	40021000 	.word	0x40021000

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 fad4 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <USART2_LPUART2_IRQHandler+0x10>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f003 f878 	bl	80048a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */
  while(1){}
 80017b4:	e7fe      	b.n	80017b4 <USART2_LPUART2_IRQHandler+0xc>
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	200000e0 	.word	0x200000e0

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f004 fc16 	bl	800601c <__errno>
 80017f0:	0003      	movs	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	425b      	negs	r3, r3
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	18d2      	adds	r2, r2, r3
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b006      	add	sp, #24
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20024000 	.word	0x20024000
 800181c:	00000400 	.word	0x00000400
 8001820:	20000090 	.word	0x20000090
 8001824:	200002c0 	.word	0x200002c0

08001828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b09c      	sub	sp, #112	; 0x70
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	2360      	movs	r3, #96	; 0x60
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	0018      	movs	r0, r3
 8001840:	2310      	movs	r3, #16
 8001842:	001a      	movs	r2, r3
 8001844:	2100      	movs	r1, #0
 8001846:	f004 fbcf 	bl	8005fe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184a:	2354      	movs	r3, #84	; 0x54
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	0018      	movs	r0, r3
 8001850:	230c      	movs	r3, #12
 8001852:	001a      	movs	r2, r3
 8001854:	2100      	movs	r1, #0
 8001856:	f004 fbc7 	bl	8005fe8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	2338      	movs	r3, #56	; 0x38
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	0018      	movs	r0, r3
 8001860:	231c      	movs	r3, #28
 8001862:	001a      	movs	r2, r3
 8001864:	2100      	movs	r1, #0
 8001866:	f004 fbbf 	bl	8005fe8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	0018      	movs	r0, r3
 800186e:	2334      	movs	r3, #52	; 0x34
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f004 fbb8 	bl	8005fe8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <MX_TIM1_Init+0x18c>)
 800187a:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <MX_TIM1_Init+0x190>)
 800187c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800187e:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <MX_TIM1_Init+0x18c>)
 8001880:	220f      	movs	r2, #15
 8001882:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <MX_TIM1_Init+0x18c>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <MX_TIM1_Init+0x18c>)
 800188c:	4a4e      	ldr	r2, [pc, #312]	; (80019c8 <MX_TIM1_Init+0x194>)
 800188e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <MX_TIM1_Init+0x18c>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <MX_TIM1_Init+0x18c>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <MX_TIM1_Init+0x18c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <MX_TIM1_Init+0x18c>)
 80018a4:	0018      	movs	r0, r3
 80018a6:	f001 fd89 	bl	80033bc <HAL_TIM_Base_Init>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80018ae:	f7ff ff39 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	2160      	movs	r1, #96	; 0x60
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	0152      	lsls	r2, r2, #5
 80018ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018bc:	187a      	adds	r2, r7, r1
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <MX_TIM1_Init+0x18c>)
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f002 f8ae 	bl	8003a24 <HAL_TIM_ConfigClockSource>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80018cc:	f7ff ff2a 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018d0:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <MX_TIM1_Init+0x18c>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fdca 	bl	800346c <HAL_TIM_PWM_Init>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80018dc:	f7ff ff22 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2154      	movs	r1, #84	; 0x54
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f4:	187a      	adds	r2, r7, r1
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <MX_TIM1_Init+0x18c>)
 80018f8:	0011      	movs	r1, r2
 80018fa:	0018      	movs	r0, r3
 80018fc:	f002 fd84 	bl	8004408 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001904:	f7ff ff0e 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001908:	2138      	movs	r1, #56	; 0x38
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2260      	movs	r2, #96	; 0x60
 800190e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001934:	1879      	adds	r1, r7, r1
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_TIM1_Init+0x18c>)
 8001938:	2204      	movs	r2, #4
 800193a:	0018      	movs	r0, r3
 800193c:	f001 ff72 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001944:	f7ff feee 	bl	8001724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0192      	lsls	r2, r2, #6
 800196c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	0492      	lsls	r2, r2, #18
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199a:	1d3a      	adds	r2, r7, #4
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_TIM1_Init+0x18c>)
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 fda7 	bl	80044f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80019aa:	f7ff febb 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <MX_TIM1_Init+0x18c>)
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f841 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b01c      	add	sp, #112	; 0x70
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	20000094 	.word	0x20000094
 80019c4:	40012c00 	.word	0x40012c00
 80019c8:	00002710 	.word	0x00002710

080019cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b097      	sub	sp, #92	; 0x5c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	240c      	movs	r4, #12
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	0018      	movs	r0, r3
 80019da:	234c      	movs	r3, #76	; 0x4c
 80019dc:	001a      	movs	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	f004 fb02 	bl	8005fe8 <memset>
  if(tim_baseHandle->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d11c      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0392      	lsls	r2, r2, #14
 80019f4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	2200      	movs	r2, #0
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 faa0 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001a08:	f7ff fe8c 	bl	8001724 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_Base_MspInit+0x68>)
 8001a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_TIM_Base_MspInit+0x68>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	0109      	lsls	r1, r1, #4
 8001a16:	430a      	orrs	r2, r1
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_TIM_Base_MspInit+0x68>)
 8001a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4013      	ands	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b017      	add	sp, #92	; 0x5c
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	240c      	movs	r4, #12
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	0018      	movs	r0, r3
 8001a46:	2314      	movs	r3, #20
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f004 facc 	bl	8005fe8 <memset>
  if(timHandle->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_TIM_MspPostInit+0x70>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d121      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_TIM_MspPostInit+0x74>)
 8001a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_TIM_MspPostInit+0x74>)
 8001a60:	2102      	movs	r1, #2
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_TIM_MspPostInit+0x74>)
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a72:	0021      	movs	r1, r4
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2208      	movs	r2, #8
 8001a78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2201      	movs	r2, #1
 8001a90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_TIM_MspPostInit+0x78>)
 8001a96:	0019      	movs	r1, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	f000 fb3b 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b009      	add	sp, #36	; 0x24
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	50000400 	.word	0x50000400

08001ab4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <MX_USART2_UART_Init+0x98>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ac0:	22e1      	movs	r2, #225	; 0xe1
 8001ac2:	0252      	lsls	r2, r2, #9
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f002 fd94 	bl	800462c <HAL_UART_Init>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b08:	f7ff fe0c 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	0018      	movs	r0, r3
 8001b12:	f004 f829 	bl	8005b68 <HAL_UARTEx_SetTxFifoThreshold>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b1a:	f7ff fe03 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f004 f860 	bl	8005be8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b2c:	f7ff fdfa 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <MX_USART2_UART_Init+0x94>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f003 ffde 	bl	8005af4 <HAL_UARTEx_DisableFifoMode>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f7ff fdf2 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	200000e0 	.word	0x200000e0
 8001b4c:	40004400 	.word	0x40004400

08001b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b09d      	sub	sp, #116	; 0x74
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	235c      	movs	r3, #92	; 0x5c
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	2314      	movs	r3, #20
 8001b60:	001a      	movs	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f004 fa40 	bl	8005fe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b68:	2410      	movs	r4, #16
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	234c      	movs	r3, #76	; 0x4c
 8001b70:	001a      	movs	r2, r3
 8001b72:	2100      	movs	r1, #0
 8001b74:	f004 fa38 	bl	8005fe8 <memset>
  if(uartHandle->Instance==USART2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_UART_MspInit+0xc8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d146      	bne.n	8001c10 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	0018      	movs	r0, r3
 8001b92:	f001 f9d7 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b9a:	f7ff fdc3 	bl	8001724 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_UART_MspInit+0xcc>)
 8001ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_UART_MspInit+0xcc>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0289      	lsls	r1, r1, #10
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_UART_MspInit+0xcc>)
 8001bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	029b      	lsls	r3, r3, #10
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_UART_MspInit+0xcc>)
 8001bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_UART_MspInit+0xcc>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_UART_MspInit+0xcc>)
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bd2:	215c      	movs	r1, #92	; 0x5c
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2202      	movs	r2, #2
 8001bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	2201      	movs	r2, #1
 8001bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	187a      	adds	r2, r7, r1
 8001bf4:	23a0      	movs	r3, #160	; 0xa0
 8001bf6:	05db      	lsls	r3, r3, #23
 8001bf8:	0011      	movs	r1, r2
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 fa8a 	bl	8002114 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	201c      	movs	r0, #28
 8001c06:	f000 f98b 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001c0a:	201c      	movs	r0, #28
 8001c0c:	f000 f99d 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b01d      	add	sp, #116	; 0x74
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	40004400 	.word	0x40004400
 8001c1c:	40021000 	.word	0x40021000

08001c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f7ff fe00 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c4e:	f004 f9eb 	bl	8006028 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c52:	f7ff fb2b 	bl	80012ac <main>

08001c56 <LoopForever>:

LoopForever:
  b LoopForever
 8001c56:	e7fe      	b.n	8001c56 <LoopForever>
  ldr   r0, =_estack
 8001c58:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c64:	08006454 	.word	0x08006454
  ldr r2, =_sbss
 8001c68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c6c:	200002c0 	.word	0x200002c0

08001c70 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_COMP_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_Init+0x3c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_Init+0x3c>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0049      	lsls	r1, r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f810 	bl	8001cb4 <HAL_InitTick>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	e001      	b.n	8001ca4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7ff fd46 	bl	8001730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	781b      	ldrb	r3, [r3, #0]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40022000 	.word	0x40022000

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_InitTick+0x88>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d02b      	beq.n	8001d24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_InitTick+0x8c>)
 8001cce:	681c      	ldr	r4, [r3, #0]
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_InitTick+0x88>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	23fa      	movs	r3, #250	; 0xfa
 8001cd8:	0098      	lsls	r0, r3, #2
 8001cda:	f7fe fa13 	bl	8000104 <__udivsi3>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	f7fe fa0e 	bl	8000104 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 f93d 	bl	8001f6a <HAL_SYSTICK_Config>
 8001cf0:	1e03      	subs	r3, r0, #0
 8001cf2:	d112      	bne.n	8001d1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d80a      	bhi.n	8001d10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	425b      	negs	r3, r3
 8001d00:	2200      	movs	r2, #0
 8001d02:	0018      	movs	r0, r3
 8001d04:	f000 f90c 	bl	8001f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_InitTick+0x90>)
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e00d      	b.n	8001d2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d10:	230f      	movs	r3, #15
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	e008      	b.n	8001d2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d1a:	230f      	movs	r3, #15
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	e003      	b.n	8001d2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d24:	230f      	movs	r3, #15
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b005      	add	sp, #20
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	001a      	movs	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_IncTick+0x20>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	18d2      	adds	r2, r2, r3
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_IncTick+0x20>)
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000174 	.word	0x20000174

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <HAL_GetTick+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	20000174 	.word	0x20000174

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	001a      	movs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	f7ff ffe0 	bl	8001d6c <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	0002      	movs	r2, r0
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dda:	d809      	bhi.n	8001df0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	001a      	movs	r2, r3
 8001de2:	231f      	movs	r3, #31
 8001de4:	401a      	ands	r2, r3
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_EnableIRQ+0x30>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	4091      	lsls	r1, r2
 8001dec:	000a      	movs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	0002      	movs	r2, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e10:	d828      	bhi.n	8001e64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e12:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <__NVIC_SetPriority+0xd4>)
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	33c0      	adds	r3, #192	; 0xc0
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	589b      	ldr	r3, [r3, r2]
 8001e22:	1dfa      	adds	r2, r7, #7
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	0011      	movs	r1, r2
 8001e28:	2203      	movs	r2, #3
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	00d2      	lsls	r2, r2, #3
 8001e2e:	21ff      	movs	r1, #255	; 0xff
 8001e30:	4091      	lsls	r1, r2
 8001e32:	000a      	movs	r2, r1
 8001e34:	43d2      	mvns	r2, r2
 8001e36:	401a      	ands	r2, r3
 8001e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	22ff      	movs	r2, #255	; 0xff
 8001e40:	401a      	ands	r2, r3
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	2303      	movs	r3, #3
 8001e4a:	4003      	ands	r3, r0
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e50:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <__NVIC_SetPriority+0xd4>)
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	33c0      	adds	r3, #192	; 0xc0
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e62:	e031      	b.n	8001ec8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <__NVIC_SetPriority+0xd8>)
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	400b      	ands	r3, r1
 8001e70:	3b08      	subs	r3, #8
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3306      	adds	r3, #6
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1dfa      	adds	r2, r7, #7
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	0011      	movs	r1, r2
 8001e84:	2203      	movs	r2, #3
 8001e86:	400a      	ands	r2, r1
 8001e88:	00d2      	lsls	r2, r2, #3
 8001e8a:	21ff      	movs	r1, #255	; 0xff
 8001e8c:	4091      	lsls	r1, r2
 8001e8e:	000a      	movs	r2, r1
 8001e90:	43d2      	mvns	r2, r2
 8001e92:	401a      	ands	r2, r3
 8001e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	4003      	ands	r3, r0
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <__NVIC_SetPriority+0xd8>)
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001c      	movs	r4, r3
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	4023      	ands	r3, r4
 8001eb8:	3b08      	subs	r3, #8
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	3306      	adds	r3, #6
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	18c3      	adds	r3, r0, r3
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	045b      	lsls	r3, r3, #17
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d301      	bcc.n	8001ef0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eec:	2301      	movs	r3, #1
 8001eee:	e010      	b.n	8001f12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <SysTick_Config+0x44>)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	3a01      	subs	r2, #1
 8001ef6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	425b      	negs	r3, r3
 8001efc:	2103      	movs	r1, #3
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff ff7c 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x44>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x44>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	1c02      	adds	r2, r0, #0
 8001f30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b004      	add	sp, #16
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	0002      	movs	r2, r0
 8001f52:	1dfb      	adds	r3, r7, #7
 8001f54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f56:	1dfb      	adds	r3, r7, #7
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff ff33 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff ffaf 	bl	8001ed8 <SysTick_Config>
 8001f7a:	0003      	movs	r3, r0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e04f      	b.n	8002036 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2225      	movs	r2, #37	; 0x25
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d008      	beq.n	8001fb4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	2100      	movs	r1, #0
 8001fae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e040      	b.n	8002036 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	210e      	movs	r1, #14
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	491c      	ldr	r1, [pc, #112]	; (8002040 <HAL_DMA_Abort+0xbc>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	221c      	movs	r2, #28
 8001fea:	401a      	ands	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4091      	lsls	r1, r2
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002000:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	490a      	ldr	r1, [pc, #40]	; (8002040 <HAL_DMA_Abort+0xbc>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002022:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2225      	movs	r2, #37	; 0x25
 8002028:	2101      	movs	r1, #1
 800202a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	fffffeff 	.word	0xfffffeff

08002044 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	210f      	movs	r1, #15
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2225      	movs	r2, #37	; 0x25
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d006      	beq.n	800206e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2204      	movs	r2, #4
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e048      	b.n	8002100 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	210e      	movs	r1, #14
 800207a:	438a      	bics	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	491d      	ldr	r1, [pc, #116]	; (8002110 <HAL_DMA_Abort_IT+0xcc>)
 800209a:	400a      	ands	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	221c      	movs	r2, #28
 80020a4:	401a      	ands	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2101      	movs	r1, #1
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00c      	beq.n	80020de <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	4910      	ldr	r1, [pc, #64]	; (8002110 <HAL_DMA_Abort_IT+0xcc>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2225      	movs	r2, #37	; 0x25
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2224      	movs	r2, #36	; 0x24
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	0010      	movs	r0, r2
 80020fe:	4798      	blx	r3
    }
  }
  return status;
 8002100:	230f      	movs	r3, #15
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	781b      	ldrb	r3, [r3, #0]
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	fffffeff 	.word	0xfffffeff

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	e14d      	b.n	80023c0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4091      	lsls	r1, r2
 800212e:	000a      	movs	r2, r1
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d100      	bne.n	800213c <HAL_GPIO_Init+0x28>
 800213a:	e13e      	b.n	80023ba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2203      	movs	r2, #3
 8002142:	4013      	ands	r3, r2
 8002144:	2b01      	cmp	r3, #1
 8002146:	d005      	beq.n	8002154 <HAL_GPIO_Init+0x40>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	4013      	ands	r3, r2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d130      	bne.n	80021b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	409a      	lsls	r2, r3
 8002162:	0013      	movs	r3, r2
 8002164:	43da      	mvns	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	0013      	movs	r3, r2
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	43da      	mvns	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	2201      	movs	r2, #1
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d017      	beq.n	80021f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	43da      	mvns	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d123      	bne.n	8002246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	58d3      	ldr	r3, [r2, r3]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2207      	movs	r2, #7
 8002210:	4013      	ands	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	43da      	mvns	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2107      	movs	r1, #7
 800222a:	400b      	ands	r3, r1
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	6939      	ldr	r1, [r7, #16]
 8002244:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	43da      	mvns	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2203      	movs	r2, #3
 8002264:	401a      	ands	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	0013      	movs	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	23c0      	movs	r3, #192	; 0xc0
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	4013      	ands	r3, r2
 8002284:	d100      	bne.n	8002288 <HAL_GPIO_Init+0x174>
 8002286:	e098      	b.n	80023ba <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002288:	4a53      	ldr	r2, [pc, #332]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3318      	adds	r3, #24
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	589b      	ldr	r3, [r3, r2]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2203      	movs	r2, #3
 800229a:	4013      	ands	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	220f      	movs	r2, #15
 80022a0:	409a      	lsls	r2, r3
 80022a2:	0013      	movs	r3, r2
 80022a4:	43da      	mvns	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	23a0      	movs	r3, #160	; 0xa0
 80022b0:	05db      	lsls	r3, r3, #23
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x1d6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a48      	ldr	r2, [pc, #288]	; (80023dc <HAL_GPIO_Init+0x2c8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x1d2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a47      	ldr	r2, [pc, #284]	; (80023e0 <HAL_GPIO_Init+0x2cc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x1ce>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a46      	ldr	r2, [pc, #280]	; (80023e4 <HAL_GPIO_Init+0x2d0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x1ca>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a45      	ldr	r2, [pc, #276]	; (80023e8 <HAL_GPIO_Init+0x2d4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x1c6>
 80022d6:	2304      	movs	r3, #4
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022da:	2305      	movs	r3, #5
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022ea:	2300      	movs	r3, #0
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	2103      	movs	r1, #3
 80022f0:	400a      	ands	r2, r1
 80022f2:	00d2      	lsls	r2, r2, #3
 80022f4:	4093      	lsls	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022fc:	4936      	ldr	r1, [pc, #216]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3318      	adds	r3, #24
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43da      	mvns	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	035b      	lsls	r3, r3, #13
 8002322:	4013      	ands	r3, r2
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43da      	mvns	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	039b      	lsls	r3, r3, #14
 800234c:	4013      	ands	r3, r2
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 8002360:	2384      	movs	r3, #132	; 0x84
 8002362:	58d3      	ldr	r3, [r2, r3]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	43da      	mvns	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	029b      	lsls	r3, r3, #10
 8002378:	4013      	ands	r3, r2
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002384:	4914      	ldr	r1, [pc, #80]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 8002386:	2284      	movs	r2, #132	; 0x84
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	58d3      	ldr	r3, [r2, r3]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43da      	mvns	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	025b      	lsls	r3, r3, #9
 80023a6:	4013      	ands	r3, r2
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023b2:	4909      	ldr	r1, [pc, #36]	; (80023d8 <HAL_GPIO_Init+0x2c4>)
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3301      	adds	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	40da      	lsrs	r2, r3
 80023c8:	1e13      	subs	r3, r2, #0
 80023ca:	d000      	beq.n	80023ce <HAL_GPIO_Init+0x2ba>
 80023cc:	e6aa      	b.n	8002124 <HAL_GPIO_Init+0x10>
  }
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b006      	add	sp, #24
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021800 	.word	0x40021800
 80023dc:	50000400 	.word	0x50000400
 80023e0:	50000800 	.word	0x50000800
 80023e4:	50000c00 	.word	0x50000c00
 80023e8:	50001000 	.word	0x50001000

080023ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	000a      	movs	r2, r1
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	1cba      	adds	r2, r7, #2
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	4013      	ands	r3, r2
 8002404:	d004      	beq.n	8002410 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002406:	230f      	movs	r3, #15
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e003      	b.n	8002418 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002418:	230f      	movs	r3, #15
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	0008      	movs	r0, r1
 8002430:	0011      	movs	r1, r2
 8002432:	1cbb      	adds	r3, r7, #2
 8002434:	1c02      	adds	r2, r0, #0
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	1c7b      	adds	r3, r7, #1
 800243a:	1c0a      	adds	r2, r1, #0
 800243c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243e:	1c7b      	adds	r3, r7, #1
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002446:	1cbb      	adds	r3, r7, #2
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800244e:	e003      	b.n	8002458 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002450:	1cbb      	adds	r3, r7, #2
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	000a      	movs	r2, r1
 800246a:	1cbb      	adds	r3, r7, #2
 800246c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002474:	1cbb      	adds	r3, r7, #2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	1cb9      	adds	r1, r7, #2
 8002484:	8809      	ldrh	r1, [r1, #0]
 8002486:	400b      	ands	r3, r1
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d11f      	bne.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	0013      	movs	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4912      	ldr	r1, [pc, #72]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7fd fe1a 	bl	8000104 <__udivsi3>
 80024d0:	0003      	movs	r3, r0
 80024d2:	3301      	adds	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024d6:	e008      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e001      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e009      	b.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	401a      	ands	r2, r3
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d0ed      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	40007000 	.word	0x40007000
 800250c:	fffff9ff 	.word	0xfffff9ff
 8002510:	20000000 	.word	0x20000000
 8002514:	000f4240 	.word	0x000f4240

08002518 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <LL_RCC_GetAPB1Prescaler+0x14>)
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	23e0      	movs	r3, #224	; 0xe0
 8002522:	01db      	lsls	r3, r3, #7
 8002524:	4013      	ands	r3, r2
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f000 fb50 	bl	8002be4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d100      	bne.n	8002550 <HAL_RCC_OscConfig+0x20>
 800254e:	e07c      	b.n	800264a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002550:	4bc3      	ldr	r3, [pc, #780]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2238      	movs	r2, #56	; 0x38
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255a:	4bc1      	ldr	r3, [pc, #772]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2203      	movs	r2, #3
 8002560:	4013      	ands	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b10      	cmp	r3, #16
 8002568:	d102      	bne.n	8002570 <HAL_RCC_OscConfig+0x40>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d002      	beq.n	8002576 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d10b      	bne.n	800258e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	4bba      	ldr	r3, [pc, #744]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	029b      	lsls	r3, r3, #10
 800257e:	4013      	ands	r3, r2
 8002580:	d062      	beq.n	8002648 <HAL_RCC_OscConfig+0x118>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d15e      	bne.n	8002648 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e32a      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	025b      	lsls	r3, r3, #9
 8002596:	429a      	cmp	r2, r3
 8002598:	d107      	bne.n	80025aa <HAL_RCC_OscConfig+0x7a>
 800259a:	4bb1      	ldr	r3, [pc, #708]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4bb0      	ldr	r3, [pc, #704]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	0249      	lsls	r1, r1, #9
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e020      	b.n	80025ec <HAL_RCC_OscConfig+0xbc>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	23a0      	movs	r3, #160	; 0xa0
 80025b0:	02db      	lsls	r3, r3, #11
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d10e      	bne.n	80025d4 <HAL_RCC_OscConfig+0xa4>
 80025b6:	4baa      	ldr	r3, [pc, #680]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4ba9      	ldr	r3, [pc, #676]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	02c9      	lsls	r1, r1, #11
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	4ba6      	ldr	r3, [pc, #664]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4ba5      	ldr	r3, [pc, #660]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	0249      	lsls	r1, r1, #9
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xbc>
 80025d4:	4ba2      	ldr	r3, [pc, #648]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025da:	49a2      	ldr	r1, [pc, #648]	; (8002864 <HAL_RCC_OscConfig+0x334>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4b9f      	ldr	r3, [pc, #636]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b9e      	ldr	r3, [pc, #632]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025e6:	49a0      	ldr	r1, [pc, #640]	; (8002868 <HAL_RCC_OscConfig+0x338>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d014      	beq.n	800261e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7ff fbba 	bl	8001d6c <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fe:	f7ff fbb5 	bl	8001d6c <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e2e9      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	029b      	lsls	r3, r3, #10
 8002618:	4013      	ands	r3, r2
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0xce>
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff fba5 	bl	8001d6c <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff fba0 	bl	8001d6c <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e2d4      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	4013      	ands	r3, r2
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0xf8>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d100      	bne.n	8002656 <HAL_RCC_OscConfig+0x126>
 8002654:	e099      	b.n	800278a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002656:	4b82      	ldr	r3, [pc, #520]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2238      	movs	r2, #56	; 0x38
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002660:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2203      	movs	r2, #3
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d102      	bne.n	8002676 <HAL_RCC_OscConfig+0x146>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d002      	beq.n	800267c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d135      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4013      	ands	r3, r2
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x164>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e2a7      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a74      	ldr	r2, [pc, #464]	; (800286c <HAL_RCC_OscConfig+0x33c>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	021a      	lsls	r2, r3, #8
 80026a4:	4b6e      	ldr	r3, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d112      	bne.n	80026d6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x340>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80026c4:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0adb      	lsrs	r3, r3, #11
 80026ca:	2207      	movs	r2, #7
 80026cc:	4013      	ands	r3, r2
 80026ce:	4a69      	ldr	r2, [pc, #420]	; (8002874 <HAL_RCC_OscConfig+0x344>)
 80026d0:	40da      	lsrs	r2, r3
 80026d2:	4b69      	ldr	r3, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x348>)
 80026d4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026d6:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x34c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0018      	movs	r0, r3
 80026dc:	f7ff faea 	bl	8001cb4 <HAL_InitTick>
 80026e0:	1e03      	subs	r3, r0, #0
 80026e2:	d051      	beq.n	8002788 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e27d      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d030      	beq.n	8002752 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x340>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	4b58      	ldr	r3, [pc, #352]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002704:	4b56      	ldr	r3, [pc, #344]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b55      	ldr	r3, [pc, #340]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	0049      	lsls	r1, r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff fb2b 	bl	8001d6c <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff fb26 	bl	8001d6c <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e25a      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4013      	ands	r3, r2
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_RCC_OscConfig+0x33c>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	021a      	lsls	r2, r3, #8
 800274a:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e01b      	b.n	800278a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002758:	4949      	ldr	r1, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x350>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7ff fb05 	bl	8001d6c <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002768:	f7ff fb00 	bl	8001d6c <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e234      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4013      	ands	r3, r2
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x238>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002788:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2208      	movs	r2, #8
 8002790:	4013      	ands	r3, r2
 8002792:	d047      	beq.n	8002824 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2238      	movs	r2, #56	; 0x38
 800279a:	4013      	ands	r3, r2
 800279c:	2b18      	cmp	r3, #24
 800279e:	d10a      	bne.n	80027b6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80027a0:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	d03c      	beq.n	8002824 <HAL_RCC_OscConfig+0x2f4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d138      	bne.n	8002824 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e216      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80027c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff facf 	bl	8001d6c <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7ff faca 	bl	8001d6c <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1fe      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d0f1      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2a4>
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80027f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	438a      	bics	r2, r1
 80027fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7ff fab5 	bl	8001d6c <HAL_GetTick>
 8002802:	0003      	movs	r3, r0
 8002804:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7ff fab0 	bl	8001d6c <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1e4      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d1f1      	bne.n	8002808 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2204      	movs	r2, #4
 800282a:	4013      	ands	r3, r2
 800282c:	d100      	bne.n	8002830 <HAL_RCC_OscConfig+0x300>
 800282e:	e0c7      	b.n	80029c0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002830:	231f      	movs	r3, #31
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2238      	movs	r2, #56	; 0x38
 800283e:	4013      	ands	r3, r2
 8002840:	2b20      	cmp	r3, #32
 8002842:	d11f      	bne.n	8002884 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2202      	movs	r2, #2
 800284a:	4013      	ands	r3, r2
 800284c:	d100      	bne.n	8002850 <HAL_RCC_OscConfig+0x320>
 800284e:	e0b7      	b.n	80029c0 <HAL_RCC_OscConfig+0x490>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d000      	beq.n	800285a <HAL_RCC_OscConfig+0x32a>
 8002858:	e0b2      	b.n	80029c0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1c2      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	40021000 	.word	0x40021000
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	fffbffff 	.word	0xfffbffff
 800286c:	ffff80ff 	.word	0xffff80ff
 8002870:	ffffc7ff 	.word	0xffffc7ff
 8002874:	00f42400 	.word	0x00f42400
 8002878:	20000000 	.word	0x20000000
 800287c:	20000004 	.word	0x20000004
 8002880:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002884:	4bb5      	ldr	r3, [pc, #724]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	055b      	lsls	r3, r3, #21
 800288c:	4013      	ands	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0x364>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x366>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d011      	beq.n	80028be <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4bb0      	ldr	r3, [pc, #704]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800289c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800289e:	4baf      	ldr	r3, [pc, #700]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	0549      	lsls	r1, r1, #21
 80028a4:	430a      	orrs	r2, r1
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	4bac      	ldr	r3, [pc, #688]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80028aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	055b      	lsls	r3, r3, #21
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80028b6:	231f      	movs	r3, #31
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	4ba8      	ldr	r3, [pc, #672]	; (8002b60 <HAL_RCC_OscConfig+0x630>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	d11a      	bne.n	8002900 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ca:	4ba5      	ldr	r3, [pc, #660]	; (8002b60 <HAL_RCC_OscConfig+0x630>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4ba4      	ldr	r3, [pc, #656]	; (8002b60 <HAL_RCC_OscConfig+0x630>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0049      	lsls	r1, r1, #1
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fa48 	bl	8001d6c <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7ff fa43 	bl	8001d6c <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e177      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f4:	4b9a      	ldr	r3, [pc, #616]	; (8002b60 <HAL_RCC_OscConfig+0x630>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x3e6>
 8002908:	4b94      	ldr	r3, [pc, #592]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800290a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800290c:	4b93      	ldr	r3, [pc, #588]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800290e:	2101      	movs	r1, #1
 8002910:	430a      	orrs	r2, r1
 8002912:	65da      	str	r2, [r3, #92]	; 0x5c
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x420>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x408>
 800291e:	4b8f      	ldr	r3, [pc, #572]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002920:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002922:	4b8e      	ldr	r3, [pc, #568]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002924:	2104      	movs	r1, #4
 8002926:	430a      	orrs	r2, r1
 8002928:	65da      	str	r2, [r3, #92]	; 0x5c
 800292a:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800292c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002930:	2101      	movs	r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	65da      	str	r2, [r3, #92]	; 0x5c
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x420>
 8002938:	4b88      	ldr	r3, [pc, #544]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800293a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800293c:	4b87      	ldr	r3, [pc, #540]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800293e:	2101      	movs	r1, #1
 8002940:	438a      	bics	r2, r1
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c
 8002944:	4b85      	ldr	r3, [pc, #532]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002948:	4b84      	ldr	r3, [pc, #528]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 800294a:	2104      	movs	r1, #4
 800294c:	438a      	bics	r2, r1
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d014      	beq.n	8002982 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff fa08 	bl	8001d6c <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002960:	e009      	b.n	8002976 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7ff fa03 	bl	8001d6c <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	4a7d      	ldr	r2, [pc, #500]	; (8002b64 <HAL_RCC_OscConfig+0x634>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e136      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	4b79      	ldr	r3, [pc, #484]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x432>
 8002980:	e013      	b.n	80029aa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff f9f3 	bl	8001d6c <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800298a:	e009      	b.n	80029a0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7ff f9ee 	bl	8001d6c <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	4a73      	ldr	r2, [pc, #460]	; (8002b64 <HAL_RCC_OscConfig+0x634>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e121      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a0:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80029aa:	231f      	movs	r3, #31
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80029b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80029ba:	496b      	ldr	r1, [pc, #428]	; (8002b68 <HAL_RCC_OscConfig+0x638>)
 80029bc:	400a      	ands	r2, r1
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	4013      	ands	r3, r2
 80029c8:	d039      	beq.n	8002a3e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01b      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d2:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	03c9      	lsls	r1, r1, #15
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7ff f9c4 	bl	8001d6c <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ea:	f7ff f9bf 	bl	8001d6c <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0f3      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029fc:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	4013      	ands	r3, r2
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x4ba>
 8002a08:	e019      	b.n	8002a3e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a0a:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a10:	4956      	ldr	r1, [pc, #344]	; (8002b6c <HAL_RCC_OscConfig+0x63c>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff f9a9 	bl	8001d6c <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a20:	f7ff f9a4 	bl	8001d6c <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0d8      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d100      	bne.n	8002a48 <HAL_RCC_OscConfig+0x518>
 8002a46:	e0cc      	b.n	8002be2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2238      	movs	r2, #56	; 0x38
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d100      	bne.n	8002a56 <HAL_RCC_OscConfig+0x526>
 8002a54:	e07b      	b.n	8002b4e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d156      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a64:	4942      	ldr	r1, [pc, #264]	; (8002b70 <HAL_RCC_OscConfig+0x640>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff f97f 	bl	8001d6c <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff f97a 	bl	8001d6c <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0ae      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a86:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	049b      	lsls	r3, r3, #18
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a37      	ldr	r2, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x644>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac6:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	0449      	lsls	r1, r1, #17
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	0549      	lsls	r1, r1, #21
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f943 	bl	8001d6c <HAL_GetTick>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7ff f93e 	bl	8001d6c <HAL_GetTick>
 8002af0:	0002      	movs	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e072      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	049b      	lsls	r3, r3, #18
 8002b06:	4013      	ands	r3, r2
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x5bc>
 8002b0a:	e06a      	b.n	8002be2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002b12:	4917      	ldr	r1, [pc, #92]	; (8002b70 <HAL_RCC_OscConfig+0x640>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f928 	bl	8001d6c <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7ff f923 	bl	8001d6c <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e057      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	049b      	lsls	r3, r3, #18
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002b46:	490c      	ldr	r1, [pc, #48]	; (8002b78 <HAL_RCC_OscConfig+0x648>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	e049      	b.n	8002be2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d112      	bne.n	8002b7c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e044      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40007000 	.word	0x40007000
 8002b64:	00001388 	.word	0x00001388
 8002b68:	efffffff 	.word	0xefffffff
 8002b6c:	ffbfffff 	.word	0xffbfffff
 8002b70:	feffffff 	.word	0xfeffffff
 8002b74:	11c1808c 	.word	0x11c1808c
 8002b78:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x6bc>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2203      	movs	r2, #3
 8002b86:	401a      	ands	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d126      	bne.n	8002bde <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2270      	movs	r2, #112	; 0x70
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d11f      	bne.n	8002bde <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	23fe      	movs	r3, #254	; 0xfe
 8002ba2:	01db      	lsls	r3, r3, #7
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d116      	bne.n	8002bde <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	23f8      	movs	r3, #248	; 0xf8
 8002bb4:	039b      	lsls	r3, r3, #14
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d10e      	bne.n	8002bde <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	23e0      	movs	r3, #224	; 0xe0
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	0f5b      	lsrs	r3, r3, #29
 8002bd4:	075a      	lsls	r2, r3, #29
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b008      	add	sp, #32
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0e9      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2207      	movs	r2, #7
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d91e      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2207      	movs	r2, #7
 8002c18:	4393      	bics	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	4b70      	ldr	r3, [pc, #448]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c24:	f7ff f8a2 	bl	8001d6c <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c2c:	e009      	b.n	8002c42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2e:	f7ff f89d 	bl	8001d6c <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0ca      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c42:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2207      	movs	r2, #7
 8002c48:	4013      	ands	r3, r2
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2202      	movs	r2, #2
 8002c56:	4013      	ands	r3, r2
 8002c58:	d015      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	4013      	ands	r3, r2
 8002c62:	d006      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c64:	4b60      	ldr	r3, [pc, #384]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6a:	21e0      	movs	r1, #224	; 0xe0
 8002c6c:	01c9      	lsls	r1, r1, #7
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_RCC_ClockConfig+0x1fc>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d057      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d12b      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e097      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	049b      	lsls	r3, r3, #18
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d11f      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e08b      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc8:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d113      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e07f      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e074      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e06d      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2207      	movs	r2, #7
 8002d02:	4393      	bics	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7ff f82c 	bl	8001d6c <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d18:	e009      	b.n	8002d2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7ff f827 	bl	8001d6c <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <HAL_RCC_ClockConfig+0x1f4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e054      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2238      	movs	r2, #56	; 0x38
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1ec      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2207      	movs	r2, #7
 8002d46:	4013      	ands	r3, r2
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d21e      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2207      	movs	r2, #7
 8002d54:	4393      	bics	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d60:	f7ff f804 	bl	8001d6c <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d68:	e009      	b.n	8002d7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6a:	f7fe ffff 	bl	8001d6c <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_RCC_ClockConfig+0x1f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e02c      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2207      	movs	r2, #7
 8002d84:	4013      	ands	r3, r2
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2204      	movs	r2, #4
 8002d92:	4013      	ands	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_RCC_ClockConfig+0x200>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002daa:	f000 f829 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dae:	0001      	movs	r1, r0
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	220f      	movs	r2, #15
 8002db8:	401a      	ands	r2, r3
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_RCC_ClockConfig+0x204>)
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	58d3      	ldr	r3, [r2, r3]
 8002dc0:	221f      	movs	r2, #31
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	40da      	lsrs	r2, r3
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x208>)
 8002dca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x20c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fe ff6f 	bl	8001cb4 <HAL_InitTick>
 8002dd6:	0003      	movs	r3, r0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40022000 	.word	0x40022000
 8002de4:	00001388 	.word	0x00001388
 8002de8:	40021000 	.word	0x40021000
 8002dec:	fffff0ff 	.word	0xfffff0ff
 8002df0:	ffff8fff 	.word	0xffff8fff
 8002df4:	08006264 	.word	0x08006264
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000004 	.word	0x20000004

08002e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e06:	4b3c      	ldr	r3, [pc, #240]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2238      	movs	r2, #56	; 0x38
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d10f      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0adb      	lsrs	r3, r3, #11
 8002e16:	2207      	movs	r2, #7
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	0013      	movs	r3, r2
 8002e20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e22:	6839      	ldr	r1, [r7, #0]
 8002e24:	4835      	ldr	r0, [pc, #212]	; (8002efc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e26:	f7fd f96d 	bl	8000104 <__udivsi3>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e05d      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2238      	movs	r2, #56	; 0x38
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e3c:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e054      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2238      	movs	r2, #56	; 0x38
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d138      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2203      	movs	r2, #3
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	2207      	movs	r2, #7
 8002e60:	4013      	ands	r3, r2
 8002e62:	3301      	adds	r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	4824      	ldr	r0, [pc, #144]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e70:	f7fd f948 	bl	8000104 <__udivsi3>
 8002e74:	0003      	movs	r3, r0
 8002e76:	0019      	movs	r1, r3
 8002e78:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	227f      	movs	r2, #127	; 0x7f
 8002e80:	4013      	ands	r3, r2
 8002e82:	434b      	muls	r3, r1
 8002e84:	617b      	str	r3, [r7, #20]
        break;
 8002e86:	e00d      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	481c      	ldr	r0, [pc, #112]	; (8002efc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e8c:	f7fd f93a 	bl	8000104 <__udivsi3>
 8002e90:	0003      	movs	r3, r0
 8002e92:	0019      	movs	r1, r3
 8002e94:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	227f      	movs	r2, #127	; 0x7f
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	434b      	muls	r3, r1
 8002ea0:	617b      	str	r3, [r7, #20]
        break;
 8002ea2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0f5b      	lsrs	r3, r3, #29
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4013      	ands	r3, r2
 8002eae:	3301      	adds	r3, #1
 8002eb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	6978      	ldr	r0, [r7, #20]
 8002eb6:	f7fd f925 	bl	8000104 <__udivsi3>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e015      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2238      	movs	r2, #56	; 0x38
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d103      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2238      	movs	r2, #56	; 0x38
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b18      	cmp	r3, #24
 8002ede:	d103      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ee0:	23fa      	movs	r3, #250	; 0xfa
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	e001      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002eec:	693b      	ldr	r3, [r7, #16]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	007a1200 	.word	0x007a1200

08002f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	20000000 	.word	0x20000000

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f1c:	f7ff fff2 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f20:	0004      	movs	r4, r0
 8002f22:	f7ff faf9 	bl	8002518 <LL_RCC_GetAPB1Prescaler>
 8002f26:	0003      	movs	r3, r0
 8002f28:	0b1a      	lsrs	r2, r3, #12
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f2c:	0092      	lsls	r2, r2, #2
 8002f2e:	58d3      	ldr	r3, [r2, r3]
 8002f30:	221f      	movs	r2, #31
 8002f32:	4013      	ands	r3, r2
 8002f34:	40dc      	lsrs	r4, r3
 8002f36:	0023      	movs	r3, r4
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	080062a4 	.word	0x080062a4

08002f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f4c:	2313      	movs	r3, #19
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f54:	2312      	movs	r3, #18
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	4013      	ands	r3, r2
 8002f66:	d100      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f68:	e0ad      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2011      	movs	r0, #17
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	055b      	lsls	r3, r3, #21
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d110      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f82:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0549      	lsls	r1, r1, #21
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f8c:	4b40      	ldr	r3, [pc, #256]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	055b      	lsls	r3, r3, #21
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	0049      	lsls	r1, r1, #1
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fedd 	bl	8001d6c <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fe fed8 	bl	8001d6c <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d904      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002fc6:	2313      	movs	r3, #19
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2203      	movs	r2, #3
 8002fcc:	701a      	strb	r2, [r3, #0]
        break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d0ed      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002fdc:	2313      	movs	r3, #19
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d15e      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fea:	23c0      	movs	r3, #192	; 0xc0
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d019      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d014      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	4a24      	ldr	r2, [pc, #144]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003008:	4013      	ands	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800300e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0249      	lsls	r1, r1, #9
 8003016:	430a      	orrs	r2, r1
 8003018:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800301c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003020:	491e      	ldr	r1, [pc, #120]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003022:	400a      	ands	r2, r1
 8003024:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d016      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe fe9a 	bl	8001d6c <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	e00c      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fe95 	bl	8001d6c <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	4a15      	ldr	r2, [pc, #84]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d904      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800304e:	2313      	movs	r3, #19
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2203      	movs	r2, #3
 8003054:	701a      	strb	r2, [r3, #0]
            break;
 8003056:	e004      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d0ed      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003062:	2313      	movs	r3, #19
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800307c:	430a      	orrs	r2, r1
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003080:	e016      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003082:	2312      	movs	r3, #18
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2213      	movs	r2, #19
 8003088:	18ba      	adds	r2, r7, r2
 800308a:	7812      	ldrb	r2, [r2, #0]
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e00f      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	fffffcff 	.word	0xfffffcff
 800309c:	fffeffff 	.word	0xfffeffff
 80030a0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	2312      	movs	r3, #18
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2213      	movs	r2, #19
 80030aa:	18ba      	adds	r2, r7, r2
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b0:	2311      	movs	r3, #17
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4bb6      	ldr	r3, [pc, #728]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030be:	4bb5      	ldr	r3, [pc, #724]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c0:	49b5      	ldr	r1, [pc, #724]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	d009      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d0:	4bb0      	ldr	r3, [pc, #704]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	2203      	movs	r2, #3
 80030d6:	4393      	bics	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4bad      	ldr	r3, [pc, #692]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030e0:	430a      	orrs	r2, r1
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ee:	4ba9      	ldr	r3, [pc, #676]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	220c      	movs	r2, #12
 80030f4:	4393      	bics	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	4ba5      	ldr	r3, [pc, #660]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030fe:	430a      	orrs	r2, r1
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2204      	movs	r2, #4
 8003108:	4013      	ands	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800310c:	4ba1      	ldr	r3, [pc, #644]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	2230      	movs	r2, #48	; 0x30
 8003112:	4393      	bics	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b9e      	ldr	r3, [pc, #632]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800311c:	430a      	orrs	r2, r1
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2210      	movs	r2, #16
 8003126:	4013      	ands	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312a:	4b9a      	ldr	r3, [pc, #616]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	4a9b      	ldr	r2, [pc, #620]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	4b96      	ldr	r3, [pc, #600]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800313a:	430a      	orrs	r2, r1
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	4013      	ands	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800314a:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	4a94      	ldr	r2, [pc, #592]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	4b8e      	ldr	r3, [pc, #568]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800315a:	430a      	orrs	r2, r1
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316a:	4b8a      	ldr	r3, [pc, #552]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	4a8d      	ldr	r2, [pc, #564]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003178:	4b86      	ldr	r3, [pc, #536]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800317a:	430a      	orrs	r2, r1
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4013      	ands	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800318a:	4b82      	ldr	r3, [pc, #520]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	4a86      	ldr	r2, [pc, #536]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4b7e      	ldr	r3, [pc, #504]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800319a:	430a      	orrs	r2, r1
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2220      	movs	r2, #32
 80031a4:	4013      	ands	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a8:	4b7a      	ldr	r3, [pc, #488]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	4a7f      	ldr	r2, [pc, #508]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	4b77      	ldr	r3, [pc, #476]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	4013      	ands	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c6:	4b73      	ldr	r3, [pc, #460]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	4a79      	ldr	r2, [pc, #484]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	01db      	lsls	r3, r3, #7
 80031e2:	4013      	ands	r3, r2
 80031e4:	d015      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e6:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	0899      	lsrs	r1, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f2:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031f4:	430a      	orrs	r2, r1
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	05db      	lsls	r3, r3, #23
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003204:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	0249      	lsls	r1, r1, #9
 800320e:	430a      	orrs	r2, r1
 8003210:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	031b      	lsls	r3, r3, #12
 800321a:	4013      	ands	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800321e:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	4393      	bics	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	4b59      	ldr	r3, [pc, #356]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800322e:	430a      	orrs	r2, r1
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	039b      	lsls	r3, r3, #14
 800323a:	4013      	ands	r3, r2
 800323c:	d016      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800323e:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324c:	4b51      	ldr	r3, [pc, #324]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800324e:	430a      	orrs	r2, r1
 8003250:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	03db      	lsls	r3, r3, #15
 800325a:	429a      	cmp	r2, r3
 800325c:	d106      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800325e:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0449      	lsls	r1, r1, #17
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	03db      	lsls	r3, r3, #15
 8003274:	4013      	ands	r3, r2
 8003276:	d016      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003288:	430a      	orrs	r2, r1
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	045b      	lsls	r3, r3, #17
 8003294:	429a      	cmp	r2, r3
 8003296:	d106      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003298:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	0449      	lsls	r1, r1, #17
 80032a2:	430a      	orrs	r2, r1
 80032a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4013      	ands	r3, r2
 80032b0:	d014      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	2203      	movs	r2, #3
 80032b8:	4393      	bics	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1a      	ldr	r2, [r3, #32]
 80032c0:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d106      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032ce:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0249      	lsls	r1, r1, #9
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	019b      	lsls	r3, r3, #6
 80032e4:	4013      	ands	r3, r2
 80032e6:	d014      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80032e8:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	220c      	movs	r2, #12
 80032ee:	4393      	bics	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2b04      	cmp	r3, #4
 8003302:	d106      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	0249      	lsls	r1, r1, #9
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	045b      	lsls	r3, r3, #17
 800331a:	4013      	ands	r3, r2
 800331c:	d016      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800332e:	430a      	orrs	r2, r1
 8003330:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	429a      	cmp	r2, r3
 800333c:	d106      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0449      	lsls	r1, r1, #17
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	049b      	lsls	r3, r3, #18
 8003354:	4013      	ands	r3, r2
 8003356:	d016      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003358:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003368:	430a      	orrs	r2, r1
 800336a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	429a      	cmp	r2, r3
 8003376:	d106      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	0449      	lsls	r1, r1, #17
 8003382:	430a      	orrs	r2, r1
 8003384:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003386:	2312      	movs	r3, #18
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	781b      	ldrb	r3, [r3, #0]
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b006      	add	sp, #24
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	efffffff 	.word	0xefffffff
 800339c:	fffff3ff 	.word	0xfffff3ff
 80033a0:	fffffcff 	.word	0xfffffcff
 80033a4:	fff3ffff 	.word	0xfff3ffff
 80033a8:	ffcfffff 	.word	0xffcfffff
 80033ac:	ffffcfff 	.word	0xffffcfff
 80033b0:	ffff3fff 	.word	0xffff3fff
 80033b4:	ffbfffff 	.word	0xffbfffff
 80033b8:	feffffff 	.word	0xfeffffff

080033bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e04a      	b.n	8003464 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223d      	movs	r2, #61	; 0x3d
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d107      	bne.n	80033ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223c      	movs	r2, #60	; 0x3c
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fe faf1 	bl	80019cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	223d      	movs	r2, #61	; 0x3d
 80033ee:	2102      	movs	r1, #2
 80033f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	0019      	movs	r1, r3
 80033fc:	0010      	movs	r0, r2
 80033fe:	f000 fbe7 	bl	8003bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2248      	movs	r2, #72	; 0x48
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223e      	movs	r2, #62	; 0x3e
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223f      	movs	r2, #63	; 0x3f
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2241      	movs	r2, #65	; 0x41
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2242      	movs	r2, #66	; 0x42
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2243      	movs	r2, #67	; 0x43
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2244      	movs	r2, #68	; 0x44
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2245      	movs	r2, #69	; 0x45
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2246      	movs	r2, #70	; 0x46
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2247      	movs	r2, #71	; 0x47
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223d      	movs	r2, #61	; 0x3d
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e04a      	b.n	8003514 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223d      	movs	r2, #61	; 0x3d
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223c      	movs	r2, #60	; 0x3c
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f841 	bl	800351c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223d      	movs	r2, #61	; 0x3d
 800349e:	2102      	movs	r1, #2
 80034a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	0019      	movs	r1, r3
 80034ac:	0010      	movs	r0, r2
 80034ae:	f000 fb8f 	bl	8003bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2248      	movs	r2, #72	; 0x48
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	223e      	movs	r2, #62	; 0x3e
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2240      	movs	r2, #64	; 0x40
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2241      	movs	r2, #65	; 0x41
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2242      	movs	r2, #66	; 0x42
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2243      	movs	r2, #67	; 0x43
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2244      	movs	r2, #68	; 0x44
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2245      	movs	r2, #69	; 0x45
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2246      	movs	r2, #70	; 0x46
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2247      	movs	r2, #71	; 0x47
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223d      	movs	r2, #61	; 0x3d
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <HAL_TIM_PWM_Start+0x22>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223e      	movs	r2, #62	; 0x3e
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	1e5a      	subs	r2, r3, #1
 8003548:	4193      	sbcs	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e037      	b.n	80035be <HAL_TIM_PWM_Start+0x92>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d108      	bne.n	8003566 <HAL_TIM_PWM_Start+0x3a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	4193      	sbcs	r3, r2
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e02b      	b.n	80035be <HAL_TIM_PWM_Start+0x92>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d108      	bne.n	800357e <HAL_TIM_PWM_Start+0x52>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2240      	movs	r2, #64	; 0x40
 8003570:	5c9b      	ldrb	r3, [r3, r2]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	4193      	sbcs	r3, r2
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e01f      	b.n	80035be <HAL_TIM_PWM_Start+0x92>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d108      	bne.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2241      	movs	r2, #65	; 0x41
 8003588:	5c9b      	ldrb	r3, [r3, r2]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	4193      	sbcs	r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	e013      	b.n	80035be <HAL_TIM_PWM_Start+0x92>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b10      	cmp	r3, #16
 800359a:	d108      	bne.n	80035ae <HAL_TIM_PWM_Start+0x82>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2242      	movs	r2, #66	; 0x42
 80035a0:	5c9b      	ldrb	r3, [r3, r2]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	4193      	sbcs	r3, r2
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e007      	b.n	80035be <HAL_TIM_PWM_Start+0x92>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2243      	movs	r2, #67	; 0x43
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	1e5a      	subs	r2, r3, #1
 80035ba:	4193      	sbcs	r3, r2
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e090      	b.n	80036e8 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	223e      	movs	r2, #62	; 0x3e
 80035d0:	2102      	movs	r1, #2
 80035d2:	5499      	strb	r1, [r3, r2]
 80035d4:	e023      	b.n	800361e <HAL_TIM_PWM_Start+0xf2>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xba>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	223f      	movs	r2, #63	; 0x3f
 80035e0:	2102      	movs	r1, #2
 80035e2:	5499      	strb	r1, [r3, r2]
 80035e4:	e01b      	b.n	800361e <HAL_TIM_PWM_Start+0xf2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Start+0xca>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	2102      	movs	r1, #2
 80035f2:	5499      	strb	r1, [r3, r2]
 80035f4:	e013      	b.n	800361e <HAL_TIM_PWM_Start+0xf2>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Start+0xda>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2241      	movs	r2, #65	; 0x41
 8003600:	2102      	movs	r1, #2
 8003602:	5499      	strb	r1, [r3, r2]
 8003604:	e00b      	b.n	800361e <HAL_TIM_PWM_Start+0xf2>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d104      	bne.n	8003616 <HAL_TIM_PWM_Start+0xea>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2242      	movs	r2, #66	; 0x42
 8003610:	2102      	movs	r1, #2
 8003612:	5499      	strb	r1, [r3, r2]
 8003614:	e003      	b.n	800361e <HAL_TIM_PWM_Start+0xf2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2243      	movs	r2, #67	; 0x43
 800361a:	2102      	movs	r1, #2
 800361c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6839      	ldr	r1, [r7, #0]
 8003624:	2201      	movs	r2, #1
 8003626:	0018      	movs	r0, r3
 8003628:	f000 feca 	bl	80043c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <HAL_TIM_PWM_Start+0x1c4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_TIM_PWM_Start+0x128>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2e      	ldr	r2, [pc, #184]	; (80036f4 <HAL_TIM_PWM_Start+0x1c8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_TIM_PWM_Start+0x128>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <HAL_TIM_PWM_Start+0x1cc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_TIM_PWM_Start+0x128>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <HAL_TIM_PWM_Start+0x1d0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_TIM_PWM_Start+0x12c>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_TIM_PWM_Start+0x12e>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	0209      	lsls	r1, r1, #8
 800366c:	430a      	orrs	r2, r1
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_TIM_PWM_Start+0x1c4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d014      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x178>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	05db      	lsls	r3, r3, #23
 8003682:	429a      	cmp	r2, r3
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x178>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_TIM_PWM_Start+0x1d4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x178>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_PWM_Start+0x1d8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x178>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_TIM_PWM_Start+0x1c8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d116      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <HAL_TIM_PWM_Start+0x1dc>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d016      	beq.n	80036e4 <HAL_TIM_PWM_Start+0x1b8>
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	025b      	lsls	r3, r3, #9
 80036bc:	429a      	cmp	r2, r3
 80036be:	d011      	beq.n	80036e4 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	e008      	b.n	80036e4 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e000      	b.n	80036e6 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	00010007 	.word	0x00010007

0800370c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fe4e 	bl	80043c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a37      	ldr	r2, [pc, #220]	; (8003808 <HAL_TIM_PWM_Stop+0xfc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_PWM_Stop+0x40>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a36      	ldr	r2, [pc, #216]	; (800380c <HAL_TIM_PWM_Stop+0x100>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIM_PWM_Stop+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a34      	ldr	r2, [pc, #208]	; (8003810 <HAL_TIM_PWM_Stop+0x104>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_PWM_Stop+0x40>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a33      	ldr	r2, [pc, #204]	; (8003814 <HAL_TIM_PWM_Stop+0x108>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_TIM_PWM_Stop+0x44>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_TIM_PWM_Stop+0x46>
 8003750:	2300      	movs	r3, #0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d013      	beq.n	800377e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <HAL_TIM_PWM_Stop+0x10c>)
 800375e:	4013      	ands	r3, r2
 8003760:	d10d      	bne.n	800377e <HAL_TIM_PWM_Stop+0x72>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a2c      	ldr	r2, [pc, #176]	; (800381c <HAL_TIM_PWM_Stop+0x110>)
 800376a:	4013      	ands	r3, r2
 800376c:	d107      	bne.n	800377e <HAL_TIM_PWM_Stop+0x72>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4929      	ldr	r1, [pc, #164]	; (8003820 <HAL_TIM_PWM_Stop+0x114>)
 800377a:	400a      	ands	r2, r1
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <HAL_TIM_PWM_Stop+0x10c>)
 8003786:	4013      	ands	r3, r2
 8003788:	d10d      	bne.n	80037a6 <HAL_TIM_PWM_Stop+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_TIM_PWM_Stop+0x110>)
 8003792:	4013      	ands	r3, r2
 8003794:	d107      	bne.n	80037a6 <HAL_TIM_PWM_Stop+0x9a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2101      	movs	r1, #1
 80037a2:	438a      	bics	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Stop+0xaa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	223e      	movs	r2, #62	; 0x3e
 80037b0:	2101      	movs	r1, #1
 80037b2:	5499      	strb	r1, [r3, r2]
 80037b4:	e023      	b.n	80037fe <HAL_TIM_PWM_Stop+0xf2>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Stop+0xba>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	223f      	movs	r2, #63	; 0x3f
 80037c0:	2101      	movs	r1, #1
 80037c2:	5499      	strb	r1, [r3, r2]
 80037c4:	e01b      	b.n	80037fe <HAL_TIM_PWM_Stop+0xf2>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Stop+0xca>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Stop+0xf2>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Stop+0xda>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2241      	movs	r2, #65	; 0x41
 80037e0:	2101      	movs	r1, #1
 80037e2:	5499      	strb	r1, [r3, r2]
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Stop+0xf2>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Stop+0xea>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2242      	movs	r2, #66	; 0x42
 80037f0:	2101      	movs	r1, #1
 80037f2:	5499      	strb	r1, [r3, r2]
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Stop+0xf2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2243      	movs	r2, #67	; 0x43
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800
 8003818:	00001111 	.word	0x00001111
 800381c:	00000444 	.word	0x00000444
 8003820:	ffff7fff 	.word	0xffff7fff

08003824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003830:	2317      	movs	r3, #23
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	223c      	movs	r2, #60	; 0x3c
 800383c:	5c9b      	ldrb	r3, [r3, r2]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003842:	2302      	movs	r3, #2
 8003844:	e0e5      	b.n	8003a12 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	223c      	movs	r2, #60	; 0x3c
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b14      	cmp	r3, #20
 8003852:	d900      	bls.n	8003856 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003854:	e0d1      	b.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	009a      	lsls	r2, r3, #2
 800385a:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800385c:	18d3      	adds	r3, r2, r3
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fa48 	bl	8003d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2108      	movs	r1, #8
 800387c:	430a      	orrs	r2, r1
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2104      	movs	r1, #4
 800388c:	438a      	bics	r2, r1
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	619a      	str	r2, [r3, #24]
      break;
 80038a2:	e0af      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fab1 	bl	8003e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	0109      	lsls	r1, r1, #4
 80038c0:	430a      	orrs	r2, r1
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4954      	ldr	r1, [pc, #336]	; (8003a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038d0:	400a      	ands	r2, r1
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	619a      	str	r2, [r3, #24]
      break;
 80038e8:	e08c      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	0011      	movs	r1, r2
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 fb12 	bl	8003f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2108      	movs	r1, #8
 8003904:	430a      	orrs	r2, r1
 8003906:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2104      	movs	r1, #4
 8003914:	438a      	bics	r2, r1
 8003916:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69d9      	ldr	r1, [r3, #28]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	61da      	str	r2, [r3, #28]
      break;
 800392a:	e06b      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fb79 	bl	800402c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0109      	lsls	r1, r1, #4
 8003948:	430a      	orrs	r2, r1
 800394a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4932      	ldr	r1, [pc, #200]	; (8003a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003958:	400a      	ands	r2, r1
 800395a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69d9      	ldr	r1, [r3, #28]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      break;
 8003970:	e048      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	0011      	movs	r1, r2
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fbc0 	bl	8004100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2108      	movs	r1, #8
 800398c:	430a      	orrs	r2, r1
 800398e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2104      	movs	r1, #4
 800399c:	438a      	bics	r2, r1
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039b2:	e027      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 fbff 	bl	80041c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	0109      	lsls	r1, r1, #4
 80039d0:	430a      	orrs	r2, r1
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4910      	ldr	r1, [pc, #64]	; (8003a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039f8:	e004      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80039fa:	2317      	movs	r3, #23
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
      break;
 8003a02:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	223c      	movs	r2, #60	; 0x3c
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5499      	strb	r1, [r3, r2]

  return status;
 8003a0c:	2317      	movs	r3, #23
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b006      	add	sp, #24
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	080062c4 	.word	0x080062c4
 8003a20:	fffffbff 	.word	0xfffffbff

08003a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	230f      	movs	r3, #15
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	223c      	movs	r2, #60	; 0x3c
 8003a3a:	5c9b      	ldrb	r3, [r3, r2]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_ConfigClockSource+0x20>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0bc      	b.n	8003bbe <HAL_TIM_ConfigClockSource+0x19a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	223c      	movs	r2, #60	; 0x3c
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	223d      	movs	r2, #61	; 0x3d
 8003a50:	2102      	movs	r1, #2
 8003a52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a5a      	ldr	r2, [pc, #360]	; (8003bc8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a59      	ldr	r2, [pc, #356]	; (8003bcc <HAL_TIM_ConfigClockSource+0x1a8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	0192      	lsls	r2, r2, #6
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d040      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xde>
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	0192      	lsls	r2, r2, #6
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d900      	bls.n	8003a8a <HAL_TIM_ConfigClockSource+0x66>
 8003a88:	e088      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	0152      	lsls	r2, r2, #5
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d100      	bne.n	8003a94 <HAL_TIM_ConfigClockSource+0x70>
 8003a92:	e088      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x182>
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	0152      	lsls	r2, r2, #5
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d900      	bls.n	8003a9e <HAL_TIM_ConfigClockSource+0x7a>
 8003a9c:	e07e      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003a9e:	2b70      	cmp	r3, #112	; 0x70
 8003aa0:	d018      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0xb0>
 8003aa2:	d900      	bls.n	8003aa6 <HAL_TIM_ConfigClockSource+0x82>
 8003aa4:	e07a      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003aa6:	2b60      	cmp	r3, #96	; 0x60
 8003aa8:	d04f      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x126>
 8003aaa:	d900      	bls.n	8003aae <HAL_TIM_ConfigClockSource+0x8a>
 8003aac:	e076      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003aae:	2b50      	cmp	r3, #80	; 0x50
 8003ab0:	d03b      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x106>
 8003ab2:	d900      	bls.n	8003ab6 <HAL_TIM_ConfigClockSource+0x92>
 8003ab4:	e072      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d057      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x146>
 8003aba:	d900      	bls.n	8003abe <HAL_TIM_ConfigClockSource+0x9a>
 8003abc:	e06e      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003abe:	2b30      	cmp	r3, #48	; 0x30
 8003ac0:	d063      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ac2:	d86b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d060      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ac8:	d868      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d05d      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d05b      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ad2:	e063      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae4:	f000 fc4c 	bl	8004380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2277      	movs	r2, #119	; 0x77
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
      break;
 8003b00:	e052      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	f000 fc35 	bl	8004380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	01c9      	lsls	r1, r1, #7
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e03e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	001a      	movs	r2, r3
 8003b38:	f000 fba6 	bl	8004288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fc00 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e02e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b56:	001a      	movs	r2, r3
 8003b58:	f000 fbc4 	bl	80042e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2160      	movs	r1, #96	; 0x60
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 fbf0 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003b68:	e01e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	001a      	movs	r2, r3
 8003b78:	f000 fb86 	bl	8004288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 fbe0 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e00e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0019      	movs	r1, r3
 8003b94:	0010      	movs	r0, r2
 8003b96:	f000 fbd7 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b9c:	230f      	movs	r3, #15
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ba6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	223d      	movs	r2, #61	; 0x3d
 8003bac:	2101      	movs	r1, #1
 8003bae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	223c      	movs	r2, #60	; 0x3c
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

  return status;
 8003bb8:	230f      	movs	r3, #15
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	ffceff88 	.word	0xffceff88
 8003bcc:	ffff00ff 	.word	0xffff00ff

08003bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <TIM_Base_SetConfig+0x110>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00c      	beq.n	8003c02 <TIM_Base_SetConfig+0x32>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	05db      	lsls	r3, r3, #23
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d007      	beq.n	8003c02 <TIM_Base_SetConfig+0x32>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_Base_SetConfig+0x32>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ce8 <TIM_Base_SetConfig+0x118>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d108      	bne.n	8003c14 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2270      	movs	r2, #112	; 0x70
 8003c06:	4393      	bics	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <TIM_Base_SetConfig+0x110>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01c      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	05db      	lsls	r3, r3, #23
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d017      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <TIM_Base_SetConfig+0x118>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <TIM_Base_SetConfig+0x11c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2b      	ldr	r2, [pc, #172]	; (8003cf0 <TIM_Base_SetConfig+0x120>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <TIM_Base_SetConfig+0x124>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_Base_SetConfig+0x86>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <TIM_Base_SetConfig+0x128>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <TIM_Base_SetConfig+0x12c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	001a      	movs	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <TIM_Base_SetConfig+0x110>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_Base_SetConfig+0xde>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <TIM_Base_SetConfig+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_Base_SetConfig+0xde>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <TIM_Base_SetConfig+0x124>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_Base_SetConfig+0xde>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <TIM_Base_SetConfig+0x128>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d103      	bne.n	8003cb6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d106      	bne.n	8003cd6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4393      	bics	r3, r2
 8003cd0:	001a      	movs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]
  }
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40002000 	.word	0x40002000
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	fffffcff 	.word	0xfffffcff

08003d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	2201      	movs	r2, #1
 8003d16:	4393      	bics	r3, r2
 8003d18:	001a      	movs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <TIM_OC1_SetConfig+0xf8>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2203      	movs	r2, #3
 8003d36:	4393      	bics	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2202      	movs	r2, #2
 8003d48:	4393      	bics	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a28      	ldr	r2, [pc, #160]	; (8003dfc <TIM_OC1_SetConfig+0xfc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_OC1_SetConfig+0x76>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <TIM_OC1_SetConfig+0x100>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_OC1_SetConfig+0x76>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <TIM_OC1_SetConfig+0x104>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_OC1_SetConfig+0x76>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <TIM_OC1_SetConfig+0x108>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <TIM_OC1_SetConfig+0xfc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_OC1_SetConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <TIM_OC1_SetConfig+0x100>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_OC1_SetConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <TIM_OC1_SetConfig+0x104>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC1_SetConfig+0xb0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <TIM_OC1_SetConfig+0x108>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC1_SetConfig+0x10c>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC1_SetConfig+0x110>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b006      	add	sp, #24
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	fffeff8f 	.word	0xfffeff8f
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	fffffeff 	.word	0xfffffeff
 8003e10:	fffffdff 	.word	0xfffffdff

08003e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a2e      	ldr	r2, [pc, #184]	; (8003efc <TIM_OC2_SetConfig+0xe8>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <TIM_OC2_SetConfig+0xec>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	4393      	bics	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <TIM_OC2_SetConfig+0xf0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10d      	bne.n	8003e92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2240      	movs	r2, #64	; 0x40
 8003e8e:	4393      	bics	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <TIM_OC2_SetConfig+0xf0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <TIM_OC2_SetConfig+0x9e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <TIM_OC2_SetConfig+0xf4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <TIM_OC2_SetConfig+0x9e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <TIM_OC2_SetConfig+0xf8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_OC2_SetConfig+0x9e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <TIM_OC2_SetConfig+0xfc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d113      	bne.n	8003eda <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <TIM_OC2_SetConfig+0x100>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <TIM_OC2_SetConfig+0x104>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b006      	add	sp, #24
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	feff8fff 	.word	0xfeff8fff
 8003f00:	fffffcff 	.word	0xfffffcff
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	fffffbff 	.word	0xfffffbff
 8003f18:	fffff7ff 	.word	0xfffff7ff

08003f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a33      	ldr	r2, [pc, #204]	; (8004000 <TIM_OC3_SetConfig+0xe4>)
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <TIM_OC3_SetConfig+0xe8>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	4393      	bics	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	4a29      	ldr	r2, [pc, #164]	; (8004008 <TIM_OC3_SetConfig+0xec>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <TIM_OC3_SetConfig+0xf0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10d      	bne.n	8003f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	; (8004010 <TIM_OC3_SetConfig+0xf4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <TIM_OC3_SetConfig+0xf8>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <TIM_OC3_SetConfig+0xf0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <TIM_OC3_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x9a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <TIM_OC3_SetConfig+0x100>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x9a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <TIM_OC3_SetConfig+0x104>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d113      	bne.n	8003fde <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <TIM_OC3_SetConfig+0x108>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <TIM_OC3_SetConfig+0x10c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b006      	add	sp, #24
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	fffffeff 	.word	0xfffffeff
 8004004:	fffeff8f 	.word	0xfffeff8f
 8004008:	fffffdff 	.word	0xfffffdff
 800400c:	40012c00 	.word	0x40012c00
 8004010:	fffff7ff 	.word	0xfffff7ff
 8004014:	fffffbff 	.word	0xfffffbff
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	ffffefff 	.word	0xffffefff
 8004028:	ffffdfff 	.word	0xffffdfff

0800402c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <TIM_OC4_SetConfig+0xb0>)
 8004042:	401a      	ands	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <TIM_OC4_SetConfig+0xb4>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <TIM_OC4_SetConfig+0xb8>)
 8004060:	4013      	ands	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <TIM_OC4_SetConfig+0xbc>)
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a19      	ldr	r2, [pc, #100]	; (80040ec <TIM_OC4_SetConfig+0xc0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC4_SetConfig+0x78>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <TIM_OC4_SetConfig+0xc4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC4_SetConfig+0x78>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <TIM_OC4_SetConfig+0xc8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC4_SetConfig+0x78>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <TIM_OC4_SetConfig+0xcc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <TIM_OC4_SetConfig+0xd0>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	ffffefff 	.word	0xffffefff
 80040e0:	feff8fff 	.word	0xfeff8fff
 80040e4:	fffffcff 	.word	0xfffffcff
 80040e8:	ffffdfff 	.word	0xffffdfff
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	ffffbfff 	.word	0xffffbfff

08004100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4a23      	ldr	r2, [pc, #140]	; (80041a4 <TIM_OC5_SetConfig+0xa4>)
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <TIM_OC5_SetConfig+0xa8>)
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <TIM_OC5_SetConfig+0xac>)
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <TIM_OC5_SetConfig+0xb0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_OC5_SetConfig+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <TIM_OC5_SetConfig+0xb4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_OC5_SetConfig+0x6e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC5_SetConfig+0xb8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_OC5_SetConfig+0x6e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <TIM_OC5_SetConfig+0xbc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d109      	bne.n	8004182 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <TIM_OC5_SetConfig+0xa4>)
 8004172:	4013      	ands	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b006      	add	sp, #24
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	fffeffff 	.word	0xfffeffff
 80041a8:	fffeff8f 	.word	0xfffeff8f
 80041ac:	fffdffff 	.word	0xfffdffff
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4a24      	ldr	r2, [pc, #144]	; (8004268 <TIM_OC6_SetConfig+0xa8>)
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a20      	ldr	r2, [pc, #128]	; (800426c <TIM_OC6_SetConfig+0xac>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <TIM_OC6_SetConfig+0xb0>)
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a18      	ldr	r2, [pc, #96]	; (8004274 <TIM_OC6_SetConfig+0xb4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00b      	beq.n	8004230 <TIM_OC6_SetConfig+0x70>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <TIM_OC6_SetConfig+0xb8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <TIM_OC6_SetConfig+0x70>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC6_SetConfig+0xbc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_OC6_SetConfig+0x70>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <TIM_OC6_SetConfig+0xc0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <TIM_OC6_SetConfig+0xc4>)
 8004234:	4013      	ands	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b006      	add	sp, #24
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	ffefffff 	.word	0xffefffff
 800426c:	feff8fff 	.word	0xfeff8fff
 8004270:	ffdfffff 	.word	0xffdfffff
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800
 8004284:	fffbffff 	.word	0xfffbffff

08004288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	2201      	movs	r2, #1
 80042a0:	4393      	bics	r3, r2
 80042a2:	001a      	movs	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	22f0      	movs	r2, #240	; 0xf0
 80042b2:	4393      	bics	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	220a      	movs	r2, #10
 80042c4:	4393      	bics	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b006      	add	sp, #24
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	2210      	movs	r2, #16
 80042fc:	4393      	bics	r3, r2
 80042fe:	001a      	movs	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4a0d      	ldr	r2, [pc, #52]	; (8004344 <TIM_TI2_ConfigInputStage+0x60>)
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	22a0      	movs	r2, #160	; 0xa0
 8004320:	4393      	bics	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b006      	add	sp, #24
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	ffff0fff 	.word	0xffff0fff

08004348 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a08      	ldr	r2, [pc, #32]	; (800437c <TIM_ITRx_SetConfig+0x34>)
 800435c:	4013      	ands	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	2207      	movs	r2, #7
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	ffcfff8f 	.word	0xffcfff8f

08004380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <TIM_ETR_SetConfig+0x3c>)
 8004398:	4013      	ands	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	021a      	lsls	r2, r3, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b006      	add	sp, #24
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	ffff00ff 	.word	0xffff00ff

080043c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	221f      	movs	r2, #31
 80043d0:	4013      	ands	r3, r2
 80043d2:	2201      	movs	r2, #1
 80043d4:	409a      	lsls	r2, r3
 80043d6:	0013      	movs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	43d2      	mvns	r2, r2
 80043e2:	401a      	ands	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	211f      	movs	r1, #31
 80043f0:	400b      	ands	r3, r1
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4099      	lsls	r1, r3
 80043f6:	000b      	movs	r3, r1
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b006      	add	sp, #24
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223c      	movs	r2, #60	; 0x3c
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800441c:	2302      	movs	r3, #2
 800441e:	e05a      	b.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	223c      	movs	r2, #60	; 0x3c
 8004424:	2101      	movs	r1, #1
 8004426:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	223d      	movs	r2, #61	; 0x3d
 800442c:	2102      	movs	r1, #2
 800442e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d108      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800444e:	4013      	ands	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2270      	movs	r2, #112	; 0x70
 8004460:	4393      	bics	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d014      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	429a      	cmp	r2, r3
 800448a:	d00e      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a14      	ldr	r2, [pc, #80]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	4393      	bics	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	223d      	movs	r2, #61	; 0x3d
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	223c      	movs	r2, #60	; 0x3c
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	ff0fffff 	.word	0xff0fffff
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40014000 	.word	0x40014000

080044f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	223c      	movs	r2, #60	; 0x3c
 8004506:	5c9b      	ldrb	r3, [r3, r2]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800450c:	2302      	movs	r3, #2
 800450e:	e06f      	b.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	223c      	movs	r2, #60	; 0x3c
 8004514:	2101      	movs	r1, #1
 8004516:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	; 0xff
 800451c:	4393      	bics	r3, r2
 800451e:	001a      	movs	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a33      	ldr	r2, [pc, #204]	; (80045f8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800452c:	401a      	ands	r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a30      	ldr	r2, [pc, #192]	; (80045fc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800453a:	401a      	ands	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a2e      	ldr	r2, [pc, #184]	; (8004600 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004548:	401a      	ands	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a2b      	ldr	r2, [pc, #172]	; (8004604 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004556:	401a      	ands	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a29      	ldr	r2, [pc, #164]	; (8004608 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004564:	401a      	ands	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a26      	ldr	r2, [pc, #152]	; (800460c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004572:	401a      	ands	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004580:	401a      	ands	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a21      	ldr	r2, [pc, #132]	; (8004614 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004590:	401a      	ands	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d11c      	bne.n	80045de <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80045a8:	401a      	ands	r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	051b      	lsls	r3, r3, #20
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80045b8:	401a      	ands	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80045c6:	401a      	ands	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80045d4:	401a      	ands	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	223c      	movs	r2, #60	; 0x3c
 80045ea:	2100      	movs	r1, #0
 80045ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b004      	add	sp, #16
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	fffffcff 	.word	0xfffffcff
 80045fc:	fffffbff 	.word	0xfffffbff
 8004600:	fffff7ff 	.word	0xfffff7ff
 8004604:	ffffefff 	.word	0xffffefff
 8004608:	ffffdfff 	.word	0xffffdfff
 800460c:	ffffbfff 	.word	0xffffbfff
 8004610:	fff0ffff 	.word	0xfff0ffff
 8004614:	efffffff 	.word	0xefffffff
 8004618:	40012c00 	.word	0x40012c00
 800461c:	ff0fffff 	.word	0xff0fffff
 8004620:	feffffff 	.word	0xfeffffff
 8004624:	fdffffff 	.word	0xfdffffff
 8004628:	dfffffff 	.word	0xdfffffff

0800462c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e046      	b.n	80046cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2288      	movs	r2, #136	; 0x88
 8004642:	589b      	ldr	r3, [r3, r2]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2284      	movs	r2, #132	; 0x84
 800464c:	2100      	movs	r1, #0
 800464e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0018      	movs	r0, r3
 8004654:	f7fd fa7c 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2288      	movs	r2, #136	; 0x88
 800465c:	2124      	movs	r1, #36	; 0x24
 800465e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	438a      	bics	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 ffaa 	bl	80055d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	0018      	movs	r0, r3
 8004684:	f000 fc50 	bl	8004f28 <UART_SetConfig>
 8004688:	0003      	movs	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e01c      	b.n	80046cc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	490d      	ldr	r1, [pc, #52]	; (80046d4 <HAL_UART_Init+0xa8>)
 800469e:	400a      	ands	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	212a      	movs	r1, #42	; 0x2a
 80046ae:	438a      	bics	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f001 f839 	bl	800573c <UART_CheckIdleState>
 80046ca:	0003      	movs	r3, r0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	ffffb7ff 	.word	0xffffb7ff

080046d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	1dbb      	adds	r3, r7, #6
 80046e6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	228c      	movs	r2, #140	; 0x8c
 80046ec:	589b      	ldr	r3, [r3, r2]
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d000      	beq.n	80046f4 <HAL_UART_Receive+0x1c>
 80046f2:	e0d0      	b.n	8004896 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_UART_Receive+0x2a>
 80046fa:	1dbb      	adds	r3, r7, #6
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0c8      	b.n	8004898 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	015b      	lsls	r3, r3, #5
 800470e:	429a      	cmp	r2, r3
 8004710:	d109      	bne.n	8004726 <HAL_UART_Receive+0x4e>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2201      	movs	r2, #1
 800471e:	4013      	ands	r3, r2
 8004720:	d001      	beq.n	8004726 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0b8      	b.n	8004898 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2290      	movs	r2, #144	; 0x90
 800472a:	2100      	movs	r1, #0
 800472c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	228c      	movs	r2, #140	; 0x8c
 8004732:	2122      	movs	r1, #34	; 0x22
 8004734:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800473c:	f7fd fb16 	bl	8001d6c <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1dba      	adds	r2, r7, #6
 8004748:	215c      	movs	r1, #92	; 0x5c
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1dba      	adds	r2, r7, #6
 8004752:	215e      	movs	r1, #94	; 0x5e
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	015b      	lsls	r3, r3, #5
 8004760:	429a      	cmp	r2, r3
 8004762:	d10d      	bne.n	8004780 <HAL_UART_Receive+0xa8>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_UART_Receive+0x9e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2260      	movs	r2, #96	; 0x60
 8004770:	494b      	ldr	r1, [pc, #300]	; (80048a0 <HAL_UART_Receive+0x1c8>)
 8004772:	5299      	strh	r1, [r3, r2]
 8004774:	e02e      	b.n	80047d4 <HAL_UART_Receive+0xfc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2260      	movs	r2, #96	; 0x60
 800477a:	21ff      	movs	r1, #255	; 0xff
 800477c:	5299      	strh	r1, [r3, r2]
 800477e:	e029      	b.n	80047d4 <HAL_UART_Receive+0xfc>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10d      	bne.n	80047a4 <HAL_UART_Receive+0xcc>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_UART_Receive+0xc2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2260      	movs	r2, #96	; 0x60
 8004794:	21ff      	movs	r1, #255	; 0xff
 8004796:	5299      	strh	r1, [r3, r2]
 8004798:	e01c      	b.n	80047d4 <HAL_UART_Receive+0xfc>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2260      	movs	r2, #96	; 0x60
 800479e:	217f      	movs	r1, #127	; 0x7f
 80047a0:	5299      	strh	r1, [r3, r2]
 80047a2:	e017      	b.n	80047d4 <HAL_UART_Receive+0xfc>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	055b      	lsls	r3, r3, #21
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d10d      	bne.n	80047cc <HAL_UART_Receive+0xf4>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <HAL_UART_Receive+0xea>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2260      	movs	r2, #96	; 0x60
 80047bc:	217f      	movs	r1, #127	; 0x7f
 80047be:	5299      	strh	r1, [r3, r2]
 80047c0:	e008      	b.n	80047d4 <HAL_UART_Receive+0xfc>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2260      	movs	r2, #96	; 0x60
 80047c6:	213f      	movs	r1, #63	; 0x3f
 80047c8:	5299      	strh	r1, [r3, r2]
 80047ca:	e003      	b.n	80047d4 <HAL_UART_Receive+0xfc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2260      	movs	r2, #96	; 0x60
 80047d0:	2100      	movs	r1, #0
 80047d2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80047d4:	2312      	movs	r3, #18
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	2160      	movs	r1, #96	; 0x60
 80047dc:	5a52      	ldrh	r2, [r2, r1]
 80047de:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	015b      	lsls	r3, r3, #5
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d108      	bne.n	80047fe <HAL_UART_Receive+0x126>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e003      	b.n	8004806 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004806:	e03a      	b.n	800487e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	0013      	movs	r3, r2
 8004812:	2200      	movs	r2, #0
 8004814:	2120      	movs	r1, #32
 8004816:	f001 f83b 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 800481a:	1e03      	subs	r3, r0, #0
 800481c:	d005      	beq.n	800482a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	228c      	movs	r2, #140	; 0x8c
 8004822:	2120      	movs	r1, #32
 8004824:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e036      	b.n	8004898 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10e      	bne.n	800484e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b29b      	uxth	r3, r3
 8004838:	2212      	movs	r2, #18
 800483a:	18ba      	adds	r2, r7, r2
 800483c:	8812      	ldrh	r2, [r2, #0]
 800483e:	4013      	ands	r3, r2
 8004840:	b29a      	uxth	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e00e      	b.n	800486c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2212      	movs	r2, #18
 8004858:	18ba      	adds	r2, r7, r2
 800485a:	8812      	ldrh	r2, [r2, #0]
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	4013      	ands	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3301      	adds	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	225e      	movs	r2, #94	; 0x5e
 8004870:	5a9b      	ldrh	r3, [r3, r2]
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b299      	uxth	r1, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	225e      	movs	r2, #94	; 0x5e
 800487c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	225e      	movs	r2, #94	; 0x5e
 8004882:	5a9b      	ldrh	r3, [r3, r2]
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1be      	bne.n	8004808 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	228c      	movs	r2, #140	; 0x8c
 800488e:	2120      	movs	r1, #32
 8004890:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b008      	add	sp, #32
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	000001ff 	.word	0x000001ff

080048a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048a4:	b5b0      	push	{r4, r5, r7, lr}
 80048a6:	b0aa      	sub	sp, #168	; 0xa8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	22a4      	movs	r2, #164	; 0xa4
 80048b4:	18b9      	adds	r1, r7, r2
 80048b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	20a0      	movs	r0, #160	; 0xa0
 80048c0:	1839      	adds	r1, r7, r0
 80048c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	249c      	movs	r4, #156	; 0x9c
 80048cc:	1939      	adds	r1, r7, r4
 80048ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048d0:	0011      	movs	r1, r2
 80048d2:	18bb      	adds	r3, r7, r2
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4aa2      	ldr	r2, [pc, #648]	; (8004b60 <HAL_UART_IRQHandler+0x2bc>)
 80048d8:	4013      	ands	r3, r2
 80048da:	2298      	movs	r2, #152	; 0x98
 80048dc:	18bd      	adds	r5, r7, r2
 80048de:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80048e0:	18bb      	adds	r3, r7, r2
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11a      	bne.n	800491e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2220      	movs	r2, #32
 80048ee:	4013      	ands	r3, r2
 80048f0:	d015      	beq.n	800491e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048f2:	183b      	adds	r3, r7, r0
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2220      	movs	r2, #32
 80048f8:	4013      	ands	r3, r2
 80048fa:	d105      	bne.n	8004908 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	055b      	lsls	r3, r3, #21
 8004904:	4013      	ands	r3, r2
 8004906:	d00a      	beq.n	800491e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490c:	2b00      	cmp	r3, #0
 800490e:	d100      	bne.n	8004912 <HAL_UART_IRQHandler+0x6e>
 8004910:	e2dc      	b.n	8004ecc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	0010      	movs	r0, r2
 800491a:	4798      	blx	r3
      }
      return;
 800491c:	e2d6      	b.n	8004ecc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800491e:	2398      	movs	r3, #152	; 0x98
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d100      	bne.n	800492a <HAL_UART_IRQHandler+0x86>
 8004928:	e122      	b.n	8004b70 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800492a:	239c      	movs	r3, #156	; 0x9c
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a8c      	ldr	r2, [pc, #560]	; (8004b64 <HAL_UART_IRQHandler+0x2c0>)
 8004932:	4013      	ands	r3, r2
 8004934:	d106      	bne.n	8004944 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004936:	23a0      	movs	r3, #160	; 0xa0
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a8a      	ldr	r2, [pc, #552]	; (8004b68 <HAL_UART_IRQHandler+0x2c4>)
 800493e:	4013      	ands	r3, r2
 8004940:	d100      	bne.n	8004944 <HAL_UART_IRQHandler+0xa0>
 8004942:	e115      	b.n	8004b70 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004944:	23a4      	movs	r3, #164	; 0xa4
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	4013      	ands	r3, r2
 800494e:	d012      	beq.n	8004976 <HAL_UART_IRQHandler+0xd2>
 8004950:	23a0      	movs	r3, #160	; 0xa0
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4013      	ands	r3, r2
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2290      	movs	r2, #144	; 0x90
 800496a:	589b      	ldr	r3, [r3, r2]
 800496c:	2201      	movs	r2, #1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2190      	movs	r1, #144	; 0x90
 8004974:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004976:	23a4      	movs	r3, #164	; 0xa4
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2202      	movs	r2, #2
 800497e:	4013      	ands	r3, r2
 8004980:	d011      	beq.n	80049a6 <HAL_UART_IRQHandler+0x102>
 8004982:	239c      	movs	r3, #156	; 0x9c
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	d00b      	beq.n	80049a6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2202      	movs	r2, #2
 8004994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2290      	movs	r2, #144	; 0x90
 800499a:	589b      	ldr	r3, [r3, r2]
 800499c:	2204      	movs	r2, #4
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2190      	movs	r1, #144	; 0x90
 80049a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049a6:	23a4      	movs	r3, #164	; 0xa4
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2204      	movs	r2, #4
 80049ae:	4013      	ands	r3, r2
 80049b0:	d011      	beq.n	80049d6 <HAL_UART_IRQHandler+0x132>
 80049b2:	239c      	movs	r3, #156	; 0x9c
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	4013      	ands	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2204      	movs	r2, #4
 80049c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2290      	movs	r2, #144	; 0x90
 80049ca:	589b      	ldr	r3, [r3, r2]
 80049cc:	2202      	movs	r2, #2
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2190      	movs	r1, #144	; 0x90
 80049d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049d6:	23a4      	movs	r3, #164	; 0xa4
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2208      	movs	r2, #8
 80049de:	4013      	ands	r3, r2
 80049e0:	d017      	beq.n	8004a12 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049e2:	23a0      	movs	r3, #160	; 0xa0
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	4013      	ands	r3, r2
 80049ec:	d105      	bne.n	80049fa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80049ee:	239c      	movs	r3, #156	; 0x9c
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5b      	ldr	r2, [pc, #364]	; (8004b64 <HAL_UART_IRQHandler+0x2c0>)
 80049f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049f8:	d00b      	beq.n	8004a12 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2208      	movs	r2, #8
 8004a00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2290      	movs	r2, #144	; 0x90
 8004a06:	589b      	ldr	r3, [r3, r2]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2190      	movs	r1, #144	; 0x90
 8004a10:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a12:	23a4      	movs	r3, #164	; 0xa4
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_UART_IRQHandler+0x1a4>
 8004a20:	23a0      	movs	r3, #160	; 0xa0
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	04db      	lsls	r3, r3, #19
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d00c      	beq.n	8004a48 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2290      	movs	r2, #144	; 0x90
 8004a3c:	589b      	ldr	r3, [r3, r2]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2190      	movs	r1, #144	; 0x90
 8004a46:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2290      	movs	r2, #144	; 0x90
 8004a4c:	589b      	ldr	r3, [r3, r2]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d100      	bne.n	8004a54 <HAL_UART_IRQHandler+0x1b0>
 8004a52:	e23d      	b.n	8004ed0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a54:	23a4      	movs	r3, #164	; 0xa4
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d015      	beq.n	8004a8c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a60:	23a0      	movs	r3, #160	; 0xa0
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2220      	movs	r2, #32
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d106      	bne.n	8004a7a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a6c:	239c      	movs	r3, #156	; 0x9c
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	055b      	lsls	r3, r3, #21
 8004a76:	4013      	ands	r3, r2
 8004a78:	d008      	beq.n	8004a8c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	0010      	movs	r0, r2
 8004a8a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2290      	movs	r2, #144	; 0x90
 8004a90:	589b      	ldr	r3, [r3, r2]
 8004a92:	2194      	movs	r1, #148	; 0x94
 8004a94:	187a      	adds	r2, r7, r1
 8004a96:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2240      	movs	r2, #64	; 0x40
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d004      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aa6:	187b      	adds	r3, r7, r1
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2228      	movs	r2, #40	; 0x28
 8004aac:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aae:	d04c      	beq.n	8004b4a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 ff5c 	bl	8005970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d13c      	bne.n	8004b40 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aca:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ace:	2090      	movs	r0, #144	; 0x90
 8004ad0:	183a      	adds	r2, r7, r0
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2140      	movs	r1, #64	; 0x40
 8004aec:	438a      	bics	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	183b      	adds	r3, r7, r0
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004af8:	f383 8810 	msr	PRIMASK, r3
}
 8004afc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	589b      	ldr	r3, [r3, r2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d016      	beq.n	8004b36 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	589b      	ldr	r3, [r3, r2]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_UART_IRQHandler+0x2c8>)
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	589b      	ldr	r3, [r3, r2]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fd fa93 	bl	8002044 <HAL_DMA_Abort_IT>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d01c      	beq.n	8004b5c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2280      	movs	r2, #128	; 0x80
 8004b26:	589b      	ldr	r3, [r3, r2]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	5852      	ldr	r2, [r2, r1]
 8004b30:	0010      	movs	r0, r2
 8004b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	e012      	b.n	8004b5c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 f9e1 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	e00d      	b.n	8004b5c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	0018      	movs	r0, r3
 8004b44:	f000 f9dc 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	e008      	b.n	8004b5c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 f9d7 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2290      	movs	r2, #144	; 0x90
 8004b56:	2100      	movs	r1, #0
 8004b58:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b5a:	e1b9      	b.n	8004ed0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	46c0      	nop			; (mov r8, r8)
    return;
 8004b5e:	e1b7      	b.n	8004ed0 <HAL_UART_IRQHandler+0x62c>
 8004b60:	0000080f 	.word	0x0000080f
 8004b64:	10000001 	.word	0x10000001
 8004b68:	04000120 	.word	0x04000120
 8004b6c:	08005a3d 	.word	0x08005a3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d000      	beq.n	8004b7a <HAL_UART_IRQHandler+0x2d6>
 8004b78:	e13e      	b.n	8004df8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b7a:	23a4      	movs	r3, #164	; 0xa4
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2210      	movs	r2, #16
 8004b82:	4013      	ands	r3, r2
 8004b84:	d100      	bne.n	8004b88 <HAL_UART_IRQHandler+0x2e4>
 8004b86:	e137      	b.n	8004df8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b88:	23a0      	movs	r3, #160	; 0xa0
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	4013      	ands	r3, r2
 8004b92:	d100      	bne.n	8004b96 <HAL_UART_IRQHandler+0x2f2>
 8004b94:	e130      	b.n	8004df8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2240      	movs	r2, #64	; 0x40
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d000      	beq.n	8004bae <HAL_UART_IRQHandler+0x30a>
 8004bac:	e0a4      	b.n	8004cf8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	589b      	ldr	r3, [r3, r2]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	217e      	movs	r1, #126	; 0x7e
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d100      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x324>
 8004bc6:	e185      	b.n	8004ed4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	225c      	movs	r2, #92	; 0x5c
 8004bcc:	5a9b      	ldrh	r3, [r3, r2]
 8004bce:	187a      	adds	r2, r7, r1
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d300      	bcc.n	8004bd8 <HAL_UART_IRQHandler+0x334>
 8004bd6:	e17d      	b.n	8004ed4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	187a      	adds	r2, r7, r1
 8004bdc:	215e      	movs	r1, #94	; 0x5e
 8004bde:	8812      	ldrh	r2, [r2, #0]
 8004be0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	589b      	ldr	r3, [r3, r2]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2220      	movs	r2, #32
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d170      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	49b4      	ldr	r1, [pc, #720]	; (8004ee4 <HAL_UART_IRQHandler+0x640>)
 8004c14:	400a      	ands	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	f383 8810 	msr	PRIMASK, r3
}
 8004c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c24:	f3ef 8310 	mrs	r3, PRIMASK
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c2e:	2301      	movs	r3, #1
 8004c30:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c34:	f383 8810 	msr	PRIMASK, r3
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2101      	movs	r1, #1
 8004c46:	438a      	bics	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c56:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c60:	2301      	movs	r3, #1
 8004c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c66:	f383 8810 	msr	PRIMASK, r3
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2140      	movs	r1, #64	; 0x40
 8004c78:	438a      	bics	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c7e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	f383 8810 	msr	PRIMASK, r3
}
 8004c86:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	228c      	movs	r2, #140	; 0x8c
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c96:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca6:	f383 8810 	msr	PRIMASK, r3
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2110      	movs	r1, #16
 8004cb8:	438a      	bics	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	f383 8810 	msr	PRIMASK, r3
}
 8004cc6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	589b      	ldr	r3, [r3, r2]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7fd f958 	bl	8001f84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	225c      	movs	r2, #92	; 0x5c
 8004cde:	5a9a      	ldrh	r2, [r3, r2]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	215e      	movs	r1, #94	; 0x5e
 8004ce4:	5a5b      	ldrh	r3, [r3, r1]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f000 f90d 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cf6:	e0ed      	b.n	8004ed4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	225c      	movs	r2, #92	; 0x5c
 8004cfc:	5a99      	ldrh	r1, [r3, r2]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	225e      	movs	r2, #94	; 0x5e
 8004d02:	5a9b      	ldrh	r3, [r3, r2]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	208e      	movs	r0, #142	; 0x8e
 8004d08:	183b      	adds	r3, r7, r0
 8004d0a:	1a8a      	subs	r2, r1, r2
 8004d0c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	225e      	movs	r2, #94	; 0x5e
 8004d12:	5a9b      	ldrh	r3, [r3, r2]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d100      	bne.n	8004d1c <HAL_UART_IRQHandler+0x478>
 8004d1a:	e0dd      	b.n	8004ed8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004d1c:	183b      	adds	r3, r7, r0
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d100      	bne.n	8004d26 <HAL_UART_IRQHandler+0x482>
 8004d24:	e0d8      	b.n	8004ed8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d26:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d2e:	2488      	movs	r4, #136	; 0x88
 8004d30:	193a      	adds	r2, r7, r4
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f383 8810 	msr	PRIMASK, r3
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4967      	ldr	r1, [pc, #412]	; (8004ee8 <HAL_UART_IRQHandler+0x644>)
 8004d4c:	400a      	ands	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d62:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d64:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d66:	2484      	movs	r4, #132	; 0x84
 8004d68:	193a      	adds	r2, r7, r4
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	495a      	ldr	r1, [pc, #360]	; (8004eec <HAL_UART_IRQHandler+0x648>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	193b      	adds	r3, r7, r4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f383 8810 	msr	PRIMASK, r3
}
 8004d94:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	228c      	movs	r2, #140	; 0x8c
 8004d9a:	2120      	movs	r1, #32
 8004d9c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004daa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db2:	2480      	movs	r4, #128	; 0x80
 8004db4:	193a      	adds	r2, r7, r4
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	2301      	movs	r3, #1
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	f383 8810 	msr	PRIMASK, r3
}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2110      	movs	r1, #16
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	193b      	adds	r3, r7, r4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	f383 8810 	msr	PRIMASK, r3
}
 8004de0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de8:	183b      	adds	r3, r7, r0
 8004dea:	881a      	ldrh	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	0011      	movs	r1, r2
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f88d 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004df6:	e06f      	b.n	8004ed8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004df8:	23a4      	movs	r3, #164	; 0xa4
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	035b      	lsls	r3, r3, #13
 8004e02:	4013      	ands	r3, r2
 8004e04:	d010      	beq.n	8004e28 <HAL_UART_IRQHandler+0x584>
 8004e06:	239c      	movs	r3, #156	; 0x9c
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	03db      	lsls	r3, r3, #15
 8004e10:	4013      	ands	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2280      	movs	r2, #128	; 0x80
 8004e1a:	0352      	lsls	r2, r2, #13
 8004e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fe4e 	bl	8005ac2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e26:	e05a      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e28:	23a4      	movs	r3, #164	; 0xa4
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	4013      	ands	r3, r2
 8004e32:	d016      	beq.n	8004e62 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e34:	23a0      	movs	r3, #160	; 0xa0
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d106      	bne.n	8004e4e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e40:	239c      	movs	r3, #156	; 0x9c
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d042      	beq.n	8004edc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	4798      	blx	r3
    }
    return;
 8004e60:	e03c      	b.n	8004edc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e62:	23a4      	movs	r3, #164	; 0xa4
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2240      	movs	r2, #64	; 0x40
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d00a      	beq.n	8004e84 <HAL_UART_IRQHandler+0x5e0>
 8004e6e:	23a0      	movs	r3, #160	; 0xa0
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	4013      	ands	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f000 fdf4 	bl	8005a6a <UART_EndTransmit_IT>
    return;
 8004e82:	e02c      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e84:	23a4      	movs	r3, #164	; 0xa4
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <HAL_UART_IRQHandler+0x606>
 8004e92:	23a0      	movs	r3, #160	; 0xa0
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	05db      	lsls	r3, r3, #23
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 fe1d 	bl	8005ae2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ea8:	e019      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004eaa:	23a4      	movs	r3, #164	; 0xa4
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	045b      	lsls	r3, r3, #17
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d012      	beq.n	8004ede <HAL_UART_IRQHandler+0x63a>
 8004eb8:	23a0      	movs	r3, #160	; 0xa0
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da0d      	bge.n	8004ede <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 fe04 	bl	8005ad2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eca:	e008      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
      return;
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	e006      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
    return;
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	e004      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
      return;
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	e002      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
      return;
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	e000      	b.n	8004ede <HAL_UART_IRQHandler+0x63a>
    return;
 8004edc:	46c0      	nop			; (mov r8, r8)
  }
}
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b02a      	add	sp, #168	; 0xa8
 8004ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee4:	fffffeff 	.word	0xfffffeff
 8004ee8:	fffffedf 	.word	0xfffffedf
 8004eec:	effffffe 	.word	0xeffffffe

08004ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	000a      	movs	r2, r1
 8004f1a:	1cbb      	adds	r3, r7, #2
 8004f1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b002      	add	sp, #8
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b5b0      	push	{r4, r5, r7, lr}
 8004f2a:	b090      	sub	sp, #64	; 0x40
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f30:	231a      	movs	r3, #26
 8004f32:	2220      	movs	r2, #32
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	19db      	adds	r3, r3, r7
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4ac1      	ldr	r2, [pc, #772]	; (8005260 <UART_SetConfig+0x338>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4abc      	ldr	r2, [pc, #752]	; (8005264 <UART_SetConfig+0x33c>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	0018      	movs	r0, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	68d9      	ldr	r1, [r3, #12]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	0003      	movs	r3, r0
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4ab6      	ldr	r2, [pc, #728]	; (8005268 <UART_SetConfig+0x340>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <UART_SetConfig+0x80>
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4ab4      	ldr	r2, [pc, #720]	; (800526c <UART_SetConfig+0x344>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4ab0      	ldr	r2, [pc, #704]	; (8005270 <UART_SetConfig+0x348>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	220f      	movs	r2, #15
 8004fc6:	4393      	bics	r3, r2
 8004fc8:	0018      	movs	r0, r3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4aa5      	ldr	r2, [pc, #660]	; (8005274 <UART_SetConfig+0x34c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d131      	bne.n	8005046 <UART_SetConfig+0x11e>
 8004fe2:	4ba5      	ldr	r3, [pc, #660]	; (8005278 <UART_SetConfig+0x350>)
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d01d      	beq.n	800502a <UART_SetConfig+0x102>
 8004fee:	d823      	bhi.n	8005038 <UART_SetConfig+0x110>
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d00c      	beq.n	800500e <UART_SetConfig+0xe6>
 8004ff4:	d820      	bhi.n	8005038 <UART_SetConfig+0x110>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <UART_SetConfig+0xd8>
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d00e      	beq.n	800501c <UART_SetConfig+0xf4>
 8004ffe:	e01b      	b.n	8005038 <UART_SetConfig+0x110>
 8005000:	231b      	movs	r3, #27
 8005002:	2220      	movs	r2, #32
 8005004:	189b      	adds	r3, r3, r2
 8005006:	19db      	adds	r3, r3, r7
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e154      	b.n	80052b8 <UART_SetConfig+0x390>
 800500e:	231b      	movs	r3, #27
 8005010:	2220      	movs	r2, #32
 8005012:	189b      	adds	r3, r3, r2
 8005014:	19db      	adds	r3, r3, r7
 8005016:	2202      	movs	r2, #2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e14d      	b.n	80052b8 <UART_SetConfig+0x390>
 800501c:	231b      	movs	r3, #27
 800501e:	2220      	movs	r2, #32
 8005020:	189b      	adds	r3, r3, r2
 8005022:	19db      	adds	r3, r3, r7
 8005024:	2204      	movs	r2, #4
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e146      	b.n	80052b8 <UART_SetConfig+0x390>
 800502a:	231b      	movs	r3, #27
 800502c:	2220      	movs	r2, #32
 800502e:	189b      	adds	r3, r3, r2
 8005030:	19db      	adds	r3, r3, r7
 8005032:	2208      	movs	r2, #8
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e13f      	b.n	80052b8 <UART_SetConfig+0x390>
 8005038:	231b      	movs	r3, #27
 800503a:	2220      	movs	r2, #32
 800503c:	189b      	adds	r3, r3, r2
 800503e:	19db      	adds	r3, r3, r7
 8005040:	2210      	movs	r2, #16
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e138      	b.n	80052b8 <UART_SetConfig+0x390>
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a8c      	ldr	r2, [pc, #560]	; (800527c <UART_SetConfig+0x354>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d131      	bne.n	80050b4 <UART_SetConfig+0x18c>
 8005050:	4b89      	ldr	r3, [pc, #548]	; (8005278 <UART_SetConfig+0x350>)
 8005052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005054:	220c      	movs	r2, #12
 8005056:	4013      	ands	r3, r2
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d01d      	beq.n	8005098 <UART_SetConfig+0x170>
 800505c:	d823      	bhi.n	80050a6 <UART_SetConfig+0x17e>
 800505e:	2b08      	cmp	r3, #8
 8005060:	d00c      	beq.n	800507c <UART_SetConfig+0x154>
 8005062:	d820      	bhi.n	80050a6 <UART_SetConfig+0x17e>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <UART_SetConfig+0x146>
 8005068:	2b04      	cmp	r3, #4
 800506a:	d00e      	beq.n	800508a <UART_SetConfig+0x162>
 800506c:	e01b      	b.n	80050a6 <UART_SetConfig+0x17e>
 800506e:	231b      	movs	r3, #27
 8005070:	2220      	movs	r2, #32
 8005072:	189b      	adds	r3, r3, r2
 8005074:	19db      	adds	r3, r3, r7
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	e11d      	b.n	80052b8 <UART_SetConfig+0x390>
 800507c:	231b      	movs	r3, #27
 800507e:	2220      	movs	r2, #32
 8005080:	189b      	adds	r3, r3, r2
 8005082:	19db      	adds	r3, r3, r7
 8005084:	2202      	movs	r2, #2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e116      	b.n	80052b8 <UART_SetConfig+0x390>
 800508a:	231b      	movs	r3, #27
 800508c:	2220      	movs	r2, #32
 800508e:	189b      	adds	r3, r3, r2
 8005090:	19db      	adds	r3, r3, r7
 8005092:	2204      	movs	r2, #4
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e10f      	b.n	80052b8 <UART_SetConfig+0x390>
 8005098:	231b      	movs	r3, #27
 800509a:	2220      	movs	r2, #32
 800509c:	189b      	adds	r3, r3, r2
 800509e:	19db      	adds	r3, r3, r7
 80050a0:	2208      	movs	r2, #8
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e108      	b.n	80052b8 <UART_SetConfig+0x390>
 80050a6:	231b      	movs	r3, #27
 80050a8:	2220      	movs	r2, #32
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	19db      	adds	r3, r3, r7
 80050ae:	2210      	movs	r2, #16
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	e101      	b.n	80052b8 <UART_SetConfig+0x390>
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a71      	ldr	r2, [pc, #452]	; (8005280 <UART_SetConfig+0x358>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d131      	bne.n	8005122 <UART_SetConfig+0x1fa>
 80050be:	4b6e      	ldr	r3, [pc, #440]	; (8005278 <UART_SetConfig+0x350>)
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	2230      	movs	r2, #48	; 0x30
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b30      	cmp	r3, #48	; 0x30
 80050c8:	d01d      	beq.n	8005106 <UART_SetConfig+0x1de>
 80050ca:	d823      	bhi.n	8005114 <UART_SetConfig+0x1ec>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d00c      	beq.n	80050ea <UART_SetConfig+0x1c2>
 80050d0:	d820      	bhi.n	8005114 <UART_SetConfig+0x1ec>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <UART_SetConfig+0x1b4>
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d00e      	beq.n	80050f8 <UART_SetConfig+0x1d0>
 80050da:	e01b      	b.n	8005114 <UART_SetConfig+0x1ec>
 80050dc:	231b      	movs	r3, #27
 80050de:	2220      	movs	r2, #32
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	19db      	adds	r3, r3, r7
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e0e6      	b.n	80052b8 <UART_SetConfig+0x390>
 80050ea:	231b      	movs	r3, #27
 80050ec:	2220      	movs	r2, #32
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	19db      	adds	r3, r3, r7
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e0df      	b.n	80052b8 <UART_SetConfig+0x390>
 80050f8:	231b      	movs	r3, #27
 80050fa:	2220      	movs	r2, #32
 80050fc:	189b      	adds	r3, r3, r2
 80050fe:	19db      	adds	r3, r3, r7
 8005100:	2204      	movs	r2, #4
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e0d8      	b.n	80052b8 <UART_SetConfig+0x390>
 8005106:	231b      	movs	r3, #27
 8005108:	2220      	movs	r2, #32
 800510a:	189b      	adds	r3, r3, r2
 800510c:	19db      	adds	r3, r3, r7
 800510e:	2208      	movs	r2, #8
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e0d1      	b.n	80052b8 <UART_SetConfig+0x390>
 8005114:	231b      	movs	r3, #27
 8005116:	2220      	movs	r2, #32
 8005118:	189b      	adds	r3, r3, r2
 800511a:	19db      	adds	r3, r3, r7
 800511c:	2210      	movs	r2, #16
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e0ca      	b.n	80052b8 <UART_SetConfig+0x390>
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a57      	ldr	r2, [pc, #348]	; (8005284 <UART_SetConfig+0x35c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d106      	bne.n	800513a <UART_SetConfig+0x212>
 800512c:	231b      	movs	r3, #27
 800512e:	2220      	movs	r2, #32
 8005130:	189b      	adds	r3, r3, r2
 8005132:	19db      	adds	r3, r3, r7
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e0be      	b.n	80052b8 <UART_SetConfig+0x390>
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a52      	ldr	r2, [pc, #328]	; (8005288 <UART_SetConfig+0x360>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d106      	bne.n	8005152 <UART_SetConfig+0x22a>
 8005144:	231b      	movs	r3, #27
 8005146:	2220      	movs	r2, #32
 8005148:	189b      	adds	r3, r3, r2
 800514a:	19db      	adds	r3, r3, r7
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e0b2      	b.n	80052b8 <UART_SetConfig+0x390>
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a4d      	ldr	r2, [pc, #308]	; (800528c <UART_SetConfig+0x364>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d106      	bne.n	800516a <UART_SetConfig+0x242>
 800515c:	231b      	movs	r3, #27
 800515e:	2220      	movs	r2, #32
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e0a6      	b.n	80052b8 <UART_SetConfig+0x390>
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3e      	ldr	r2, [pc, #248]	; (8005268 <UART_SetConfig+0x340>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d13e      	bne.n	80051f2 <UART_SetConfig+0x2ca>
 8005174:	4b40      	ldr	r3, [pc, #256]	; (8005278 <UART_SetConfig+0x350>)
 8005176:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005178:	23c0      	movs	r3, #192	; 0xc0
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	4013      	ands	r3, r2
 800517e:	22c0      	movs	r2, #192	; 0xc0
 8005180:	0112      	lsls	r2, r2, #4
 8005182:	4293      	cmp	r3, r2
 8005184:	d027      	beq.n	80051d6 <UART_SetConfig+0x2ae>
 8005186:	22c0      	movs	r2, #192	; 0xc0
 8005188:	0112      	lsls	r2, r2, #4
 800518a:	4293      	cmp	r3, r2
 800518c:	d82a      	bhi.n	80051e4 <UART_SetConfig+0x2bc>
 800518e:	2280      	movs	r2, #128	; 0x80
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	4293      	cmp	r3, r2
 8005194:	d011      	beq.n	80051ba <UART_SetConfig+0x292>
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	4293      	cmp	r3, r2
 800519c:	d822      	bhi.n	80051e4 <UART_SetConfig+0x2bc>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <UART_SetConfig+0x284>
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	00d2      	lsls	r2, r2, #3
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00e      	beq.n	80051c8 <UART_SetConfig+0x2a0>
 80051aa:	e01b      	b.n	80051e4 <UART_SetConfig+0x2bc>
 80051ac:	231b      	movs	r3, #27
 80051ae:	2220      	movs	r2, #32
 80051b0:	189b      	adds	r3, r3, r2
 80051b2:	19db      	adds	r3, r3, r7
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e07e      	b.n	80052b8 <UART_SetConfig+0x390>
 80051ba:	231b      	movs	r3, #27
 80051bc:	2220      	movs	r2, #32
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	19db      	adds	r3, r3, r7
 80051c2:	2202      	movs	r2, #2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e077      	b.n	80052b8 <UART_SetConfig+0x390>
 80051c8:	231b      	movs	r3, #27
 80051ca:	2220      	movs	r2, #32
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	2204      	movs	r2, #4
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e070      	b.n	80052b8 <UART_SetConfig+0x390>
 80051d6:	231b      	movs	r3, #27
 80051d8:	2220      	movs	r2, #32
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	19db      	adds	r3, r3, r7
 80051de:	2208      	movs	r2, #8
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e069      	b.n	80052b8 <UART_SetConfig+0x390>
 80051e4:	231b      	movs	r3, #27
 80051e6:	2220      	movs	r2, #32
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	2210      	movs	r2, #16
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e062      	b.n	80052b8 <UART_SetConfig+0x390>
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1d      	ldr	r2, [pc, #116]	; (800526c <UART_SetConfig+0x344>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d157      	bne.n	80052ac <UART_SetConfig+0x384>
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <UART_SetConfig+0x350>)
 80051fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005200:	23c0      	movs	r3, #192	; 0xc0
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4013      	ands	r3, r2
 8005206:	22c0      	movs	r2, #192	; 0xc0
 8005208:	0092      	lsls	r2, r2, #2
 800520a:	4293      	cmp	r3, r2
 800520c:	d040      	beq.n	8005290 <UART_SetConfig+0x368>
 800520e:	22c0      	movs	r2, #192	; 0xc0
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	4293      	cmp	r3, r2
 8005214:	d843      	bhi.n	800529e <UART_SetConfig+0x376>
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	0092      	lsls	r2, r2, #2
 800521a:	4293      	cmp	r3, r2
 800521c:	d011      	beq.n	8005242 <UART_SetConfig+0x31a>
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	0092      	lsls	r2, r2, #2
 8005222:	4293      	cmp	r3, r2
 8005224:	d83b      	bhi.n	800529e <UART_SetConfig+0x376>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <UART_SetConfig+0x30c>
 800522a:	2280      	movs	r2, #128	; 0x80
 800522c:	0052      	lsls	r2, r2, #1
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <UART_SetConfig+0x328>
 8005232:	e034      	b.n	800529e <UART_SetConfig+0x376>
 8005234:	231b      	movs	r3, #27
 8005236:	2220      	movs	r2, #32
 8005238:	189b      	adds	r3, r3, r2
 800523a:	19db      	adds	r3, r3, r7
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e03a      	b.n	80052b8 <UART_SetConfig+0x390>
 8005242:	231b      	movs	r3, #27
 8005244:	2220      	movs	r2, #32
 8005246:	189b      	adds	r3, r3, r2
 8005248:	19db      	adds	r3, r3, r7
 800524a:	2202      	movs	r2, #2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e033      	b.n	80052b8 <UART_SetConfig+0x390>
 8005250:	231b      	movs	r3, #27
 8005252:	2220      	movs	r2, #32
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2204      	movs	r2, #4
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e02c      	b.n	80052b8 <UART_SetConfig+0x390>
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	cfff69f3 	.word	0xcfff69f3
 8005264:	ffffcfff 	.word	0xffffcfff
 8005268:	40008000 	.word	0x40008000
 800526c:	40008400 	.word	0x40008400
 8005270:	11fff4ff 	.word	0x11fff4ff
 8005274:	40013800 	.word	0x40013800
 8005278:	40021000 	.word	0x40021000
 800527c:	40004400 	.word	0x40004400
 8005280:	40004800 	.word	0x40004800
 8005284:	40004c00 	.word	0x40004c00
 8005288:	40005000 	.word	0x40005000
 800528c:	40013c00 	.word	0x40013c00
 8005290:	231b      	movs	r3, #27
 8005292:	2220      	movs	r2, #32
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	2208      	movs	r2, #8
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e00c      	b.n	80052b8 <UART_SetConfig+0x390>
 800529e:	231b      	movs	r3, #27
 80052a0:	2220      	movs	r2, #32
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	2210      	movs	r2, #16
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e005      	b.n	80052b8 <UART_SetConfig+0x390>
 80052ac:	231b      	movs	r3, #27
 80052ae:	2220      	movs	r2, #32
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2210      	movs	r2, #16
 80052b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4ac1      	ldr	r2, [pc, #772]	; (80055c4 <UART_SetConfig+0x69c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d005      	beq.n	80052ce <UART_SetConfig+0x3a6>
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4ac0      	ldr	r2, [pc, #768]	; (80055c8 <UART_SetConfig+0x6a0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d000      	beq.n	80052ce <UART_SetConfig+0x3a6>
 80052cc:	e093      	b.n	80053f6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052ce:	231b      	movs	r3, #27
 80052d0:	2220      	movs	r2, #32
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	19db      	adds	r3, r3, r7
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d015      	beq.n	8005308 <UART_SetConfig+0x3e0>
 80052dc:	dc18      	bgt.n	8005310 <UART_SetConfig+0x3e8>
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d00d      	beq.n	80052fe <UART_SetConfig+0x3d6>
 80052e2:	dc15      	bgt.n	8005310 <UART_SetConfig+0x3e8>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <UART_SetConfig+0x3c6>
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d005      	beq.n	80052f8 <UART_SetConfig+0x3d0>
 80052ec:	e010      	b.n	8005310 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fd fe13 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80052f2:	0003      	movs	r3, r0
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f6:	e014      	b.n	8005322 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4bb4      	ldr	r3, [pc, #720]	; (80055cc <UART_SetConfig+0x6a4>)
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052fc:	e011      	b.n	8005322 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fd fd7f 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8005302:	0003      	movs	r3, r0
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005306:	e00c      	b.n	8005322 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800530e:	e008      	b.n	8005322 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005314:	231a      	movs	r3, #26
 8005316:	2220      	movs	r2, #32
 8005318:	189b      	adds	r3, r3, r2
 800531a:	19db      	adds	r3, r3, r7
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
        break;
 8005320:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	2b00      	cmp	r3, #0
 8005326:	d100      	bne.n	800532a <UART_SetConfig+0x402>
 8005328:	e135      	b.n	8005596 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532e:	4ba8      	ldr	r3, [pc, #672]	; (80055d0 <UART_SetConfig+0x6a8>)
 8005330:	0052      	lsls	r2, r2, #1
 8005332:	5ad3      	ldrh	r3, [r2, r3]
 8005334:	0019      	movs	r1, r3
 8005336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005338:	f7fa fee4 	bl	8000104 <__udivsi3>
 800533c:	0003      	movs	r3, r0
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	0013      	movs	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	189b      	adds	r3, r3, r2
 800534a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534c:	429a      	cmp	r2, r3
 800534e:	d305      	bcc.n	800535c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	429a      	cmp	r2, r3
 800535a:	d906      	bls.n	800536a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800535c:	231a      	movs	r3, #26
 800535e:	2220      	movs	r2, #32
 8005360:	189b      	adds	r3, r3, r2
 8005362:	19db      	adds	r3, r3, r7
 8005364:	2201      	movs	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e044      	b.n	80053f4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005376:	4b96      	ldr	r3, [pc, #600]	; (80055d0 <UART_SetConfig+0x6a8>)
 8005378:	0052      	lsls	r2, r2, #1
 800537a:	5ad3      	ldrh	r3, [r2, r3]
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	69b8      	ldr	r0, [r7, #24]
 8005388:	69f9      	ldr	r1, [r7, #28]
 800538a:	f7fb f831 	bl	80003f0 <__aeabi_uldivmod>
 800538e:	0002      	movs	r2, r0
 8005390:	000b      	movs	r3, r1
 8005392:	0e11      	lsrs	r1, r2, #24
 8005394:	021d      	lsls	r5, r3, #8
 8005396:	430d      	orrs	r5, r1
 8005398:	0214      	lsls	r4, r2, #8
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	68b8      	ldr	r0, [r7, #8]
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	1900      	adds	r0, r0, r4
 80053ac:	4169      	adcs	r1, r5
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f7fb f818 	bl	80003f0 <__aeabi_uldivmod>
 80053c0:	0002      	movs	r2, r0
 80053c2:	000b      	movs	r3, r1
 80053c4:	0013      	movs	r3, r2
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	23c0      	movs	r3, #192	; 0xc0
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d309      	bcc.n	80053e6 <UART_SetConfig+0x4be>
 80053d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	035b      	lsls	r3, r3, #13
 80053d8:	429a      	cmp	r2, r3
 80053da:	d204      	bcs.n	80053e6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	e006      	b.n	80053f4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80053e6:	231a      	movs	r3, #26
 80053e8:	2220      	movs	r2, #32
 80053ea:	189b      	adds	r3, r3, r2
 80053ec:	19db      	adds	r3, r3, r7
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80053f2:	e0d0      	b.n	8005596 <UART_SetConfig+0x66e>
 80053f4:	e0cf      	b.n	8005596 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	429a      	cmp	r2, r3
 8005400:	d000      	beq.n	8005404 <UART_SetConfig+0x4dc>
 8005402:	e070      	b.n	80054e6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005404:	231b      	movs	r3, #27
 8005406:	2220      	movs	r2, #32
 8005408:	189b      	adds	r3, r3, r2
 800540a:	19db      	adds	r3, r3, r7
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b08      	cmp	r3, #8
 8005410:	d015      	beq.n	800543e <UART_SetConfig+0x516>
 8005412:	dc18      	bgt.n	8005446 <UART_SetConfig+0x51e>
 8005414:	2b04      	cmp	r3, #4
 8005416:	d00d      	beq.n	8005434 <UART_SetConfig+0x50c>
 8005418:	dc15      	bgt.n	8005446 <UART_SetConfig+0x51e>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <UART_SetConfig+0x4fc>
 800541e:	2b02      	cmp	r3, #2
 8005420:	d005      	beq.n	800542e <UART_SetConfig+0x506>
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005424:	f7fd fd78 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8005428:	0003      	movs	r3, r0
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800542c:	e014      	b.n	8005458 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542e:	4b67      	ldr	r3, [pc, #412]	; (80055cc <UART_SetConfig+0x6a4>)
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005432:	e011      	b.n	8005458 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005434:	f7fd fce4 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8005438:	0003      	movs	r3, r0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800543c:	e00c      	b.n	8005458 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005444:	e008      	b.n	8005458 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800544a:	231a      	movs	r3, #26
 800544c:	2220      	movs	r2, #32
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
        break;
 8005456:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	2b00      	cmp	r3, #0
 800545c:	d100      	bne.n	8005460 <UART_SetConfig+0x538>
 800545e:	e09a      	b.n	8005596 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005464:	4b5a      	ldr	r3, [pc, #360]	; (80055d0 <UART_SetConfig+0x6a8>)
 8005466:	0052      	lsls	r2, r2, #1
 8005468:	5ad3      	ldrh	r3, [r2, r3]
 800546a:	0019      	movs	r1, r3
 800546c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800546e:	f7fa fe49 	bl	8000104 <__udivsi3>
 8005472:	0003      	movs	r3, r0
 8005474:	005a      	lsls	r2, r3, #1
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	18d2      	adds	r2, r2, r3
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	0019      	movs	r1, r3
 8005484:	0010      	movs	r0, r2
 8005486:	f7fa fe3d 	bl	8000104 <__udivsi3>
 800548a:	0003      	movs	r3, r0
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	2b0f      	cmp	r3, #15
 8005492:	d921      	bls.n	80054d8 <UART_SetConfig+0x5b0>
 8005494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	429a      	cmp	r2, r3
 800549c:	d21c      	bcs.n	80054d8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	200e      	movs	r0, #14
 80054a4:	2420      	movs	r4, #32
 80054a6:	1903      	adds	r3, r0, r4
 80054a8:	19db      	adds	r3, r3, r7
 80054aa:	210f      	movs	r1, #15
 80054ac:	438a      	bics	r2, r1
 80054ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2207      	movs	r2, #7
 80054b8:	4013      	ands	r3, r2
 80054ba:	b299      	uxth	r1, r3
 80054bc:	1903      	adds	r3, r0, r4
 80054be:	19db      	adds	r3, r3, r7
 80054c0:	1902      	adds	r2, r0, r4
 80054c2:	19d2      	adds	r2, r2, r7
 80054c4:	8812      	ldrh	r2, [r2, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	1902      	adds	r2, r0, r4
 80054d0:	19d2      	adds	r2, r2, r7
 80054d2:	8812      	ldrh	r2, [r2, #0]
 80054d4:	60da      	str	r2, [r3, #12]
 80054d6:	e05e      	b.n	8005596 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80054d8:	231a      	movs	r3, #26
 80054da:	2220      	movs	r2, #32
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	19db      	adds	r3, r3, r7
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e057      	b.n	8005596 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054e6:	231b      	movs	r3, #27
 80054e8:	2220      	movs	r2, #32
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	19db      	adds	r3, r3, r7
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d015      	beq.n	8005520 <UART_SetConfig+0x5f8>
 80054f4:	dc18      	bgt.n	8005528 <UART_SetConfig+0x600>
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d00d      	beq.n	8005516 <UART_SetConfig+0x5ee>
 80054fa:	dc15      	bgt.n	8005528 <UART_SetConfig+0x600>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <UART_SetConfig+0x5de>
 8005500:	2b02      	cmp	r3, #2
 8005502:	d005      	beq.n	8005510 <UART_SetConfig+0x5e8>
 8005504:	e010      	b.n	8005528 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005506:	f7fd fd07 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 800550a:	0003      	movs	r3, r0
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800550e:	e014      	b.n	800553a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <UART_SetConfig+0x6a4>)
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005514:	e011      	b.n	800553a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fd fc73 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 800551a:	0003      	movs	r3, r0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800551e:	e00c      	b.n	800553a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005526:	e008      	b.n	800553a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800552c:	231a      	movs	r3, #26
 800552e:	2220      	movs	r2, #32
 8005530:	189b      	adds	r3, r3, r2
 8005532:	19db      	adds	r3, r3, r7
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
        break;
 8005538:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02a      	beq.n	8005596 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <UART_SetConfig+0x6a8>)
 8005546:	0052      	lsls	r2, r2, #1
 8005548:	5ad3      	ldrh	r3, [r2, r3]
 800554a:	0019      	movs	r1, r3
 800554c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800554e:	f7fa fdd9 	bl	8000104 <__udivsi3>
 8005552:	0003      	movs	r3, r0
 8005554:	001a      	movs	r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	18d2      	adds	r2, r2, r3
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	0019      	movs	r1, r3
 8005564:	0010      	movs	r0, r2
 8005566:	f7fa fdcd 	bl	8000104 <__udivsi3>
 800556a:	0003      	movs	r3, r0
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	2b0f      	cmp	r3, #15
 8005572:	d90a      	bls.n	800558a <UART_SetConfig+0x662>
 8005574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	025b      	lsls	r3, r3, #9
 800557a:	429a      	cmp	r2, r3
 800557c:	d205      	bcs.n	800558a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	b29a      	uxth	r2, r3
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
 8005588:	e005      	b.n	8005596 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800558a:	231a      	movs	r3, #26
 800558c:	2220      	movs	r2, #32
 800558e:	189b      	adds	r3, r3, r2
 8005590:	19db      	adds	r3, r3, r7
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	226a      	movs	r2, #106	; 0x6a
 800559a:	2101      	movs	r1, #1
 800559c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	2268      	movs	r2, #104	; 0x68
 80055a2:	2101      	movs	r1, #1
 80055a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	2200      	movs	r2, #0
 80055aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	2200      	movs	r2, #0
 80055b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80055b2:	231a      	movs	r3, #26
 80055b4:	2220      	movs	r2, #32
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	19db      	adds	r3, r3, r7
 80055ba:	781b      	ldrb	r3, [r3, #0]
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b010      	add	sp, #64	; 0x40
 80055c2:	bdb0      	pop	{r4, r5, r7, pc}
 80055c4:	40008000 	.word	0x40008000
 80055c8:	40008400 	.word	0x40008400
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	08006318 	.word	0x08006318

080055d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	2208      	movs	r2, #8
 80055e2:	4013      	ands	r3, r2
 80055e4:	d00b      	beq.n	80055fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4a4a      	ldr	r2, [pc, #296]	; (8005718 <UART_AdvFeatureConfig+0x144>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	2201      	movs	r2, #1
 8005604:	4013      	ands	r3, r2
 8005606:	d00b      	beq.n	8005620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4a43      	ldr	r2, [pc, #268]	; (800571c <UART_AdvFeatureConfig+0x148>)
 8005610:	4013      	ands	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	2202      	movs	r2, #2
 8005626:	4013      	ands	r3, r2
 8005628:	d00b      	beq.n	8005642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a3b      	ldr	r2, [pc, #236]	; (8005720 <UART_AdvFeatureConfig+0x14c>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	2204      	movs	r2, #4
 8005648:	4013      	ands	r3, r2
 800564a:	d00b      	beq.n	8005664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4a34      	ldr	r2, [pc, #208]	; (8005724 <UART_AdvFeatureConfig+0x150>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	2210      	movs	r2, #16
 800566a:	4013      	ands	r3, r2
 800566c:	d00b      	beq.n	8005686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a2c      	ldr	r2, [pc, #176]	; (8005728 <UART_AdvFeatureConfig+0x154>)
 8005676:	4013      	ands	r3, r2
 8005678:	0019      	movs	r1, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	2220      	movs	r2, #32
 800568c:	4013      	ands	r3, r2
 800568e:	d00b      	beq.n	80056a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4a25      	ldr	r2, [pc, #148]	; (800572c <UART_AdvFeatureConfig+0x158>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	2240      	movs	r2, #64	; 0x40
 80056ae:	4013      	ands	r3, r2
 80056b0:	d01d      	beq.n	80056ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <UART_AdvFeatureConfig+0x15c>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	035b      	lsls	r3, r3, #13
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d10b      	bne.n	80056ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a15      	ldr	r2, [pc, #84]	; (8005734 <UART_AdvFeatureConfig+0x160>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	4013      	ands	r3, r2
 80056f6:	d00b      	beq.n	8005710 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <UART_AdvFeatureConfig+0x164>)
 8005700:	4013      	ands	r3, r2
 8005702:	0019      	movs	r1, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}
 8005718:	ffff7fff 	.word	0xffff7fff
 800571c:	fffdffff 	.word	0xfffdffff
 8005720:	fffeffff 	.word	0xfffeffff
 8005724:	fffbffff 	.word	0xfffbffff
 8005728:	ffffefff 	.word	0xffffefff
 800572c:	ffffdfff 	.word	0xffffdfff
 8005730:	ffefffff 	.word	0xffefffff
 8005734:	ff9fffff 	.word	0xff9fffff
 8005738:	fff7ffff 	.word	0xfff7ffff

0800573c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b092      	sub	sp, #72	; 0x48
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2290      	movs	r2, #144	; 0x90
 8005748:	2100      	movs	r1, #0
 800574a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800574c:	f7fc fb0e 	bl	8001d6c <HAL_GetTick>
 8005750:	0003      	movs	r3, r0
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2208      	movs	r2, #8
 800575c:	4013      	ands	r3, r2
 800575e:	2b08      	cmp	r3, #8
 8005760:	d12d      	bne.n	80057be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	0391      	lsls	r1, r2, #14
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4a47      	ldr	r2, [pc, #284]	; (8005888 <UART_CheckIdleState+0x14c>)
 800576c:	9200      	str	r2, [sp, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	f000 f88e 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 8005774:	1e03      	subs	r3, r0, #0
 8005776:	d022      	beq.n	80057be <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005778:	f3ef 8310 	mrs	r3, PRIMASK
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
 8005782:	2301      	movs	r3, #1
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	f383 8810 	msr	PRIMASK, r3
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	438a      	bics	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2288      	movs	r2, #136	; 0x88
 80057ae:	2120      	movs	r1, #32
 80057b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2284      	movs	r2, #132	; 0x84
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e060      	b.n	8005880 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2204      	movs	r2, #4
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d146      	bne.n	800585a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	2280      	movs	r2, #128	; 0x80
 80057d0:	03d1      	lsls	r1, r2, #15
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4a2c      	ldr	r2, [pc, #176]	; (8005888 <UART_CheckIdleState+0x14c>)
 80057d6:	9200      	str	r2, [sp, #0]
 80057d8:	2200      	movs	r2, #0
 80057da:	f000 f859 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d03b      	beq.n	800585a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e2:	f3ef 8310 	mrs	r3, PRIMASK
 80057e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80057e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
 80057ec:	2301      	movs	r3, #1
 80057ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4922      	ldr	r1, [pc, #136]	; (800588c <UART_CheckIdleState+0x150>)
 8005804:	400a      	ands	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005814:	f3ef 8310 	mrs	r3, PRIMASK
 8005818:	61bb      	str	r3, [r7, #24]
  return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	633b      	str	r3, [r7, #48]	; 0x30
 800581e:	2301      	movs	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2101      	movs	r1, #1
 8005836:	438a      	bics	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	228c      	movs	r2, #140	; 0x8c
 800584a:	2120      	movs	r1, #32
 800584c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2284      	movs	r2, #132	; 0x84
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e012      	b.n	8005880 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2288      	movs	r2, #136	; 0x88
 800585e:	2120      	movs	r1, #32
 8005860:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	228c      	movs	r2, #140	; 0x8c
 8005866:	2120      	movs	r1, #32
 8005868:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2284      	movs	r2, #132	; 0x84
 800587a:	2100      	movs	r1, #0
 800587c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	0018      	movs	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	b010      	add	sp, #64	; 0x40
 8005886:	bd80      	pop	{r7, pc}
 8005888:	01ffffff 	.word	0x01ffffff
 800588c:	fffffedf 	.word	0xfffffedf

08005890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	1dfb      	adds	r3, r7, #7
 800589e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	e051      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	3301      	adds	r3, #1
 80058a6:	d04e      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a8:	f7fc fa60 	bl	8001d6c <HAL_GetTick>
 80058ac:	0002      	movs	r2, r0
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <UART_WaitOnFlagUntilTimeout+0x2e>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e051      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2204      	movs	r2, #4
 80058ca:	4013      	ands	r3, r2
 80058cc:	d03b      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0xb6>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d038      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0xb6>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d035      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	2208      	movs	r2, #8
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d111      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2208      	movs	r2, #8
 80058ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f000 f83c 	bl	8005970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2290      	movs	r2, #144	; 0x90
 80058fc:	2108      	movs	r1, #8
 80058fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2284      	movs	r2, #132	; 0x84
 8005904:	2100      	movs	r1, #0
 8005906:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e02c      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	401a      	ands	r2, r3
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	429a      	cmp	r2, r3
 800591e:	d112      	bne.n	8005946 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	0112      	lsls	r2, r2, #4
 8005928:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	0018      	movs	r0, r3
 800592e:	f000 f81f 	bl	8005970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2290      	movs	r2, #144	; 0x90
 8005936:	2120      	movs	r1, #32
 8005938:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2284      	movs	r2, #132	; 0x84
 800593e:	2100      	movs	r1, #0
 8005940:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e00f      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	425a      	negs	r2, r3
 8005956:	4153      	adcs	r3, r2
 8005958:	b2db      	uxtb	r3, r3
 800595a:	001a      	movs	r2, r3
 800595c:	1dfb      	adds	r3, r7, #7
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d09e      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	0018      	movs	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	b004      	add	sp, #16
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005978:	f3ef 8310 	mrs	r3, PRIMASK
 800597c:	617b      	str	r3, [r7, #20]
  return(result);
 800597e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
 8005982:	2301      	movs	r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4926      	ldr	r1, [pc, #152]	; (8005a34 <UART_EndRxTransfer+0xc4>)
 800599a:	400a      	ands	r2, r1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f383 8810 	msr	PRIMASK, r3
}
 80059a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059aa:	f3ef 8310 	mrs	r3, PRIMASK
 80059ae:	623b      	str	r3, [r7, #32]
  return(result);
 80059b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
 80059b4:	2301      	movs	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	491b      	ldr	r1, [pc, #108]	; (8005a38 <UART_EndRxTransfer+0xc8>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d118      	bne.n	8005a16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ee:	2301      	movs	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2110      	movs	r1, #16
 8005a06:	438a      	bics	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	228c      	movs	r2, #140	; 0x8c
 8005a1a:	2120      	movs	r1, #32
 8005a1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b00e      	add	sp, #56	; 0x38
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	fffffedf 	.word	0xfffffedf
 8005a38:	effffffe 	.word	0xeffffffe

08005a3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	225e      	movs	r2, #94	; 0x5e
 8005a4e:	2100      	movs	r1, #0
 8005a50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2256      	movs	r2, #86	; 0x56
 8005a56:	2100      	movs	r1, #0
 8005a58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7ff fa4f 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b004      	add	sp, #16
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a72:	f3ef 8310 	mrs	r3, PRIMASK
 8005a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f383 8810 	msr	PRIMASK, r3
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2140      	movs	r1, #64	; 0x40
 8005a94:	438a      	bics	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f383 8810 	msr	PRIMASK, r3
}
 8005aa2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2288      	movs	r2, #136	; 0x88
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f7ff fa1b 	bl	8004ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b006      	add	sp, #24
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b002      	add	sp, #8
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2284      	movs	r2, #132	; 0x84
 8005b00:	5c9b      	ldrb	r3, [r3, r2]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e027      	b.n	8005b5a <HAL_UARTEx_DisableFifoMode+0x66>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2284      	movs	r2, #132	; 0x84
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2288      	movs	r2, #136	; 0x88
 8005b16:	2124      	movs	r1, #36	; 0x24
 8005b18:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	438a      	bics	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a0b      	ldr	r2, [pc, #44]	; (8005b64 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2288      	movs	r2, #136	; 0x88
 8005b4c:	2120      	movs	r1, #32
 8005b4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2284      	movs	r2, #132	; 0x84
 8005b54:	2100      	movs	r1, #0
 8005b56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	dfffffff 	.word	0xdfffffff

08005b68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2284      	movs	r2, #132	; 0x84
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e02e      	b.n	8005bde <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2284      	movs	r2, #132	; 0x84
 8005b84:	2101      	movs	r1, #1
 8005b86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2288      	movs	r2, #136	; 0x88
 8005b8c:	2124      	movs	r1, #36	; 0x24
 8005b8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	08d9      	lsrs	r1, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 f854 	bl	8005c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2288      	movs	r2, #136	; 0x88
 8005bd0:	2120      	movs	r1, #32
 8005bd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2284      	movs	r2, #132	; 0x84
 8005bd8:	2100      	movs	r1, #0
 8005bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b004      	add	sp, #16
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2284      	movs	r2, #132	; 0x84
 8005bf6:	5c9b      	ldrb	r3, [r3, r2]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e02f      	b.n	8005c60 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2284      	movs	r2, #132	; 0x84
 8005c04:	2101      	movs	r1, #1
 8005c06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2288      	movs	r2, #136	; 0x88
 8005c0c:	2124      	movs	r1, #36	; 0x24
 8005c0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2101      	movs	r1, #1
 8005c24:	438a      	bics	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	4a0e      	ldr	r2, [pc, #56]	; (8005c68 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 f813 	bl	8005c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2288      	movs	r2, #136	; 0x88
 8005c52:	2120      	movs	r1, #32
 8005c54:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2284      	movs	r2, #132	; 0x84
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	f1ffffff 	.word	0xf1ffffff

08005c6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	226a      	movs	r2, #106	; 0x6a
 8005c80:	2101      	movs	r1, #1
 8005c82:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2268      	movs	r2, #104	; 0x68
 8005c88:	2101      	movs	r1, #1
 8005c8a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c8c:	e043      	b.n	8005d16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c8e:	260f      	movs	r6, #15
 8005c90:	19bb      	adds	r3, r7, r6
 8005c92:	2208      	movs	r2, #8
 8005c94:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c96:	200e      	movs	r0, #14
 8005c98:	183b      	adds	r3, r7, r0
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	0e5b      	lsrs	r3, r3, #25
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	240d      	movs	r4, #13
 8005caa:	193b      	adds	r3, r7, r4
 8005cac:	2107      	movs	r1, #7
 8005cae:	400a      	ands	r2, r1
 8005cb0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	0f5b      	lsrs	r3, r3, #29
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	250c      	movs	r5, #12
 8005cbe:	197b      	adds	r3, r7, r5
 8005cc0:	2107      	movs	r1, #7
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cc6:	183b      	adds	r3, r7, r0
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	197a      	adds	r2, r7, r5
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	4914      	ldr	r1, [pc, #80]	; (8005d20 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cd0:	5c8a      	ldrb	r2, [r1, r2]
 8005cd2:	435a      	muls	r2, r3
 8005cd4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cd6:	197b      	adds	r3, r7, r5
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <UARTEx_SetNbDataToProcess+0xb8>)
 8005cdc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cde:	0019      	movs	r1, r3
 8005ce0:	f7fa fa9a 	bl	8000218 <__divsi3>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	b299      	uxth	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	226a      	movs	r2, #106	; 0x6a
 8005cec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cee:	19bb      	adds	r3, r7, r6
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	193a      	adds	r2, r7, r4
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	490a      	ldr	r1, [pc, #40]	; (8005d20 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cf8:	5c8a      	ldrb	r2, [r1, r2]
 8005cfa:	435a      	muls	r2, r3
 8005cfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <UARTEx_SetNbDataToProcess+0xb8>)
 8005d04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d06:	0019      	movs	r1, r3
 8005d08:	f7fa fa86 	bl	8000218 <__divsi3>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	b299      	uxth	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2268      	movs	r2, #104	; 0x68
 8005d14:	5299      	strh	r1, [r3, r2]
}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b005      	add	sp, #20
 8005d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	08006330 	.word	0x08006330
 8005d24:	08006338 	.word	0x08006338

08005d28 <atoi>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f000 f94f 	bl	8005fd0 <strtol>
 8005d32:	bd10      	pop	{r4, pc}

08005d34 <malloc>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <malloc+0x10>)
 8005d38:	0001      	movs	r1, r0
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	f000 f830 	bl	8005da0 <_malloc_r>
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	20000058 	.word	0x20000058

08005d48 <free>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <free+0x10>)
 8005d4c:	0001      	movs	r1, r0
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	f000 f99a 	bl	8006088 <_free_r>
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	20000058 	.word	0x20000058

08005d5c <sbrk_aligned>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4e0f      	ldr	r6, [pc, #60]	; (8005d9c <sbrk_aligned+0x40>)
 8005d60:	000d      	movs	r5, r1
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	0004      	movs	r4, r0
 8005d66:	2900      	cmp	r1, #0
 8005d68:	d102      	bne.n	8005d70 <sbrk_aligned+0x14>
 8005d6a:	f000 f945 	bl	8005ff8 <_sbrk_r>
 8005d6e:	6030      	str	r0, [r6, #0]
 8005d70:	0029      	movs	r1, r5
 8005d72:	0020      	movs	r0, r4
 8005d74:	f000 f940 	bl	8005ff8 <_sbrk_r>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d00a      	beq.n	8005d92 <sbrk_aligned+0x36>
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	1cc5      	adds	r5, r0, #3
 8005d80:	439d      	bics	r5, r3
 8005d82:	42a8      	cmp	r0, r5
 8005d84:	d007      	beq.n	8005d96 <sbrk_aligned+0x3a>
 8005d86:	1a29      	subs	r1, r5, r0
 8005d88:	0020      	movs	r0, r4
 8005d8a:	f000 f935 	bl	8005ff8 <_sbrk_r>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d101      	bne.n	8005d96 <sbrk_aligned+0x3a>
 8005d92:	2501      	movs	r5, #1
 8005d94:	426d      	negs	r5, r5
 8005d96:	0028      	movs	r0, r5
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	2000017c 	.word	0x2000017c

08005da0 <_malloc_r>:
 8005da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da2:	2203      	movs	r2, #3
 8005da4:	1ccb      	adds	r3, r1, #3
 8005da6:	4393      	bics	r3, r2
 8005da8:	3308      	adds	r3, #8
 8005daa:	0006      	movs	r6, r0
 8005dac:	001f      	movs	r7, r3
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d238      	bcs.n	8005e24 <_malloc_r+0x84>
 8005db2:	270c      	movs	r7, #12
 8005db4:	42b9      	cmp	r1, r7
 8005db6:	d837      	bhi.n	8005e28 <_malloc_r+0x88>
 8005db8:	0030      	movs	r0, r6
 8005dba:	f000 f873 	bl	8005ea4 <__malloc_lock>
 8005dbe:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <_malloc_r+0x100>)
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	001c      	movs	r4, r3
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	d133      	bne.n	8005e32 <_malloc_r+0x92>
 8005dca:	0039      	movs	r1, r7
 8005dcc:	0030      	movs	r0, r6
 8005dce:	f7ff ffc5 	bl	8005d5c <sbrk_aligned>
 8005dd2:	0004      	movs	r4, r0
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d15e      	bne.n	8005e96 <_malloc_r+0xf6>
 8005dd8:	9b00      	ldr	r3, [sp, #0]
 8005dda:	681c      	ldr	r4, [r3, #0]
 8005ddc:	0025      	movs	r5, r4
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	d14e      	bne.n	8005e80 <_malloc_r+0xe0>
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d051      	beq.n	8005e8a <_malloc_r+0xea>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	0029      	movs	r1, r5
 8005dea:	18e3      	adds	r3, r4, r3
 8005dec:	0030      	movs	r0, r6
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	f000 f902 	bl	8005ff8 <_sbrk_r>
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	4283      	cmp	r3, r0
 8005df8:	d147      	bne.n	8005e8a <_malloc_r+0xea>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	0030      	movs	r0, r6
 8005dfe:	1aff      	subs	r7, r7, r3
 8005e00:	0039      	movs	r1, r7
 8005e02:	f7ff ffab 	bl	8005d5c <sbrk_aligned>
 8005e06:	3001      	adds	r0, #1
 8005e08:	d03f      	beq.n	8005e8a <_malloc_r+0xea>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	19db      	adds	r3, r3, r7
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	9b00      	ldr	r3, [sp, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d040      	beq.n	8005e9a <_malloc_r+0xfa>
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	42a2      	cmp	r2, r4
 8005e1c:	d133      	bne.n	8005e86 <_malloc_r+0xe6>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	e014      	b.n	8005e4e <_malloc_r+0xae>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dac5      	bge.n	8005db4 <_malloc_r+0x14>
 8005e28:	230c      	movs	r3, #12
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	0028      	movs	r0, r5
 8005e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e32:	6821      	ldr	r1, [r4, #0]
 8005e34:	1bc9      	subs	r1, r1, r7
 8005e36:	d420      	bmi.n	8005e7a <_malloc_r+0xda>
 8005e38:	290b      	cmp	r1, #11
 8005e3a:	d918      	bls.n	8005e6e <_malloc_r+0xce>
 8005e3c:	19e2      	adds	r2, r4, r7
 8005e3e:	6027      	str	r7, [r4, #0]
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d112      	bne.n	8005e6a <_malloc_r+0xca>
 8005e44:	9b00      	ldr	r3, [sp, #0]
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	6011      	str	r1, [r2, #0]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	0030      	movs	r0, r6
 8005e50:	0025      	movs	r5, r4
 8005e52:	f000 f82f 	bl	8005eb4 <__malloc_unlock>
 8005e56:	2207      	movs	r2, #7
 8005e58:	350b      	adds	r5, #11
 8005e5a:	1d23      	adds	r3, r4, #4
 8005e5c:	4395      	bics	r5, r2
 8005e5e:	1aea      	subs	r2, r5, r3
 8005e60:	429d      	cmp	r5, r3
 8005e62:	d0e4      	beq.n	8005e2e <_malloc_r+0x8e>
 8005e64:	1b5b      	subs	r3, r3, r5
 8005e66:	50a3      	str	r3, [r4, r2]
 8005e68:	e7e1      	b.n	8005e2e <_malloc_r+0x8e>
 8005e6a:	605a      	str	r2, [r3, #4]
 8005e6c:	e7ec      	b.n	8005e48 <_malloc_r+0xa8>
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d1d5      	bne.n	8005e20 <_malloc_r+0x80>
 8005e74:	9b00      	ldr	r3, [sp, #0]
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e7e9      	b.n	8005e4e <_malloc_r+0xae>
 8005e7a:	0023      	movs	r3, r4
 8005e7c:	6864      	ldr	r4, [r4, #4]
 8005e7e:	e7a2      	b.n	8005dc6 <_malloc_r+0x26>
 8005e80:	002c      	movs	r4, r5
 8005e82:	686d      	ldr	r5, [r5, #4]
 8005e84:	e7ab      	b.n	8005dde <_malloc_r+0x3e>
 8005e86:	0013      	movs	r3, r2
 8005e88:	e7c4      	b.n	8005e14 <_malloc_r+0x74>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	0030      	movs	r0, r6
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f000 f810 	bl	8005eb4 <__malloc_unlock>
 8005e94:	e7cb      	b.n	8005e2e <_malloc_r+0x8e>
 8005e96:	6027      	str	r7, [r4, #0]
 8005e98:	e7d9      	b.n	8005e4e <_malloc_r+0xae>
 8005e9a:	605b      	str	r3, [r3, #4]
 8005e9c:	deff      	udf	#255	; 0xff
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	20000178 	.word	0x20000178

08005ea4 <__malloc_lock>:
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	4802      	ldr	r0, [pc, #8]	; (8005eb0 <__malloc_lock+0xc>)
 8005ea8:	f000 f8e2 	bl	8006070 <__retarget_lock_acquire_recursive>
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	200002bc 	.word	0x200002bc

08005eb4 <__malloc_unlock>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <__malloc_unlock+0xc>)
 8005eb8:	f000 f8db 	bl	8006072 <__retarget_lock_release_recursive>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	200002bc 	.word	0x200002bc

08005ec4 <_strtol_l.constprop.0>:
 8005ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	001e      	movs	r6, r3
 8005eca:	9005      	str	r0, [sp, #20]
 8005ecc:	9101      	str	r1, [sp, #4]
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d048      	beq.n	8005f66 <_strtol_l.constprop.0+0xa2>
 8005ed4:	000b      	movs	r3, r1
 8005ed6:	2e24      	cmp	r6, #36	; 0x24
 8005ed8:	d845      	bhi.n	8005f66 <_strtol_l.constprop.0+0xa2>
 8005eda:	4a3b      	ldr	r2, [pc, #236]	; (8005fc8 <_strtol_l.constprop.0+0x104>)
 8005edc:	2108      	movs	r1, #8
 8005ede:	4694      	mov	ip, r2
 8005ee0:	001a      	movs	r2, r3
 8005ee2:	4660      	mov	r0, ip
 8005ee4:	7814      	ldrb	r4, [r2, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	5d00      	ldrb	r0, [r0, r4]
 8005eea:	001d      	movs	r5, r3
 8005eec:	0007      	movs	r7, r0
 8005eee:	400f      	ands	r7, r1
 8005ef0:	4208      	tst	r0, r1
 8005ef2:	d1f5      	bne.n	8005ee0 <_strtol_l.constprop.0+0x1c>
 8005ef4:	2c2d      	cmp	r4, #45	; 0x2d
 8005ef6:	d13d      	bne.n	8005f74 <_strtol_l.constprop.0+0xb0>
 8005ef8:	2701      	movs	r7, #1
 8005efa:	781c      	ldrb	r4, [r3, #0]
 8005efc:	1c95      	adds	r5, r2, #2
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d05e      	beq.n	8005fc0 <_strtol_l.constprop.0+0xfc>
 8005f02:	2e10      	cmp	r6, #16
 8005f04:	d109      	bne.n	8005f1a <_strtol_l.constprop.0+0x56>
 8005f06:	2c30      	cmp	r4, #48	; 0x30
 8005f08:	d107      	bne.n	8005f1a <_strtol_l.constprop.0+0x56>
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	782b      	ldrb	r3, [r5, #0]
 8005f0e:	4393      	bics	r3, r2
 8005f10:	2b58      	cmp	r3, #88	; 0x58
 8005f12:	d150      	bne.n	8005fb6 <_strtol_l.constprop.0+0xf2>
 8005f14:	2610      	movs	r6, #16
 8005f16:	786c      	ldrb	r4, [r5, #1]
 8005f18:	3502      	adds	r5, #2
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <_strtol_l.constprop.0+0x108>)
 8005f1c:	0031      	movs	r1, r6
 8005f1e:	18fb      	adds	r3, r7, r3
 8005f20:	0018      	movs	r0, r3
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	f7fa f974 	bl	8000210 <__aeabi_uidivmod>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	9104      	str	r1, [sp, #16]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4684      	mov	ip, r0
 8005f30:	0010      	movs	r0, r2
 8005f32:	4249      	negs	r1, r1
 8005f34:	0023      	movs	r3, r4
 8005f36:	3b30      	subs	r3, #48	; 0x30
 8005f38:	2b09      	cmp	r3, #9
 8005f3a:	d903      	bls.n	8005f44 <_strtol_l.constprop.0+0x80>
 8005f3c:	3b11      	subs	r3, #17
 8005f3e:	2b19      	cmp	r3, #25
 8005f40:	d81d      	bhi.n	8005f7e <_strtol_l.constprop.0+0xba>
 8005f42:	330a      	adds	r3, #10
 8005f44:	429e      	cmp	r6, r3
 8005f46:	dd1e      	ble.n	8005f86 <_strtol_l.constprop.0+0xc2>
 8005f48:	1c54      	adds	r4, r2, #1
 8005f4a:	d009      	beq.n	8005f60 <_strtol_l.constprop.0+0x9c>
 8005f4c:	000a      	movs	r2, r1
 8005f4e:	4584      	cmp	ip, r0
 8005f50:	d306      	bcc.n	8005f60 <_strtol_l.constprop.0+0x9c>
 8005f52:	d102      	bne.n	8005f5a <_strtol_l.constprop.0+0x96>
 8005f54:	9c04      	ldr	r4, [sp, #16]
 8005f56:	429c      	cmp	r4, r3
 8005f58:	db02      	blt.n	8005f60 <_strtol_l.constprop.0+0x9c>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4370      	muls	r0, r6
 8005f5e:	1818      	adds	r0, r3, r0
 8005f60:	782c      	ldrb	r4, [r5, #0]
 8005f62:	3501      	adds	r5, #1
 8005f64:	e7e6      	b.n	8005f34 <_strtol_l.constprop.0+0x70>
 8005f66:	f000 f859 	bl	800601c <__errno>
 8005f6a:	2316      	movs	r3, #22
 8005f6c:	6003      	str	r3, [r0, #0]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	b007      	add	sp, #28
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f74:	2c2b      	cmp	r4, #43	; 0x2b
 8005f76:	d1c2      	bne.n	8005efe <_strtol_l.constprop.0+0x3a>
 8005f78:	781c      	ldrb	r4, [r3, #0]
 8005f7a:	1c95      	adds	r5, r2, #2
 8005f7c:	e7bf      	b.n	8005efe <_strtol_l.constprop.0+0x3a>
 8005f7e:	0023      	movs	r3, r4
 8005f80:	3b61      	subs	r3, #97	; 0x61
 8005f82:	2b19      	cmp	r3, #25
 8005f84:	d9dd      	bls.n	8005f42 <_strtol_l.constprop.0+0x7e>
 8005f86:	1c53      	adds	r3, r2, #1
 8005f88:	d109      	bne.n	8005f9e <_strtol_l.constprop.0+0xda>
 8005f8a:	2322      	movs	r3, #34	; 0x22
 8005f8c:	9a05      	ldr	r2, [sp, #20]
 8005f8e:	9803      	ldr	r0, [sp, #12]
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	9b02      	ldr	r3, [sp, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0eb      	beq.n	8005f70 <_strtol_l.constprop.0+0xac>
 8005f98:	1e6b      	subs	r3, r5, #1
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	e007      	b.n	8005fae <_strtol_l.constprop.0+0xea>
 8005f9e:	2f00      	cmp	r7, #0
 8005fa0:	d000      	beq.n	8005fa4 <_strtol_l.constprop.0+0xe0>
 8005fa2:	4240      	negs	r0, r0
 8005fa4:	9b02      	ldr	r3, [sp, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0e2      	beq.n	8005f70 <_strtol_l.constprop.0+0xac>
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	d1f4      	bne.n	8005f98 <_strtol_l.constprop.0+0xd4>
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	9a01      	ldr	r2, [sp, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e7dc      	b.n	8005f70 <_strtol_l.constprop.0+0xac>
 8005fb6:	2430      	movs	r4, #48	; 0x30
 8005fb8:	2e00      	cmp	r6, #0
 8005fba:	d1ae      	bne.n	8005f1a <_strtol_l.constprop.0+0x56>
 8005fbc:	3608      	adds	r6, #8
 8005fbe:	e7ac      	b.n	8005f1a <_strtol_l.constprop.0+0x56>
 8005fc0:	2c30      	cmp	r4, #48	; 0x30
 8005fc2:	d0a2      	beq.n	8005f0a <_strtol_l.constprop.0+0x46>
 8005fc4:	260a      	movs	r6, #10
 8005fc6:	e7a8      	b.n	8005f1a <_strtol_l.constprop.0+0x56>
 8005fc8:	08006341 	.word	0x08006341
 8005fcc:	7fffffff 	.word	0x7fffffff

08005fd0 <strtol>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	4c04      	ldr	r4, [pc, #16]	; (8005fe4 <strtol+0x14>)
 8005fd4:	0013      	movs	r3, r2
 8005fd6:	000a      	movs	r2, r1
 8005fd8:	0001      	movs	r1, r0
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	f7ff ff72 	bl	8005ec4 <_strtol_l.constprop.0>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	20000058 	.word	0x20000058

08005fe8 <memset>:
 8005fe8:	0003      	movs	r3, r0
 8005fea:	1882      	adds	r2, r0, r2
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <memset+0xa>
 8005ff0:	4770      	bx	lr
 8005ff2:	7019      	strb	r1, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	e7f9      	b.n	8005fec <memset+0x4>

08005ff8 <_sbrk_r>:
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	b570      	push	{r4, r5, r6, lr}
 8005ffc:	4d06      	ldr	r5, [pc, #24]	; (8006018 <_sbrk_r+0x20>)
 8005ffe:	0004      	movs	r4, r0
 8006000:	0008      	movs	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fb fbda 	bl	80017bc <_sbrk>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d103      	bne.n	8006014 <_sbrk_r+0x1c>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d000      	beq.n	8006014 <_sbrk_r+0x1c>
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	200002b8 	.word	0x200002b8

0800601c <__errno>:
 800601c:	4b01      	ldr	r3, [pc, #4]	; (8006024 <__errno+0x8>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	4770      	bx	lr
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	20000058 	.word	0x20000058

08006028 <__libc_init_array>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	2600      	movs	r6, #0
 800602c:	4c0c      	ldr	r4, [pc, #48]	; (8006060 <__libc_init_array+0x38>)
 800602e:	4d0d      	ldr	r5, [pc, #52]	; (8006064 <__libc_init_array+0x3c>)
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	42a6      	cmp	r6, r4
 8006036:	d109      	bne.n	800604c <__libc_init_array+0x24>
 8006038:	2600      	movs	r6, #0
 800603a:	f000 f86f 	bl	800611c <_init>
 800603e:	4c0a      	ldr	r4, [pc, #40]	; (8006068 <__libc_init_array+0x40>)
 8006040:	4d0a      	ldr	r5, [pc, #40]	; (800606c <__libc_init_array+0x44>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	42a6      	cmp	r6, r4
 8006048:	d105      	bne.n	8006056 <__libc_init_array+0x2e>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	00b3      	lsls	r3, r6, #2
 800604e:	58eb      	ldr	r3, [r5, r3]
 8006050:	4798      	blx	r3
 8006052:	3601      	adds	r6, #1
 8006054:	e7ee      	b.n	8006034 <__libc_init_array+0xc>
 8006056:	00b3      	lsls	r3, r6, #2
 8006058:	58eb      	ldr	r3, [r5, r3]
 800605a:	4798      	blx	r3
 800605c:	3601      	adds	r6, #1
 800605e:	e7f2      	b.n	8006046 <__libc_init_array+0x1e>
 8006060:	0800644c 	.word	0x0800644c
 8006064:	0800644c 	.word	0x0800644c
 8006068:	08006450 	.word	0x08006450
 800606c:	0800644c 	.word	0x0800644c

08006070 <__retarget_lock_acquire_recursive>:
 8006070:	4770      	bx	lr

08006072 <__retarget_lock_release_recursive>:
 8006072:	4770      	bx	lr

08006074 <memcpy>:
 8006074:	2300      	movs	r3, #0
 8006076:	b510      	push	{r4, lr}
 8006078:	429a      	cmp	r2, r3
 800607a:	d100      	bne.n	800607e <memcpy+0xa>
 800607c:	bd10      	pop	{r4, pc}
 800607e:	5ccc      	ldrb	r4, [r1, r3]
 8006080:	54c4      	strb	r4, [r0, r3]
 8006082:	3301      	adds	r3, #1
 8006084:	e7f8      	b.n	8006078 <memcpy+0x4>
	...

08006088 <_free_r>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	0005      	movs	r5, r0
 800608c:	2900      	cmp	r1, #0
 800608e:	d010      	beq.n	80060b2 <_free_r+0x2a>
 8006090:	1f0c      	subs	r4, r1, #4
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	da00      	bge.n	800609a <_free_r+0x12>
 8006098:	18e4      	adds	r4, r4, r3
 800609a:	0028      	movs	r0, r5
 800609c:	f7ff ff02 	bl	8005ea4 <__malloc_lock>
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <_free_r+0x90>)
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <_free_r+0x2c>
 80060a8:	6063      	str	r3, [r4, #4]
 80060aa:	6014      	str	r4, [r2, #0]
 80060ac:	0028      	movs	r0, r5
 80060ae:	f7ff ff01 	bl	8005eb4 <__malloc_unlock>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	d908      	bls.n	80060ca <_free_r+0x42>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	1821      	adds	r1, r4, r0
 80060bc:	428b      	cmp	r3, r1
 80060be:	d1f3      	bne.n	80060a8 <_free_r+0x20>
 80060c0:	6819      	ldr	r1, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	1809      	adds	r1, r1, r0
 80060c6:	6021      	str	r1, [r4, #0]
 80060c8:	e7ee      	b.n	80060a8 <_free_r+0x20>
 80060ca:	001a      	movs	r2, r3
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <_free_r+0x4e>
 80060d2:	42a3      	cmp	r3, r4
 80060d4:	d9f9      	bls.n	80060ca <_free_r+0x42>
 80060d6:	6811      	ldr	r1, [r2, #0]
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	42a0      	cmp	r0, r4
 80060dc:	d10b      	bne.n	80060f6 <_free_r+0x6e>
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	1809      	adds	r1, r1, r0
 80060e2:	1850      	adds	r0, r2, r1
 80060e4:	6011      	str	r1, [r2, #0]
 80060e6:	4283      	cmp	r3, r0
 80060e8:	d1e0      	bne.n	80060ac <_free_r+0x24>
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	1841      	adds	r1, r0, r1
 80060f0:	6011      	str	r1, [r2, #0]
 80060f2:	6053      	str	r3, [r2, #4]
 80060f4:	e7da      	b.n	80060ac <_free_r+0x24>
 80060f6:	42a0      	cmp	r0, r4
 80060f8:	d902      	bls.n	8006100 <_free_r+0x78>
 80060fa:	230c      	movs	r3, #12
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	e7d5      	b.n	80060ac <_free_r+0x24>
 8006100:	6820      	ldr	r0, [r4, #0]
 8006102:	1821      	adds	r1, r4, r0
 8006104:	428b      	cmp	r3, r1
 8006106:	d103      	bne.n	8006110 <_free_r+0x88>
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	1809      	adds	r1, r1, r0
 800610e:	6021      	str	r1, [r4, #0]
 8006110:	6063      	str	r3, [r4, #4]
 8006112:	6054      	str	r4, [r2, #4]
 8006114:	e7ca      	b.n	80060ac <_free_r+0x24>
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	20000178 	.word	0x20000178

0800611c <_init>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr

08006128 <_fini>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr
