
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c4  080063c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063cc  080063cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080063d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08006430  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08006430  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bac  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1a  00000000  00000000  00032c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00035890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c76  00000000  00000000  00036888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc7a  00000000  00000000  000374fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c1a  00000000  00000000  00055178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc176  00000000  00000000  00069d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d64  00000000  00000000  00125f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00129c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800609c 	.word	0x0800609c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800609c 	.word	0x0800609c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 fc00 	bl	8000c54 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 fbfb 	bl	8000c54 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__aeabi_dmul>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	4657      	mov	r7, sl
 80005d0:	464e      	mov	r6, r9
 80005d2:	b5e0      	push	{r5, r6, r7, lr}
 80005d4:	001f      	movs	r7, r3
 80005d6:	030b      	lsls	r3, r1, #12
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	469b      	mov	fp, r3
 80005dc:	004d      	lsls	r5, r1, #1
 80005de:	0fcb      	lsrs	r3, r1, #31
 80005e0:	0004      	movs	r4, r0
 80005e2:	4691      	mov	r9, r2
 80005e4:	4698      	mov	r8, r3
 80005e6:	b087      	sub	sp, #28
 80005e8:	0d6d      	lsrs	r5, r5, #21
 80005ea:	d100      	bne.n	80005ee <__aeabi_dmul+0x26>
 80005ec:	e1cd      	b.n	800098a <__aeabi_dmul+0x3c2>
 80005ee:	4bce      	ldr	r3, [pc, #824]	; (8000928 <__aeabi_dmul+0x360>)
 80005f0:	429d      	cmp	r5, r3
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x2e>
 80005f4:	e1e9      	b.n	80009ca <__aeabi_dmul+0x402>
 80005f6:	465a      	mov	r2, fp
 80005f8:	0f43      	lsrs	r3, r0, #29
 80005fa:	00d2      	lsls	r2, r2, #3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0412      	lsls	r2, r2, #16
 8000602:	431a      	orrs	r2, r3
 8000604:	00c3      	lsls	r3, r0, #3
 8000606:	469a      	mov	sl, r3
 8000608:	4bc8      	ldr	r3, [pc, #800]	; (800092c <__aeabi_dmul+0x364>)
 800060a:	4693      	mov	fp, r2
 800060c:	469c      	mov	ip, r3
 800060e:	2300      	movs	r3, #0
 8000610:	2600      	movs	r6, #0
 8000612:	4465      	add	r5, ip
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	033c      	lsls	r4, r7, #12
 8000618:	007b      	lsls	r3, r7, #1
 800061a:	4648      	mov	r0, r9
 800061c:	0b24      	lsrs	r4, r4, #12
 800061e:	0d5b      	lsrs	r3, r3, #21
 8000620:	0fff      	lsrs	r7, r7, #31
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_dmul+0x60>
 8000626:	e189      	b.n	800093c <__aeabi_dmul+0x374>
 8000628:	4abf      	ldr	r2, [pc, #764]	; (8000928 <__aeabi_dmul+0x360>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d019      	beq.n	8000662 <__aeabi_dmul+0x9a>
 800062e:	0f42      	lsrs	r2, r0, #29
 8000630:	00e4      	lsls	r4, r4, #3
 8000632:	4322      	orrs	r2, r4
 8000634:	2480      	movs	r4, #128	; 0x80
 8000636:	0424      	lsls	r4, r4, #16
 8000638:	4314      	orrs	r4, r2
 800063a:	4abc      	ldr	r2, [pc, #752]	; (800092c <__aeabi_dmul+0x364>)
 800063c:	2100      	movs	r1, #0
 800063e:	4694      	mov	ip, r2
 8000640:	4642      	mov	r2, r8
 8000642:	4463      	add	r3, ip
 8000644:	195b      	adds	r3, r3, r5
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b01      	ldr	r3, [sp, #4]
 800064a:	407a      	eors	r2, r7
 800064c:	3301      	adds	r3, #1
 800064e:	00c0      	lsls	r0, r0, #3
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	2e0a      	cmp	r6, #10
 8000656:	dd1c      	ble.n	8000692 <__aeabi_dmul+0xca>
 8000658:	003a      	movs	r2, r7
 800065a:	2e0b      	cmp	r6, #11
 800065c:	d05e      	beq.n	800071c <__aeabi_dmul+0x154>
 800065e:	4647      	mov	r7, r8
 8000660:	e056      	b.n	8000710 <__aeabi_dmul+0x148>
 8000662:	4649      	mov	r1, r9
 8000664:	4bb0      	ldr	r3, [pc, #704]	; (8000928 <__aeabi_dmul+0x360>)
 8000666:	4321      	orrs	r1, r4
 8000668:	18eb      	adds	r3, r5, r3
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2900      	cmp	r1, #0
 800066e:	d12a      	bne.n	80006c6 <__aeabi_dmul+0xfe>
 8000670:	2080      	movs	r0, #128	; 0x80
 8000672:	2202      	movs	r2, #2
 8000674:	0100      	lsls	r0, r0, #4
 8000676:	002b      	movs	r3, r5
 8000678:	4684      	mov	ip, r0
 800067a:	4316      	orrs	r6, r2
 800067c:	4642      	mov	r2, r8
 800067e:	4463      	add	r3, ip
 8000680:	407a      	eors	r2, r7
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2e0a      	cmp	r6, #10
 8000688:	dd00      	ble.n	800068c <__aeabi_dmul+0xc4>
 800068a:	e231      	b.n	8000af0 <__aeabi_dmul+0x528>
 800068c:	2000      	movs	r0, #0
 800068e:	2400      	movs	r4, #0
 8000690:	2102      	movs	r1, #2
 8000692:	2e02      	cmp	r6, #2
 8000694:	dc26      	bgt.n	80006e4 <__aeabi_dmul+0x11c>
 8000696:	3e01      	subs	r6, #1
 8000698:	2e01      	cmp	r6, #1
 800069a:	d852      	bhi.n	8000742 <__aeabi_dmul+0x17a>
 800069c:	2902      	cmp	r1, #2
 800069e:	d04c      	beq.n	800073a <__aeabi_dmul+0x172>
 80006a0:	2901      	cmp	r1, #1
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dmul+0xde>
 80006a4:	e118      	b.n	80008d8 <__aeabi_dmul+0x310>
 80006a6:	2300      	movs	r3, #0
 80006a8:	2400      	movs	r4, #0
 80006aa:	2500      	movs	r5, #0
 80006ac:	051b      	lsls	r3, r3, #20
 80006ae:	4323      	orrs	r3, r4
 80006b0:	07d2      	lsls	r2, r2, #31
 80006b2:	4313      	orrs	r3, r2
 80006b4:	0028      	movs	r0, r5
 80006b6:	0019      	movs	r1, r3
 80006b8:	b007      	add	sp, #28
 80006ba:	bcf0      	pop	{r4, r5, r6, r7}
 80006bc:	46bb      	mov	fp, r7
 80006be:	46b2      	mov	sl, r6
 80006c0:	46a9      	mov	r9, r5
 80006c2:	46a0      	mov	r8, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	2203      	movs	r2, #3
 80006ca:	0109      	lsls	r1, r1, #4
 80006cc:	002b      	movs	r3, r5
 80006ce:	468c      	mov	ip, r1
 80006d0:	4316      	orrs	r6, r2
 80006d2:	4642      	mov	r2, r8
 80006d4:	4463      	add	r3, ip
 80006d6:	407a      	eors	r2, r7
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	9302      	str	r3, [sp, #8]
 80006dc:	2e0a      	cmp	r6, #10
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dmul+0x11a>
 80006e0:	e228      	b.n	8000b34 <__aeabi_dmul+0x56c>
 80006e2:	2103      	movs	r1, #3
 80006e4:	2501      	movs	r5, #1
 80006e6:	40b5      	lsls	r5, r6
 80006e8:	46ac      	mov	ip, r5
 80006ea:	26a6      	movs	r6, #166	; 0xa6
 80006ec:	4663      	mov	r3, ip
 80006ee:	00f6      	lsls	r6, r6, #3
 80006f0:	4035      	ands	r5, r6
 80006f2:	4233      	tst	r3, r6
 80006f4:	d10b      	bne.n	800070e <__aeabi_dmul+0x146>
 80006f6:	2690      	movs	r6, #144	; 0x90
 80006f8:	00b6      	lsls	r6, r6, #2
 80006fa:	4233      	tst	r3, r6
 80006fc:	d118      	bne.n	8000730 <__aeabi_dmul+0x168>
 80006fe:	3eb9      	subs	r6, #185	; 0xb9
 8000700:	3eff      	subs	r6, #255	; 0xff
 8000702:	421e      	tst	r6, r3
 8000704:	d01d      	beq.n	8000742 <__aeabi_dmul+0x17a>
 8000706:	46a3      	mov	fp, r4
 8000708:	4682      	mov	sl, r0
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	e000      	b.n	8000710 <__aeabi_dmul+0x148>
 800070e:	0017      	movs	r7, r2
 8000710:	9900      	ldr	r1, [sp, #0]
 8000712:	003a      	movs	r2, r7
 8000714:	2902      	cmp	r1, #2
 8000716:	d010      	beq.n	800073a <__aeabi_dmul+0x172>
 8000718:	465c      	mov	r4, fp
 800071a:	4650      	mov	r0, sl
 800071c:	2903      	cmp	r1, #3
 800071e:	d1bf      	bne.n	80006a0 <__aeabi_dmul+0xd8>
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	031b      	lsls	r3, r3, #12
 8000724:	431c      	orrs	r4, r3
 8000726:	0324      	lsls	r4, r4, #12
 8000728:	0005      	movs	r5, r0
 800072a:	4b7f      	ldr	r3, [pc, #508]	; (8000928 <__aeabi_dmul+0x360>)
 800072c:	0b24      	lsrs	r4, r4, #12
 800072e:	e7bd      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000730:	2480      	movs	r4, #128	; 0x80
 8000732:	2200      	movs	r2, #0
 8000734:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <__aeabi_dmul+0x360>)
 8000736:	0324      	lsls	r4, r4, #12
 8000738:	e7b8      	b.n	80006ac <__aeabi_dmul+0xe4>
 800073a:	2400      	movs	r4, #0
 800073c:	2500      	movs	r5, #0
 800073e:	4b7a      	ldr	r3, [pc, #488]	; (8000928 <__aeabi_dmul+0x360>)
 8000740:	e7b4      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000742:	4653      	mov	r3, sl
 8000744:	041e      	lsls	r6, r3, #16
 8000746:	0c36      	lsrs	r6, r6, #16
 8000748:	0c1f      	lsrs	r7, r3, #16
 800074a:	0033      	movs	r3, r6
 800074c:	0c01      	lsrs	r1, r0, #16
 800074e:	0400      	lsls	r0, r0, #16
 8000750:	0c00      	lsrs	r0, r0, #16
 8000752:	4343      	muls	r3, r0
 8000754:	4698      	mov	r8, r3
 8000756:	0003      	movs	r3, r0
 8000758:	437b      	muls	r3, r7
 800075a:	4699      	mov	r9, r3
 800075c:	0033      	movs	r3, r6
 800075e:	434b      	muls	r3, r1
 8000760:	469c      	mov	ip, r3
 8000762:	4643      	mov	r3, r8
 8000764:	000d      	movs	r5, r1
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	469a      	mov	sl, r3
 800076a:	437d      	muls	r5, r7
 800076c:	44cc      	add	ip, r9
 800076e:	44d4      	add	ip, sl
 8000770:	9500      	str	r5, [sp, #0]
 8000772:	45e1      	cmp	r9, ip
 8000774:	d904      	bls.n	8000780 <__aeabi_dmul+0x1b8>
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	025b      	lsls	r3, r3, #9
 800077a:	4699      	mov	r9, r3
 800077c:	444d      	add	r5, r9
 800077e:	9500      	str	r5, [sp, #0]
 8000780:	4663      	mov	r3, ip
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	001d      	movs	r5, r3
 8000786:	4663      	mov	r3, ip
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	469c      	mov	ip, r3
 800078c:	4643      	mov	r3, r8
 800078e:	041b      	lsls	r3, r3, #16
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	4698      	mov	r8, r3
 8000794:	4663      	mov	r3, ip
 8000796:	4443      	add	r3, r8
 8000798:	9303      	str	r3, [sp, #12]
 800079a:	0c23      	lsrs	r3, r4, #16
 800079c:	4698      	mov	r8, r3
 800079e:	0033      	movs	r3, r6
 80007a0:	0424      	lsls	r4, r4, #16
 80007a2:	0c24      	lsrs	r4, r4, #16
 80007a4:	4363      	muls	r3, r4
 80007a6:	469c      	mov	ip, r3
 80007a8:	0023      	movs	r3, r4
 80007aa:	437b      	muls	r3, r7
 80007ac:	4699      	mov	r9, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	435e      	muls	r6, r3
 80007b2:	435f      	muls	r7, r3
 80007b4:	444e      	add	r6, r9
 80007b6:	4663      	mov	r3, ip
 80007b8:	46b2      	mov	sl, r6
 80007ba:	0c1e      	lsrs	r6, r3, #16
 80007bc:	4456      	add	r6, sl
 80007be:	45b1      	cmp	r9, r6
 80007c0:	d903      	bls.n	80007ca <__aeabi_dmul+0x202>
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	4699      	mov	r9, r3
 80007c8:	444f      	add	r7, r9
 80007ca:	0c33      	lsrs	r3, r6, #16
 80007cc:	4699      	mov	r9, r3
 80007ce:	003b      	movs	r3, r7
 80007d0:	444b      	add	r3, r9
 80007d2:	9305      	str	r3, [sp, #20]
 80007d4:	4663      	mov	r3, ip
 80007d6:	46ac      	mov	ip, r5
 80007d8:	041f      	lsls	r7, r3, #16
 80007da:	0c3f      	lsrs	r7, r7, #16
 80007dc:	0436      	lsls	r6, r6, #16
 80007de:	19f6      	adds	r6, r6, r7
 80007e0:	44b4      	add	ip, r6
 80007e2:	4663      	mov	r3, ip
 80007e4:	9304      	str	r3, [sp, #16]
 80007e6:	465b      	mov	r3, fp
 80007e8:	0c1b      	lsrs	r3, r3, #16
 80007ea:	469c      	mov	ip, r3
 80007ec:	465b      	mov	r3, fp
 80007ee:	041f      	lsls	r7, r3, #16
 80007f0:	0c3f      	lsrs	r7, r7, #16
 80007f2:	003b      	movs	r3, r7
 80007f4:	4343      	muls	r3, r0
 80007f6:	4699      	mov	r9, r3
 80007f8:	4663      	mov	r3, ip
 80007fa:	4343      	muls	r3, r0
 80007fc:	469a      	mov	sl, r3
 80007fe:	464b      	mov	r3, r9
 8000800:	4660      	mov	r0, ip
 8000802:	0c1b      	lsrs	r3, r3, #16
 8000804:	469b      	mov	fp, r3
 8000806:	4348      	muls	r0, r1
 8000808:	4379      	muls	r1, r7
 800080a:	4451      	add	r1, sl
 800080c:	4459      	add	r1, fp
 800080e:	458a      	cmp	sl, r1
 8000810:	d903      	bls.n	800081a <__aeabi_dmul+0x252>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	025b      	lsls	r3, r3, #9
 8000816:	469a      	mov	sl, r3
 8000818:	4450      	add	r0, sl
 800081a:	0c0b      	lsrs	r3, r1, #16
 800081c:	469a      	mov	sl, r3
 800081e:	464b      	mov	r3, r9
 8000820:	041b      	lsls	r3, r3, #16
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	4699      	mov	r9, r3
 8000826:	003b      	movs	r3, r7
 8000828:	4363      	muls	r3, r4
 800082a:	0409      	lsls	r1, r1, #16
 800082c:	4645      	mov	r5, r8
 800082e:	4449      	add	r1, r9
 8000830:	4699      	mov	r9, r3
 8000832:	4663      	mov	r3, ip
 8000834:	435c      	muls	r4, r3
 8000836:	436b      	muls	r3, r5
 8000838:	469c      	mov	ip, r3
 800083a:	464b      	mov	r3, r9
 800083c:	0c1b      	lsrs	r3, r3, #16
 800083e:	4698      	mov	r8, r3
 8000840:	436f      	muls	r7, r5
 8000842:	193f      	adds	r7, r7, r4
 8000844:	4447      	add	r7, r8
 8000846:	4450      	add	r0, sl
 8000848:	42bc      	cmp	r4, r7
 800084a:	d903      	bls.n	8000854 <__aeabi_dmul+0x28c>
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	025b      	lsls	r3, r3, #9
 8000850:	4698      	mov	r8, r3
 8000852:	44c4      	add	ip, r8
 8000854:	9b04      	ldr	r3, [sp, #16]
 8000856:	9d00      	ldr	r5, [sp, #0]
 8000858:	4698      	mov	r8, r3
 800085a:	4445      	add	r5, r8
 800085c:	42b5      	cmp	r5, r6
 800085e:	41b6      	sbcs	r6, r6
 8000860:	4273      	negs	r3, r6
 8000862:	4698      	mov	r8, r3
 8000864:	464b      	mov	r3, r9
 8000866:	041e      	lsls	r6, r3, #16
 8000868:	9b05      	ldr	r3, [sp, #20]
 800086a:	043c      	lsls	r4, r7, #16
 800086c:	4699      	mov	r9, r3
 800086e:	0c36      	lsrs	r6, r6, #16
 8000870:	19a4      	adds	r4, r4, r6
 8000872:	444c      	add	r4, r9
 8000874:	46a1      	mov	r9, r4
 8000876:	4683      	mov	fp, r0
 8000878:	186e      	adds	r6, r5, r1
 800087a:	44c1      	add	r9, r8
 800087c:	428e      	cmp	r6, r1
 800087e:	4189      	sbcs	r1, r1
 8000880:	44cb      	add	fp, r9
 8000882:	465d      	mov	r5, fp
 8000884:	4249      	negs	r1, r1
 8000886:	186d      	adds	r5, r5, r1
 8000888:	429c      	cmp	r4, r3
 800088a:	41a4      	sbcs	r4, r4
 800088c:	45c1      	cmp	r9, r8
 800088e:	419b      	sbcs	r3, r3
 8000890:	4583      	cmp	fp, r0
 8000892:	4180      	sbcs	r0, r0
 8000894:	428d      	cmp	r5, r1
 8000896:	4189      	sbcs	r1, r1
 8000898:	425b      	negs	r3, r3
 800089a:	4264      	negs	r4, r4
 800089c:	431c      	orrs	r4, r3
 800089e:	4240      	negs	r0, r0
 80008a0:	9b03      	ldr	r3, [sp, #12]
 80008a2:	4249      	negs	r1, r1
 80008a4:	4301      	orrs	r1, r0
 80008a6:	0270      	lsls	r0, r6, #9
 80008a8:	0c3f      	lsrs	r7, r7, #16
 80008aa:	4318      	orrs	r0, r3
 80008ac:	19e4      	adds	r4, r4, r7
 80008ae:	1e47      	subs	r7, r0, #1
 80008b0:	41b8      	sbcs	r0, r7
 80008b2:	1864      	adds	r4, r4, r1
 80008b4:	4464      	add	r4, ip
 80008b6:	0df6      	lsrs	r6, r6, #23
 80008b8:	0261      	lsls	r1, r4, #9
 80008ba:	4330      	orrs	r0, r6
 80008bc:	0dec      	lsrs	r4, r5, #23
 80008be:	026e      	lsls	r6, r5, #9
 80008c0:	430c      	orrs	r4, r1
 80008c2:	4330      	orrs	r0, r6
 80008c4:	01c9      	lsls	r1, r1, #7
 80008c6:	d400      	bmi.n	80008ca <__aeabi_dmul+0x302>
 80008c8:	e0f1      	b.n	8000aae <__aeabi_dmul+0x4e6>
 80008ca:	2101      	movs	r1, #1
 80008cc:	0843      	lsrs	r3, r0, #1
 80008ce:	4001      	ands	r1, r0
 80008d0:	430b      	orrs	r3, r1
 80008d2:	07e0      	lsls	r0, r4, #31
 80008d4:	4318      	orrs	r0, r3
 80008d6:	0864      	lsrs	r4, r4, #1
 80008d8:	4915      	ldr	r1, [pc, #84]	; (8000930 <__aeabi_dmul+0x368>)
 80008da:	9b02      	ldr	r3, [sp, #8]
 80008dc:	468c      	mov	ip, r1
 80008de:	4463      	add	r3, ip
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_dmul+0x31e>
 80008e4:	e097      	b.n	8000a16 <__aeabi_dmul+0x44e>
 80008e6:	0741      	lsls	r1, r0, #29
 80008e8:	d009      	beq.n	80008fe <__aeabi_dmul+0x336>
 80008ea:	210f      	movs	r1, #15
 80008ec:	4001      	ands	r1, r0
 80008ee:	2904      	cmp	r1, #4
 80008f0:	d005      	beq.n	80008fe <__aeabi_dmul+0x336>
 80008f2:	1d01      	adds	r1, r0, #4
 80008f4:	4281      	cmp	r1, r0
 80008f6:	4180      	sbcs	r0, r0
 80008f8:	4240      	negs	r0, r0
 80008fa:	1824      	adds	r4, r4, r0
 80008fc:	0008      	movs	r0, r1
 80008fe:	01e1      	lsls	r1, r4, #7
 8000900:	d506      	bpl.n	8000910 <__aeabi_dmul+0x348>
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	00c9      	lsls	r1, r1, #3
 8000906:	468c      	mov	ip, r1
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <__aeabi_dmul+0x36c>)
 800090a:	401c      	ands	r4, r3
 800090c:	9b02      	ldr	r3, [sp, #8]
 800090e:	4463      	add	r3, ip
 8000910:	4909      	ldr	r1, [pc, #36]	; (8000938 <__aeabi_dmul+0x370>)
 8000912:	428b      	cmp	r3, r1
 8000914:	dd00      	ble.n	8000918 <__aeabi_dmul+0x350>
 8000916:	e710      	b.n	800073a <__aeabi_dmul+0x172>
 8000918:	0761      	lsls	r1, r4, #29
 800091a:	08c5      	lsrs	r5, r0, #3
 800091c:	0264      	lsls	r4, r4, #9
 800091e:	055b      	lsls	r3, r3, #21
 8000920:	430d      	orrs	r5, r1
 8000922:	0b24      	lsrs	r4, r4, #12
 8000924:	0d5b      	lsrs	r3, r3, #21
 8000926:	e6c1      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000928:	000007ff 	.word	0x000007ff
 800092c:	fffffc01 	.word	0xfffffc01
 8000930:	000003ff 	.word	0x000003ff
 8000934:	feffffff 	.word	0xfeffffff
 8000938:	000007fe 	.word	0x000007fe
 800093c:	464b      	mov	r3, r9
 800093e:	4323      	orrs	r3, r4
 8000940:	d059      	beq.n	80009f6 <__aeabi_dmul+0x42e>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_dmul+0x380>
 8000946:	e0a3      	b.n	8000a90 <__aeabi_dmul+0x4c8>
 8000948:	0020      	movs	r0, r4
 800094a:	f000 f965 	bl	8000c18 <__clzsi2>
 800094e:	0001      	movs	r1, r0
 8000950:	0003      	movs	r3, r0
 8000952:	390b      	subs	r1, #11
 8000954:	221d      	movs	r2, #29
 8000956:	1a52      	subs	r2, r2, r1
 8000958:	4649      	mov	r1, r9
 800095a:	0018      	movs	r0, r3
 800095c:	40d1      	lsrs	r1, r2
 800095e:	464a      	mov	r2, r9
 8000960:	3808      	subs	r0, #8
 8000962:	4082      	lsls	r2, r0
 8000964:	4084      	lsls	r4, r0
 8000966:	0010      	movs	r0, r2
 8000968:	430c      	orrs	r4, r1
 800096a:	4a74      	ldr	r2, [pc, #464]	; (8000b3c <__aeabi_dmul+0x574>)
 800096c:	1aeb      	subs	r3, r5, r3
 800096e:	4694      	mov	ip, r2
 8000970:	4642      	mov	r2, r8
 8000972:	4463      	add	r3, ip
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	9b01      	ldr	r3, [sp, #4]
 8000978:	407a      	eors	r2, r7
 800097a:	3301      	adds	r3, #1
 800097c:	2100      	movs	r1, #0
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2e0a      	cmp	r6, #10
 8000984:	dd00      	ble.n	8000988 <__aeabi_dmul+0x3c0>
 8000986:	e667      	b.n	8000658 <__aeabi_dmul+0x90>
 8000988:	e683      	b.n	8000692 <__aeabi_dmul+0xca>
 800098a:	465b      	mov	r3, fp
 800098c:	4303      	orrs	r3, r0
 800098e:	469a      	mov	sl, r3
 8000990:	d02a      	beq.n	80009e8 <__aeabi_dmul+0x420>
 8000992:	465b      	mov	r3, fp
 8000994:	2b00      	cmp	r3, #0
 8000996:	d06d      	beq.n	8000a74 <__aeabi_dmul+0x4ac>
 8000998:	4658      	mov	r0, fp
 800099a:	f000 f93d 	bl	8000c18 <__clzsi2>
 800099e:	0001      	movs	r1, r0
 80009a0:	0003      	movs	r3, r0
 80009a2:	390b      	subs	r1, #11
 80009a4:	221d      	movs	r2, #29
 80009a6:	1a52      	subs	r2, r2, r1
 80009a8:	0021      	movs	r1, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	465d      	mov	r5, fp
 80009ae:	40d1      	lsrs	r1, r2
 80009b0:	3808      	subs	r0, #8
 80009b2:	4085      	lsls	r5, r0
 80009b4:	000a      	movs	r2, r1
 80009b6:	4084      	lsls	r4, r0
 80009b8:	432a      	orrs	r2, r5
 80009ba:	4693      	mov	fp, r2
 80009bc:	46a2      	mov	sl, r4
 80009be:	4d5f      	ldr	r5, [pc, #380]	; (8000b3c <__aeabi_dmul+0x574>)
 80009c0:	2600      	movs	r6, #0
 80009c2:	1aed      	subs	r5, r5, r3
 80009c4:	2300      	movs	r3, #0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	e625      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009ca:	465b      	mov	r3, fp
 80009cc:	4303      	orrs	r3, r0
 80009ce:	469a      	mov	sl, r3
 80009d0:	d105      	bne.n	80009de <__aeabi_dmul+0x416>
 80009d2:	2300      	movs	r3, #0
 80009d4:	469b      	mov	fp, r3
 80009d6:	3302      	adds	r3, #2
 80009d8:	2608      	movs	r6, #8
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	e61b      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009de:	2303      	movs	r3, #3
 80009e0:	4682      	mov	sl, r0
 80009e2:	260c      	movs	r6, #12
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	e616      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009e8:	2300      	movs	r3, #0
 80009ea:	469b      	mov	fp, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	2604      	movs	r6, #4
 80009f0:	2500      	movs	r5, #0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	e60f      	b.n	8000616 <__aeabi_dmul+0x4e>
 80009f6:	4642      	mov	r2, r8
 80009f8:	3301      	adds	r3, #1
 80009fa:	9501      	str	r5, [sp, #4]
 80009fc:	431e      	orrs	r6, r3
 80009fe:	9b01      	ldr	r3, [sp, #4]
 8000a00:	407a      	eors	r2, r7
 8000a02:	3301      	adds	r3, #1
 8000a04:	2400      	movs	r4, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2e0a      	cmp	r6, #10
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_dmul+0x44c>
 8000a12:	e621      	b.n	8000658 <__aeabi_dmul+0x90>
 8000a14:	e63d      	b.n	8000692 <__aeabi_dmul+0xca>
 8000a16:	2101      	movs	r1, #1
 8000a18:	1ac9      	subs	r1, r1, r3
 8000a1a:	2938      	cmp	r1, #56	; 0x38
 8000a1c:	dd00      	ble.n	8000a20 <__aeabi_dmul+0x458>
 8000a1e:	e642      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000a20:	291f      	cmp	r1, #31
 8000a22:	dd47      	ble.n	8000ab4 <__aeabi_dmul+0x4ec>
 8000a24:	261f      	movs	r6, #31
 8000a26:	0025      	movs	r5, r4
 8000a28:	4276      	negs	r6, r6
 8000a2a:	1af3      	subs	r3, r6, r3
 8000a2c:	40dd      	lsrs	r5, r3
 8000a2e:	002b      	movs	r3, r5
 8000a30:	2920      	cmp	r1, #32
 8000a32:	d005      	beq.n	8000a40 <__aeabi_dmul+0x478>
 8000a34:	4942      	ldr	r1, [pc, #264]	; (8000b40 <__aeabi_dmul+0x578>)
 8000a36:	9d02      	ldr	r5, [sp, #8]
 8000a38:	468c      	mov	ip, r1
 8000a3a:	4465      	add	r5, ip
 8000a3c:	40ac      	lsls	r4, r5
 8000a3e:	4320      	orrs	r0, r4
 8000a40:	1e41      	subs	r1, r0, #1
 8000a42:	4188      	sbcs	r0, r1
 8000a44:	4318      	orrs	r0, r3
 8000a46:	2307      	movs	r3, #7
 8000a48:	001d      	movs	r5, r3
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	4005      	ands	r5, r0
 8000a4e:	4203      	tst	r3, r0
 8000a50:	d04a      	beq.n	8000ae8 <__aeabi_dmul+0x520>
 8000a52:	230f      	movs	r3, #15
 8000a54:	2400      	movs	r4, #0
 8000a56:	4003      	ands	r3, r0
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d042      	beq.n	8000ae2 <__aeabi_dmul+0x51a>
 8000a5c:	1d03      	adds	r3, r0, #4
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	4240      	negs	r0, r0
 8000a64:	1824      	adds	r4, r4, r0
 8000a66:	0018      	movs	r0, r3
 8000a68:	0223      	lsls	r3, r4, #8
 8000a6a:	d53a      	bpl.n	8000ae2 <__aeabi_dmul+0x51a>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2400      	movs	r4, #0
 8000a70:	2500      	movs	r5, #0
 8000a72:	e61b      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000a74:	f000 f8d0 	bl	8000c18 <__clzsi2>
 8000a78:	0001      	movs	r1, r0
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	3115      	adds	r1, #21
 8000a7e:	3320      	adds	r3, #32
 8000a80:	291c      	cmp	r1, #28
 8000a82:	dd8f      	ble.n	80009a4 <__aeabi_dmul+0x3dc>
 8000a84:	3808      	subs	r0, #8
 8000a86:	2200      	movs	r2, #0
 8000a88:	4084      	lsls	r4, r0
 8000a8a:	4692      	mov	sl, r2
 8000a8c:	46a3      	mov	fp, r4
 8000a8e:	e796      	b.n	80009be <__aeabi_dmul+0x3f6>
 8000a90:	f000 f8c2 	bl	8000c18 <__clzsi2>
 8000a94:	0001      	movs	r1, r0
 8000a96:	0003      	movs	r3, r0
 8000a98:	3115      	adds	r1, #21
 8000a9a:	3320      	adds	r3, #32
 8000a9c:	291c      	cmp	r1, #28
 8000a9e:	dc00      	bgt.n	8000aa2 <__aeabi_dmul+0x4da>
 8000aa0:	e758      	b.n	8000954 <__aeabi_dmul+0x38c>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	464c      	mov	r4, r9
 8000aa6:	3a08      	subs	r2, #8
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	e75d      	b.n	800096a <__aeabi_dmul+0x3a2>
 8000aae:	9b01      	ldr	r3, [sp, #4]
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	e711      	b.n	80008d8 <__aeabi_dmul+0x310>
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <__aeabi_dmul+0x57c>)
 8000ab6:	0026      	movs	r6, r4
 8000ab8:	469c      	mov	ip, r3
 8000aba:	0003      	movs	r3, r0
 8000abc:	9d02      	ldr	r5, [sp, #8]
 8000abe:	40cb      	lsrs	r3, r1
 8000ac0:	4465      	add	r5, ip
 8000ac2:	40ae      	lsls	r6, r5
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	40ab      	lsls	r3, r5
 8000aca:	1e58      	subs	r0, r3, #1
 8000acc:	4183      	sbcs	r3, r0
 8000ace:	0030      	movs	r0, r6
 8000ad0:	4318      	orrs	r0, r3
 8000ad2:	40cc      	lsrs	r4, r1
 8000ad4:	0743      	lsls	r3, r0, #29
 8000ad6:	d0c7      	beq.n	8000a68 <__aeabi_dmul+0x4a0>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4003      	ands	r3, r0
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d1bd      	bne.n	8000a5c <__aeabi_dmul+0x494>
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dmul+0x4a0>
 8000ae2:	0765      	lsls	r5, r4, #29
 8000ae4:	0264      	lsls	r4, r4, #9
 8000ae6:	0b24      	lsrs	r4, r4, #12
 8000ae8:	08c0      	lsrs	r0, r0, #3
 8000aea:	2300      	movs	r3, #0
 8000aec:	4305      	orrs	r5, r0
 8000aee:	e5dd      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000af0:	2500      	movs	r5, #0
 8000af2:	2302      	movs	r3, #2
 8000af4:	2e0f      	cmp	r6, #15
 8000af6:	d10c      	bne.n	8000b12 <__aeabi_dmul+0x54a>
 8000af8:	2480      	movs	r4, #128	; 0x80
 8000afa:	465b      	mov	r3, fp
 8000afc:	0324      	lsls	r4, r4, #12
 8000afe:	4223      	tst	r3, r4
 8000b00:	d00e      	beq.n	8000b20 <__aeabi_dmul+0x558>
 8000b02:	4221      	tst	r1, r4
 8000b04:	d10c      	bne.n	8000b20 <__aeabi_dmul+0x558>
 8000b06:	430c      	orrs	r4, r1
 8000b08:	0324      	lsls	r4, r4, #12
 8000b0a:	003a      	movs	r2, r7
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <__aeabi_dmul+0x580>)
 8000b0e:	0b24      	lsrs	r4, r4, #12
 8000b10:	e5cc      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000b12:	2e0b      	cmp	r6, #11
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dmul+0x550>
 8000b16:	e5a2      	b.n	800065e <__aeabi_dmul+0x96>
 8000b18:	468b      	mov	fp, r1
 8000b1a:	46aa      	mov	sl, r5
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	e5f7      	b.n	8000710 <__aeabi_dmul+0x148>
 8000b20:	2480      	movs	r4, #128	; 0x80
 8000b22:	465b      	mov	r3, fp
 8000b24:	0324      	lsls	r4, r4, #12
 8000b26:	431c      	orrs	r4, r3
 8000b28:	0324      	lsls	r4, r4, #12
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	4655      	mov	r5, sl
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <__aeabi_dmul+0x580>)
 8000b30:	0b24      	lsrs	r4, r4, #12
 8000b32:	e5bb      	b.n	80006ac <__aeabi_dmul+0xe4>
 8000b34:	464d      	mov	r5, r9
 8000b36:	0021      	movs	r1, r4
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e7db      	b.n	8000af4 <__aeabi_dmul+0x52c>
 8000b3c:	fffffc0d 	.word	0xfffffc0d
 8000b40:	0000043e 	.word	0x0000043e
 8000b44:	0000041e 	.word	0x0000041e
 8000b48:	000007ff 	.word	0x000007ff

08000b4c <__aeabi_d2iz>:
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	4c13      	ldr	r4, [pc, #76]	; (8000ba0 <__aeabi_d2iz+0x54>)
 8000b52:	0053      	lsls	r3, r2, #1
 8000b54:	0309      	lsls	r1, r1, #12
 8000b56:	0005      	movs	r5, r0
 8000b58:	0b09      	lsrs	r1, r1, #12
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	0d5b      	lsrs	r3, r3, #21
 8000b5e:	0fd2      	lsrs	r2, r2, #31
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	dd04      	ble.n	8000b6e <__aeabi_d2iz+0x22>
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <__aeabi_d2iz+0x58>)
 8000b66:	4283      	cmp	r3, r0
 8000b68:	dd02      	ble.n	8000b70 <__aeabi_d2iz+0x24>
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <__aeabi_d2iz+0x5c>)
 8000b6c:	18d0      	adds	r0, r2, r3
 8000b6e:	bd30      	pop	{r4, r5, pc}
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	0340      	lsls	r0, r0, #13
 8000b74:	4301      	orrs	r1, r0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <__aeabi_d2iz+0x60>)
 8000b78:	1ac0      	subs	r0, r0, r3
 8000b7a:	281f      	cmp	r0, #31
 8000b7c:	dd08      	ble.n	8000b90 <__aeabi_d2iz+0x44>
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <__aeabi_d2iz+0x64>)
 8000b80:	1ac3      	subs	r3, r0, r3
 8000b82:	40d9      	lsrs	r1, r3
 8000b84:	000b      	movs	r3, r1
 8000b86:	4258      	negs	r0, r3
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	d1f0      	bne.n	8000b6e <__aeabi_d2iz+0x22>
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	e7ee      	b.n	8000b6e <__aeabi_d2iz+0x22>
 8000b90:	4c08      	ldr	r4, [pc, #32]	; (8000bb4 <__aeabi_d2iz+0x68>)
 8000b92:	40c5      	lsrs	r5, r0
 8000b94:	46a4      	mov	ip, r4
 8000b96:	4463      	add	r3, ip
 8000b98:	4099      	lsls	r1, r3
 8000b9a:	000b      	movs	r3, r1
 8000b9c:	432b      	orrs	r3, r5
 8000b9e:	e7f2      	b.n	8000b86 <__aeabi_d2iz+0x3a>
 8000ba0:	000003fe 	.word	0x000003fe
 8000ba4:	0000041d 	.word	0x0000041d
 8000ba8:	7fffffff 	.word	0x7fffffff
 8000bac:	00000433 	.word	0x00000433
 8000bb0:	00000413 	.word	0x00000413
 8000bb4:	fffffbed 	.word	0xfffffbed

08000bb8 <__aeabi_i2d>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d016      	beq.n	8000bec <__aeabi_i2d+0x34>
 8000bbe:	17c3      	asrs	r3, r0, #31
 8000bc0:	18c5      	adds	r5, r0, r3
 8000bc2:	405d      	eors	r5, r3
 8000bc4:	0fc4      	lsrs	r4, r0, #31
 8000bc6:	0028      	movs	r0, r5
 8000bc8:	f000 f826 	bl	8000c18 <__clzsi2>
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <__aeabi_i2d+0x5c>)
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	280a      	cmp	r0, #10
 8000bd2:	dc16      	bgt.n	8000c02 <__aeabi_i2d+0x4a>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	002e      	movs	r6, r5
 8000bd8:	3215      	adds	r2, #21
 8000bda:	4096      	lsls	r6, r2
 8000bdc:	220b      	movs	r2, #11
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	40d5      	lsrs	r5, r2
 8000be2:	055b      	lsls	r3, r3, #21
 8000be4:	032d      	lsls	r5, r5, #12
 8000be6:	0b2d      	lsrs	r5, r5, #12
 8000be8:	0d5b      	lsrs	r3, r3, #21
 8000bea:	e003      	b.n	8000bf4 <__aeabi_i2d+0x3c>
 8000bec:	2400      	movs	r4, #0
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	051b      	lsls	r3, r3, #20
 8000bf6:	432b      	orrs	r3, r5
 8000bf8:	07e4      	lsls	r4, r4, #31
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	0030      	movs	r0, r6
 8000bfe:	0019      	movs	r1, r3
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
 8000c02:	380b      	subs	r0, #11
 8000c04:	4085      	lsls	r5, r0
 8000c06:	055b      	lsls	r3, r3, #21
 8000c08:	032d      	lsls	r5, r5, #12
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	0b2d      	lsrs	r5, r5, #12
 8000c0e:	0d5b      	lsrs	r3, r3, #21
 8000c10:	e7f0      	b.n	8000bf4 <__aeabi_i2d+0x3c>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	0000041e 	.word	0x0000041e

08000c18 <__clzsi2>:
 8000c18:	211c      	movs	r1, #28
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	4298      	cmp	r0, r3
 8000c20:	d301      	bcc.n	8000c26 <__clzsi2+0xe>
 8000c22:	0c00      	lsrs	r0, r0, #16
 8000c24:	3910      	subs	r1, #16
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d301      	bcc.n	8000c30 <__clzsi2+0x18>
 8000c2c:	0a00      	lsrs	r0, r0, #8
 8000c2e:	3908      	subs	r1, #8
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d301      	bcc.n	8000c3a <__clzsi2+0x22>
 8000c36:	0900      	lsrs	r0, r0, #4
 8000c38:	3904      	subs	r1, #4
 8000c3a:	a202      	add	r2, pc, #8	; (adr r2, 8000c44 <__clzsi2+0x2c>)
 8000c3c:	5c10      	ldrb	r0, [r2, r0]
 8000c3e:	1840      	adds	r0, r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	02020304 	.word	0x02020304
 8000c48:	01010101 	.word	0x01010101
	...

08000c54 <__clzdi2>:
 8000c54:	b510      	push	{r4, lr}
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d103      	bne.n	8000c62 <__clzdi2+0xe>
 8000c5a:	f7ff ffdd 	bl	8000c18 <__clzsi2>
 8000c5e:	3020      	adds	r0, #32
 8000c60:	e002      	b.n	8000c68 <__clzdi2+0x14>
 8000c62:	0008      	movs	r0, r1
 8000c64:	f7ff ffd8 	bl	8000c18 <__clzsi2>
 8000c68:	bd10      	pop	{r4, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)

08000c6c <MC74HCT595A_init>:
// Will point to our light patterns. A byte is an 8-bit BINARY variable to match the 8 lights
uint8_t * registerPatterns;

void clearRegisters();
numbers_t segments[10];
void MC74HCT595A_init(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
    registerPatterns = malloc(REGISTERS * sizeof(uint8_t));
 8000c72:	2002      	movs	r0, #2
 8000c74:	f005 f81e 	bl	8005cb4 <malloc>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <MC74HCT595A_init+0x100>)
 8000c7e:	601a      	str	r2, [r3, #0]
    registerPatterns[0] = 5;
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <MC74HCT595A_init+0x100>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2205      	movs	r2, #5
 8000c86:	701a      	strb	r2, [r3, #0]
    registerPatterns[1] = 6;
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <MC74HCT595A_init+0x100>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	2206      	movs	r2, #6
 8000c90:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < 10; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	e061      	b.n	8000d5c <MC74HCT595A_init+0xf0>
        segments[i].number = i;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	b2d9      	uxtb	r1, r3
 8000c9c:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	54d1      	strb	r1, [r2, r3]
        switch (i){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b09      	cmp	r3, #9
 8000ca8:	d855      	bhi.n	8000d56 <MC74HCT595A_init+0xea>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	009a      	lsls	r2, r3, #2
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MC74HCT595A_init+0x108>)
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	469f      	mov	pc, r3
        case 0:
            segments[i].segments = 255 & (1 << SEG_G);
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	701a      	strb	r2, [r3, #0]
            break;
 8000cc4:	e047      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 1:
            segments[i].segments =255 & ~((1 << SEG_B) | (1 << SEG_C));
 8000cc6:	4a2a      	ldr	r2, [pc, #168]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	229f      	movs	r2, #159	; 0x9f
 8000cd2:	701a      	strb	r2, [r3, #0]
            break;
 8000cd4:	e03f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 2:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_E) | (1 << SEG_D));
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	2225      	movs	r2, #37	; 0x25
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e037      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 3:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D));
 8000ce6:	4a22      	ldr	r2, [pc, #136]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	220d      	movs	r2, #13
 8000cf2:	701a      	strb	r2, [r3, #0]
            break;
 8000cf4:	e02f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 4:
            segments[i].segments = 255 & ~ ((1 << SEG_F) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C));
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	2299      	movs	r2, #153	; 0x99
 8000d02:	701a      	strb	r2, [r3, #0]
            break;
 8000d04:	e027      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 5:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_F) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D));
 8000d06:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2249      	movs	r2, #73	; 0x49
 8000d12:	701a      	strb	r2, [r3, #0]
            break;
 8000d14:	e01f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 6:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_F) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D) | (1 << SEG_E));
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	2241      	movs	r2, #65	; 0x41
 8000d22:	701a      	strb	r2, [r3, #0]
            break;
 8000d24:	e017      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 7:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_C));
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	221f      	movs	r2, #31
 8000d32:	701a      	strb	r2, [r3, #0]
            break;
 8000d34:	e00f      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 8:
            segments[i].segments = 0;
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
            break;
 8000d44:	e007      	b.n	8000d56 <MC74HCT595A_init+0xea>
        case 9:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D) | (1 << SEG_F));
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <MC74HCT595A_init+0x104>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	2209      	movs	r2, #9
 8000d52:	701a      	strb	r2, [r3, #0]
            break;
 8000d54:	46c0      	nop			; (mov r8, r8)
    for(size_t i = 0; i < 10; i++){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d99a      	bls.n	8000c98 <MC74HCT595A_init+0x2c>
        }
    }
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000078 	.word	0x20000078
 8000d70:	2000007c 	.word	0x2000007c
 8000d74:	080061bc 	.word	0x080061bc

08000d78 <calc_segments>:
            else
                *pattern &= ~(1 << q); 
        }
    }
}
uint8_t calc_segments(uint8_t data){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
    uint8_t result = 0;
 8000d84:	200f      	movs	r0, #15
 8000d86:	183b      	adds	r3, r7, r0
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
    result = segments[data].segments;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	4906      	ldr	r1, [pc, #24]	; (8000dac <calc_segments+0x34>)
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	188a      	adds	r2, r1, r2
 8000d98:	3201      	adds	r2, #1
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
    return result;
 8000d9e:	183b      	adds	r3, r7, r0
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	2000007c 	.word	0x2000007c

08000db0 <MC74HCT595A_shiftOut>:
void MC74HCT595A_shiftOut(uint16_t data){
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	801a      	strh	r2, [r3, #0]
	//clock PA8
	//LATch PB5
	//data pa9
    uint8_t temp; 
    uint16_t segm = 0;
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	801a      	strh	r2, [r3, #0]
 
    uint16_t printofka;
    for(int i = 0;i<4;i++){
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e080      	b.n	8000ecc <MC74HCT595A_shiftOut+0x11c>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <MC74HCT595A_shiftOut+0x130>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2120      	movs	r1, #32
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 fae8 	bl	80023a6 <HAL_GPIO_WritePin>
       temp  = calc_segments(data%10);
 8000dd6:	1dbb      	adds	r3, r7, #6
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	210a      	movs	r1, #10
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fa17 	bl	8000210 <__aeabi_uidivmod>
 8000de2:	000b      	movs	r3, r1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	250d      	movs	r5, #13
 8000dea:	197c      	adds	r4, r7, r5
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ffc3 	bl	8000d78 <calc_segments>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]
       data = data/10;
 8000df6:	1dbc      	adds	r4, r7, #6
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff f980 	bl	8000104 <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	8023      	strh	r3, [r4, #0]
		segm = (1 << SEG_4+i);
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	330c      	adds	r3, #12
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	240e      	movs	r4, #14
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	801a      	strh	r2, [r3, #0]
       printofka = segm | temp;
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	183b      	adds	r3, r7, r0
 8000e20:	193a      	adds	r2, r7, r4
 8000e22:	8812      	ldrh	r2, [r2, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	801a      	strh	r2, [r3, #0]
       printofka |= 0b1;
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	183a      	adds	r2, r7, r0
 8000e2c:	8812      	ldrh	r2, [r2, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	801a      	strh	r2, [r3, #0]
        for(int j = 0;j<16;j++){
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e03c      	b.n	8000eb4 <MC74HCT595A_shiftOut+0x104>
            if(printofka & (1 << j)){
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	411a      	asrs	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	2201      	movs	r2, #1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d018      	beq.n	8000e7e <MC74HCT595A_shiftOut+0xce>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	009a      	lsls	r2, r3, #2
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 fac2 	bl	80023e0 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	005a      	lsls	r2, r3, #1
 8000e60:	23a0      	movs	r3, #160	; 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 faba 	bl	80023e0 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	009a      	lsls	r2, r3, #2
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 fab2 	bl	80023e0 <HAL_GPIO_TogglePin>
 8000e7c:	e00f      	b.n	8000e9e <MC74HCT595A_shiftOut+0xee>
            }
            else{
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	005a      	lsls	r2, r3, #1
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 faa9 	bl	80023e0 <HAL_GPIO_TogglePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	0099      	lsls	r1, r3, #2
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2200      	movs	r2, #0
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 fa84 	bl	80023a6 <HAL_GPIO_WritePin>
            }
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	005a      	lsls	r2, r3, #1
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 fa99 	bl	80023e0 <HAL_GPIO_TogglePin>
        for(int j = 0;j<16;j++){
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	ddbf      	ble.n	8000e3a <MC74HCT595A_shiftOut+0x8a>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MC74HCT595A_shiftOut+0x130>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f001 fa70 	bl	80023a6 <HAL_GPIO_WritePin>
    for(int i = 0;i<4;i++){
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	dc00      	bgt.n	8000ed4 <MC74HCT595A_shiftOut+0x124>
 8000ed2:	e77a      	b.n	8000dca <MC74HCT595A_shiftOut+0x1a>
	}
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b006      	add	sp, #24
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	50000400 	.word	0x50000400

08000ee4 <writeToRegisters>:

void writeToRegisters(uint16_t freq) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	1dbb      	adds	r3, r7, #6
 8000eee:	801a      	strh	r2, [r3, #0]

  // Lock the registers to ready them to be written
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <writeToRegisters+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fa55 	bl	80023a6 <HAL_GPIO_WritePin>
    MC74HCT595A_shiftOut(freq);
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ff55 	bl	8000db0 <MC74HCT595A_shiftOut>
  // Go through each of our stored patterns and write them back to the registers in order
  
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <writeToRegisters+0x38>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 fa4a 	bl	80023a6 <HAL_GPIO_WritePin>
  // Unlock the registers
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	50000400 	.word	0x50000400

08000f20 <buzzer_tone>:
 */
#include "buzzer.h"

uint32_t Channel = TIM_CHANNEL_2;
//TIM_HandleTypeDef htim1; // declare the timer handle
void buzzer_tone(int note, int duration){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	buzzer_freq(note);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 f8e1 	bl	80010f4 <buzzer_freq>
	HAL_Delay(duration);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fee3 	bl	8001d00 <HAL_Delay>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <play_note>:

void play_note(int note, int duration){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	buzzer_tone(note,9*duration/10);
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	0013      	movs	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	210a      	movs	r1, #10
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff f95e 	bl	8000218 <__divsi3>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	001a      	movs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffdb 	bl	8000f20 <buzzer_tone>
	buzzer_stop();
 8000f6a:	f000 f8e7 	bl	800113c <buzzer_stop>
	HAL_Delay(duration/10);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	210a      	movs	r1, #10
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff f950 	bl	8000218 <__divsi3>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fec0 	bl	8001d00 <HAL_Delay>
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <calculate_duration>:
//2 je cela nota
//4 je dvojdoba
//8 je pol doba
//

int calculate_duration(int bpm, int note_type){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	int beat = 4*60000/bpm; // preco je tu 4?
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <calculate_duration+0x70>)
 8000f96:	f7ff f93f 	bl	8000218 <__divsi3>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	60bb      	str	r3, [r7, #8]
	int duration = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
	if (note_type > 0) {
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dd06      	ble.n	8000fb6 <calculate_duration+0x2e>
	      // regular note, just proceed
		duration = (beat) / note_type;
 8000fa8:	6839      	ldr	r1, [r7, #0]
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	f7ff f934 	bl	8000218 <__divsi3>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e01b      	b.n	8000fee <calculate_duration+0x66>
	    } else if (note_type < 0) {
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da18      	bge.n	8000fee <calculate_duration+0x66>
	      // dotted notes are represented with negative durations!!
	    	duration = (beat) / abs(note_type);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	17da      	asrs	r2, r3, #31
 8000fc0:	189b      	adds	r3, r3, r2
 8000fc2:	4053      	eors	r3, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f7ff f926 	bl	8000218 <__divsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
	    	duration *= 1.5; // increases the duration in half for dotted notes
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff fdf1 	bl	8000bb8 <__aeabi_i2d>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <calculate_duration+0x74>)
 8000fda:	f7ff faf5 	bl	80005c8 <__aeabi_dmul>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	f7ff fdb1 	bl	8000b4c <__aeabi_d2iz>
 8000fea:	0003      	movs	r3, r0
 8000fec:	60fb      	str	r3, [r7, #12]
	    }
	return duration;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b004      	add	sp, #16
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0003a980 	.word	0x0003a980
 8000ffc:	3ff80000 	.word	0x3ff80000

08001000 <play_scale>:

void play_scale(){
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af00      	add	r7, sp, #0
	int whole_note = 4;
 8001006:	2304      	movs	r3, #4
 8001008:	623b      	str	r3, [r7, #32]
	int scale[8]={NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5};
 800100a:	003b      	movs	r3, r7
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <play_scale+0x5c>)
 800100e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001010:	c313      	stmia	r3!, {r0, r1, r4}
 8001012:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001014:	c313      	stmia	r3!, {r0, r1, r4}
 8001016:	ca03      	ldmia	r2!, {r0, r1}
 8001018:	c303      	stmia	r3!, {r0, r1}
	for (int i=0;i<8;i++){
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
 800101e:	e010      	b.n	8001042 <play_scale+0x42>
		play_note(scale[i],calculate_duration(90, whole_note));
 8001020:	003b      	movs	r3, r7
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	58d4      	ldr	r4, [r2, r3]
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	0019      	movs	r1, r3
 800102c:	205a      	movs	r0, #90	; 0x5a
 800102e:	f7ff ffab 	bl	8000f88 <calculate_duration>
 8001032:	0003      	movs	r3, r0
 8001034:	0019      	movs	r1, r3
 8001036:	0020      	movs	r0, r4
 8001038:	f7ff ff83 	bl	8000f42 <play_note>
	for (int i=0;i<8;i++){
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	3301      	adds	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	2b07      	cmp	r3, #7
 8001046:	ddeb      	ble.n	8001020 <play_scale+0x20>
	}
	HAL_Delay(1000);
 8001048:	23fa      	movs	r3, #250	; 0xfa
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fe57 	bl	8001d00 <HAL_Delay>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b00b      	add	sp, #44	; 0x2c
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	080060b4 	.word	0x080060b4

08001060 <play_rick_roll>:

void play_rick_roll(){
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b0be      	sub	sp, #248	; 0xf8
 8001064:	af00      	add	r7, sp, #0
	int bpm = 115;
 8001066:	2373      	movs	r3, #115	; 0x73
 8001068:	22f0      	movs	r2, #240	; 0xf0
 800106a:	18ba      	adds	r2, r7, r2
 800106c:	6013      	str	r3, [r2, #0]
	int melody[] = {
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <play_rick_roll+0x8c>)
 8001072:	0010      	movs	r0, r2
 8001074:	0019      	movs	r1, r3
 8001076:	23e8      	movs	r3, #232	; 0xe8
 8001078:	001a      	movs	r2, r3
 800107a:	f004 ffbb 	bl	8005ff4 <memcpy>
	  NOTE_E5,-8, NOTE_E5,-8, NOTE_D5,-8, NOTE_CS5,16, NOTE_B4,-8, NOTE_A4,16, NOTE_B4,16, NOTE_D5,16, NOTE_B4,16, //18
	  NOTE_D5,4, NOTE_E5,8, NOTE_CS5,-8, NOTE_B4,16, NOTE_A4,8, NOTE_A4,8, NOTE_A4,8,
	  NOTE_E5,4, NOTE_D5,2,
	};

	int for_cycle_end = sizeof(melody) / sizeof(melody[0]);
 800107e:	233a      	movs	r3, #58	; 0x3a
 8001080:	22ec      	movs	r2, #236	; 0xec
 8001082:	18ba      	adds	r2, r7, r2
 8001084:	6013      	str	r3, [r2, #0]

	for (int this_note = 0;this_note< for_cycle_end; this_note+=2){
 8001086:	2300      	movs	r3, #0
 8001088:	22f4      	movs	r2, #244	; 0xf4
 800108a:	18ba      	adds	r2, r7, r2
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e01c      	b.n	80010ca <play_rick_roll+0x6a>
		play_note(melody[this_note], calculate_duration(bpm,melody[this_note+1]));
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	25f4      	movs	r5, #244	; 0xf4
 8001094:	197a      	adds	r2, r7, r5
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	58d4      	ldr	r4, [r2, r3]
 800109c:	197b      	adds	r3, r7, r5
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	58d2      	ldr	r2, [r2, r3]
 80010a8:	23f0      	movs	r3, #240	; 0xf0
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff69 	bl	8000f88 <calculate_duration>
 80010b6:	0003      	movs	r3, r0
 80010b8:	0019      	movs	r1, r3
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff ff41 	bl	8000f42 <play_note>
	for (int this_note = 0;this_note< for_cycle_end; this_note+=2){
 80010c0:	197b      	adds	r3, r7, r5
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	197a      	adds	r2, r7, r5
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	23f4      	movs	r3, #244	; 0xf4
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	23ec      	movs	r3, #236	; 0xec
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbda      	blt.n	8001090 <play_rick_roll+0x30>
	}

	HAL_Delay(3000);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <play_rick_roll+0x90>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fe0f 	bl	8001d00 <HAL_Delay>
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b03e      	add	sp, #248	; 0xf8
 80010e8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	080060d4 	.word	0x080060d4
 80010f0:	00000bb8 	.word	0x00000bb8

080010f4 <buzzer_freq>:
	TIM1->CCR2 = arr/amp;//1150;  //duty cycle
	TIM1->ARR = arr;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
void buzzer_freq(int freq) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	int arr = 1000000/freq;   //ARR diveder
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <buzzer_freq+0x3c>)
 8001100:	f7ff f88a 	bl	8000218 <__divsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	60fb      	str	r3, [r7, #12]
//	TIM1->CCR1 = 1000;
	TIM1->CCR2 = arr/2;//1150;  //duty cycle
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da00      	bge.n	8001110 <buzzer_freq+0x1c>
 800110e:	3301      	adds	r3, #1
 8001110:	105b      	asrs	r3, r3, #1
 8001112:	001a      	movs	r2, r3
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <buzzer_freq+0x40>)
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->ARR = arr;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <buzzer_freq+0x40>)
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <buzzer_freq+0x44>)
 8001120:	2104      	movs	r1, #4
 8001122:	0018      	movs	r0, r3
 8001124:	f002 f9c2 	bl	80034ac <HAL_TIM_PWM_Start>

}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}
 8001130:	000f4240 	.word	0x000f4240
 8001134:	40012c00 	.word	0x40012c00
 8001138:	20000094 	.word	0x20000094

0800113c <buzzer_stop>:
void buzzer_stop(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // Stop the PWM signal
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <buzzer_stop+0x14>)
 8001142:	2104      	movs	r1, #4
 8001144:	0018      	movs	r0, r3
 8001146:	f002 faa1 	bl	800368c <HAL_TIM_PWM_Stop>
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000094 	.word	0x20000094

08001154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b08b      	sub	sp, #44	; 0x2c
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2414      	movs	r4, #20
 800115c:	193b      	adds	r3, r7, r4
 800115e:	0018      	movs	r0, r3
 8001160:	2314      	movs	r3, #20
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f004 feff 	bl	8005f68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <MX_GPIO_Init+0x150>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
 8001176:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	2204      	movs	r2, #4
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001188:	2120      	movs	r1, #32
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <MX_GPIO_Init+0x150>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	2220      	movs	r2, #32
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <MX_GPIO_Init+0x150>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011aa:	2201      	movs	r2, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_GPIO_Init+0x150>)
 80011c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_8|DataOut_Pin, GPIO_PIN_RESET);
 80011ca:	23c8      	movs	r3, #200	; 0xc8
 80011cc:	0099      	lsls	r1, r3, #2
 80011ce:	23a0      	movs	r3, #160	; 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	2200      	movs	r2, #0
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 f8e6 	bl	80023a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <MX_GPIO_Init+0x154>)
 80011dc:	2200      	movs	r2, #0
 80011de:	2120      	movs	r1, #32
 80011e0:	0018      	movs	r0, r3
 80011e2:	f001 f8e0 	bl	80023a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2212      	movs	r2, #18
 80011ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2201      	movs	r2, #1
 80011f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	193a      	adds	r2, r7, r4
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f000 ff47 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001206:	193b      	adds	r3, r7, r4
 8001208:	2220      	movs	r2, #32
 800120a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	193b      	adds	r3, r7, r4
 800120e:	2201      	movs	r2, #1
 8001210:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2202      	movs	r2, #2
 800121c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800121e:	193a      	adds	r2, r7, r4
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f000 ff34 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2202      	movs	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2201      	movs	r2, #1
 800123c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 800123e:	193b      	adds	r3, r7, r4
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <MX_GPIO_Init+0x154>)
 8001242:	0019      	movs	r1, r3
 8001244:	0010      	movs	r0, r2
 8001246:	f000 ff25 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|DataOut_Pin;
 800124a:	0021      	movs	r1, r4
 800124c:	187b      	adds	r3, r7, r1
 800124e:	22c0      	movs	r2, #192	; 0xc0
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	000c      	movs	r4, r1
 8001256:	193b      	adds	r3, r7, r4
 8001258:	2201      	movs	r2, #1
 800125a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	193b      	adds	r3, r7, r4
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	193a      	adds	r2, r7, r4
 800126a:	23a0      	movs	r3, #160	; 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f000 ff0f 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001276:	0021      	movs	r1, r4
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2220      	movs	r2, #32
 800127c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2201      	movs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	187b      	adds	r3, r7, r1
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <MX_GPIO_Init+0x154>)
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f000 fefc 	bl	8002094 <HAL_GPIO_Init>

}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b00b      	add	sp, #44	; 0x2c
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	50000400 	.word	0x50000400

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b0bb      	sub	sp, #236	; 0xec
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fc9f 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f9ad 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff ff4b 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012be:	f000 fbb9 	bl	8001a34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012c2:	f000 fa77 	bl	80017b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MC74HCT595A_init();
 80012c6:	f7ff fcd1 	bl	8000c6c <MC74HCT595A_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t Rx_data[150] = {0};  //  creating a buffer of 10 bytes
 80012ca:	233c      	movs	r3, #60	; 0x3c
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	3304      	adds	r3, #4
 80012d4:	2292      	movs	r2, #146	; 0x92
 80012d6:	2100      	movs	r1, #0
 80012d8:	0018      	movs	r0, r3
 80012da:	f004 fe45 	bl	8005f68 <memset>
  uint8_t frequnecy_usart[20]={0};
 80012de:	2328      	movs	r3, #40	; 0x28
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	2210      	movs	r2, #16
 80012ea:	2100      	movs	r1, #0
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 fe3b 	bl	8005f68 <memset>
  uint8_t type_usart[20]={0};
 80012f2:	2314      	movs	r3, #20
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	2210      	movs	r2, #16
 80012fe:	2100      	movs	r1, #0
 8001300:	0018      	movs	r0, r3
 8001302:	f004 fe31 	bl	8005f68 <memset>
  uint8_t bpm_usart[20]={0};
 8001306:	003b      	movs	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	3304      	adds	r3, #4
 800130e:	2210      	movs	r2, #16
 8001310:	2100      	movs	r1, #0
 8001312:	0018      	movs	r0, r3
 8001314:	f004 fe28 	bl	8005f68 <memset>
    uint8_t tones = 0;
 8001318:	23e7      	movs	r3, #231	; 0xe7
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    uint8_t commas = 0;
 8001320:	23e6      	movs	r3, #230	; 0xe6
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
  bool start_read = false;
 8001328:	23d3      	movs	r3, #211	; 0xd3
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
   buzzer_stop();
 8001330:	f7ff ff04 	bl	800113c <buzzer_stop>
    uint16_t freq = 0;
 8001334:	23e4      	movs	r3, #228	; 0xe4
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	2200      	movs	r2, #0
 800133a:	801a      	strh	r2, [r3, #0]

    bool button_pressed = false;
 800133c:	23e3      	movs	r3, #227	; 0xe3
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    bool ricko_rool = false;
 8001344:	23e2      	movs	r3, #226	; 0xe2
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
    {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(freq>=10000)
 800134c:	23e4      	movs	r3, #228	; 0xe4
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	4aad      	ldr	r2, [pc, #692]	; (8001608 <main+0x35c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d904      	bls.n	8001362 <main+0xb6>
        writeToRegisters(9999);
 8001358:	4bab      	ldr	r3, [pc, #684]	; (8001608 <main+0x35c>)
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fdc2 	bl	8000ee4 <writeToRegisters>
 8001360:	e005      	b.n	800136e <main+0xc2>
    else
        writeToRegisters(freq);
 8001362:	23e4      	movs	r3, #228	; 0xe4
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fdbb 	bl	8000ee4 <writeToRegisters>
    if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2102      	movs	r1, #2
 8001374:	0018      	movs	r0, r3
 8001376:	f000 fff9 	bl	800236c <HAL_GPIO_ReadPin>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d11d      	bne.n	80013ba <main+0x10e>
        if(freq<10000 && !button_pressed)
 800137e:	21e4      	movs	r1, #228	; 0xe4
 8001380:	187b      	adds	r3, r7, r1
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4aa0      	ldr	r2, [pc, #640]	; (8001608 <main+0x35c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d80c      	bhi.n	80013a4 <main+0xf8>
 800138a:	23e3      	movs	r3, #227	; 0xe3
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4053      	eors	r3, r2
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <main+0xf8>
            freq+=100;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	187a      	adds	r2, r7, r1
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	3264      	adds	r2, #100	; 0x64
 80013a2:	801a      	strh	r2, [r3, #0]
        button_pressed = true;
 80013a4:	23e3      	movs	r3, #227	; 0xe3
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
         buzzer_freq(freq);
 80013ac:	23e4      	movs	r3, #228	; 0xe4
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff fe9e 	bl	80010f4 <buzzer_freq>
 80013b8:	e04f      	b.n	800145a <main+0x1ae>
	}else if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)){
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	2110      	movs	r1, #16
 80013c0:	0018      	movs	r0, r3
 80013c2:	f000 ffd3 	bl	800236c <HAL_GPIO_ReadPin>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d11c      	bne.n	8001404 <main+0x158>
        if(freq>0 && !button_pressed)
 80013ca:	21e4      	movs	r1, #228	; 0xe4
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00c      	beq.n	80013ee <main+0x142>
 80013d4:	23e3      	movs	r3, #227	; 0xe3
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2201      	movs	r2, #1
 80013dc:	4053      	eors	r3, r2
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <main+0x142>
            freq-=100;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	187a      	adds	r2, r7, r1
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	3a64      	subs	r2, #100	; 0x64
 80013ec:	801a      	strh	r2, [r3, #0]
		button_pressed = true;
 80013ee:	23e3      	movs	r3, #227	; 0xe3
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
         buzzer_freq(freq);
 80013f6:	23e4      	movs	r3, #228	; 0xe4
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fe79 	bl	80010f4 <buzzer_freq>
 8001402:	e02a      	b.n	800145a <main+0x1ae>
	}else if(!HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 8001404:	4b81      	ldr	r3, [pc, #516]	; (800160c <main+0x360>)
 8001406:	2102      	movs	r1, #2
 8001408:	0018      	movs	r0, r3
 800140a:	f000 ffaf 	bl	800236c <HAL_GPIO_ReadPin>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d120      	bne.n	8001454 <main+0x1a8>
		if(!button_pressed){
 8001412:	23e3      	movs	r3, #227	; 0xe3
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4053      	eors	r3, r2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d013      	beq.n	800144a <main+0x19e>
			if(!ricko_rool){
 8001422:	24e2      	movs	r4, #226	; 0xe2
 8001424:	193b      	adds	r3, r7, r4
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	4053      	eors	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <main+0x192>
				 play_scale();
 8001432:	f7ff fde5 	bl	8001000 <play_scale>
				 ricko_rool = true;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	e005      	b.n	800144a <main+0x19e>
			}else{
				 play_rick_roll();
 800143e:	f7ff fe0f 	bl	8001060 <play_rick_roll>
				 ricko_rool = false;
 8001442:	23e2      	movs	r3, #226	; 0xe2
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			}
		}
		 button_pressed = true;
 800144a:	23e3      	movs	r3, #227	; 0xe3
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e002      	b.n	800145a <main+0x1ae>
	}else{
		buzzer_freq(0);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fe4d 	bl	80010f4 <buzzer_freq>
	}
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) && HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4) && HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	2102      	movs	r1, #2
 8001460:	0018      	movs	r0, r3
 8001462:	f000 ff83 	bl	800236c <HAL_GPIO_ReadPin>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d012      	beq.n	8001490 <main+0x1e4>
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	2110      	movs	r1, #16
 8001470:	0018      	movs	r0, r3
 8001472:	f000 ff7b 	bl	800236c <HAL_GPIO_ReadPin>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d00a      	beq.n	8001490 <main+0x1e4>
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <main+0x360>)
 800147c:	2102      	movs	r1, #2
 800147e:	0018      	movs	r0, r3
 8001480:	f000 ff74 	bl	800236c <HAL_GPIO_ReadPin>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d003      	beq.n	8001490 <main+0x1e4>
        button_pressed = false;
 8001488:	23e3      	movs	r3, #227	; 0xe3
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive (&huart2, Rx_data, 1, 10);  // receive 4 bytes of data
 8001490:	243c      	movs	r4, #60	; 0x3c
 8001492:	1939      	adds	r1, r7, r4
 8001494:	485e      	ldr	r0, [pc, #376]	; (8001610 <main+0x364>)
 8001496:	230a      	movs	r3, #10
 8001498:	2201      	movs	r2, #1
 800149a:	f003 f8dd 	bl	8004658 <HAL_UART_Receive>
    if(Rx_data[0] == '$'){
 800149e:	0022      	movs	r2, r4
 80014a0:	18bb      	adds	r3, r7, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b24      	cmp	r3, #36	; 0x24
 80014a6:	d000      	beq.n	80014aa <main+0x1fe>
 80014a8:	e0a9      	b.n	80015fe <main+0x352>
    	HAL_UART_Receive (&huart2, Rx_data, 150, 500);
 80014aa:	23fa      	movs	r3, #250	; 0xfa
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	0014      	movs	r4, r2
 80014b0:	18b9      	adds	r1, r7, r2
 80014b2:	4857      	ldr	r0, [pc, #348]	; (8001610 <main+0x364>)
 80014b4:	2296      	movs	r2, #150	; 0x96
 80014b6:	f003 f8cf 	bl	8004658 <HAL_UART_Receive>
		if(Rx_data[0] == '&'){
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b26      	cmp	r3, #38	; 0x26
 80014c0:	d000      	beq.n	80014c4 <main+0x218>
 80014c2:	e09c      	b.n	80015fe <main+0x352>
			char *temp;
			int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	22d8      	movs	r2, #216	; 0xd8
 80014c8:	18ba      	adds	r2, r7, r2
 80014ca:	6013      	str	r3, [r2, #0]
			for(size_t i = 1; i <100;i++){
 80014cc:	2301      	movs	r3, #1
 80014ce:	22d4      	movs	r2, #212	; 0xd4
 80014d0:	18ba      	adds	r2, r7, r2
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e08d      	b.n	80015f2 <main+0x346>
				if(Rx_data[i] == '%'){
 80014d6:	233c      	movs	r3, #60	; 0x3c
 80014d8:	18fa      	adds	r2, r7, r3
 80014da:	23d4      	movs	r3, #212	; 0xd4
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b25      	cmp	r3, #37	; 0x25
 80014e6:	d106      	bne.n	80014f6 <main+0x24a>
					free(temp);
 80014e8:	23dc      	movs	r3, #220	; 0xdc
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f004 fbea 	bl	8005cc8 <free>
					break;
 80014f4:	e083      	b.n	80015fe <main+0x352>
				}
				else if(Rx_data[i] == ','){
 80014f6:	233c      	movs	r3, #60	; 0x3c
 80014f8:	18fa      	adds	r2, r7, r3
 80014fa:	23d4      	movs	r3, #212	; 0xd4
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b2c      	cmp	r3, #44	; 0x2c
 8001506:	d14d      	bne.n	80015a4 <main+0x2f8>
					j=0;
 8001508:	2300      	movs	r3, #0
 800150a:	22d8      	movs	r2, #216	; 0xd8
 800150c:	18ba      	adds	r2, r7, r2
 800150e:	6013      	str	r3, [r2, #0]
					commas++;
 8001510:	21e6      	movs	r1, #230	; 0xe6
 8001512:	187b      	adds	r3, r7, r1
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	187b      	adds	r3, r7, r1
 8001518:	3201      	adds	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
					switch (commas)
 800151c:	187b      	adds	r3, r7, r1
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d023      	beq.n	800156c <main+0x2c0>
 8001524:	dc30      	bgt.n	8001588 <main+0x2dc>
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <main+0x284>
 800152a:	2b02      	cmp	r3, #2
 800152c:	d00f      	beq.n	800154e <main+0x2a2>
						break;
					case 3:
						bpm_usart[tones] = atoi(temp);
						break;
					default:
						break;
 800152e:	e02b      	b.n	8001588 <main+0x2dc>
						frequnecy_usart[tones] = atoi(temp);
 8001530:	23dc      	movs	r3, #220	; 0xdc
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0018      	movs	r0, r3
 8001538:	f004 fbb6 	bl	8005ca8 <atoi>
 800153c:	0002      	movs	r2, r0
 800153e:	23e7      	movs	r3, #231	; 0xe7
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2d1      	uxtb	r1, r2
 8001546:	2228      	movs	r2, #40	; 0x28
 8001548:	18ba      	adds	r2, r7, r2
 800154a:	54d1      	strb	r1, [r2, r3]
						break;
 800154c:	e01d      	b.n	800158a <main+0x2de>
						type_usart[tones] = atoi(temp);
 800154e:	23dc      	movs	r3, #220	; 0xdc
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0018      	movs	r0, r3
 8001556:	f004 fba7 	bl	8005ca8 <atoi>
 800155a:	0002      	movs	r2, r0
 800155c:	23e7      	movs	r3, #231	; 0xe7
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2d1      	uxtb	r1, r2
 8001564:	2214      	movs	r2, #20
 8001566:	18ba      	adds	r2, r7, r2
 8001568:	54d1      	strb	r1, [r2, r3]
						break;
 800156a:	e00e      	b.n	800158a <main+0x2de>
						bpm_usart[tones] = atoi(temp);
 800156c:	23dc      	movs	r3, #220	; 0xdc
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0018      	movs	r0, r3
 8001574:	f004 fb98 	bl	8005ca8 <atoi>
 8001578:	0002      	movs	r2, r0
 800157a:	23e7      	movs	r3, #231	; 0xe7
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2d1      	uxtb	r1, r2
 8001582:	003a      	movs	r2, r7
 8001584:	54d1      	strb	r1, [r2, r3]
						break;
 8001586:	e000      	b.n	800158a <main+0x2de>
						break;
 8001588:	46c0      	nop			; (mov r8, r8)
					}
					free(temp);
 800158a:	24dc      	movs	r4, #220	; 0xdc
 800158c:	193b      	adds	r3, r7, r4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f004 fb99 	bl	8005cc8 <free>
					temp = malloc(3*sizeof(char));
 8001596:	2003      	movs	r0, #3
 8001598:	f004 fb8c 	bl	8005cb4 <malloc>
 800159c:	0003      	movs	r3, r0
 800159e:	193a      	adds	r2, r7, r4
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e012      	b.n	80015ca <main+0x31e>
				}else{
					temp[j++] = Rx_data[i];
 80015a4:	21d8      	movs	r1, #216	; 0xd8
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	1879      	adds	r1, r7, r1
 80015ae:	600a      	str	r2, [r1, #0]
 80015b0:	001a      	movs	r2, r3
 80015b2:	23dc      	movs	r3, #220	; 0xdc
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	189b      	adds	r3, r3, r2
 80015ba:	223c      	movs	r2, #60	; 0x3c
 80015bc:	18b9      	adds	r1, r7, r2
 80015be:	22d4      	movs	r2, #212	; 0xd4
 80015c0:	18ba      	adds	r2, r7, r2
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	188a      	adds	r2, r1, r2
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	701a      	strb	r2, [r3, #0]
				}
				if(commas == 3){
 80015ca:	22e6      	movs	r2, #230	; 0xe6
 80015cc:	18bb      	adds	r3, r7, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d108      	bne.n	80015e6 <main+0x33a>
					commas = 0;
 80015d4:	18bb      	adds	r3, r7, r2
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
					tones++;
 80015da:	21e7      	movs	r1, #231	; 0xe7
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	3201      	adds	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
			for(size_t i = 1; i <100;i++){
 80015e6:	22d4      	movs	r2, #212	; 0xd4
 80015e8:	18bb      	adds	r3, r7, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	18ba      	adds	r2, r7, r2
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	23d4      	movs	r3, #212	; 0xd4
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b63      	cmp	r3, #99	; 0x63
 80015fa:	d800      	bhi.n	80015fe <main+0x352>
 80015fc:	e76b      	b.n	80014d6 <main+0x22a>
			}
		}

    }
//    	HAL_UART_Transmit(&huart2,Rx_data,sizeof(Rx_data),10);// Sending in normal mode
   Rx_data[0] = 0;
 80015fe:	233c      	movs	r3, #60	; 0x3c
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    if(freq>=10000)
 8001606:	e6a1      	b.n	800134c <main+0xa0>
 8001608:	0000270f 	.word	0x0000270f
 800160c:	50000400 	.word	0x50000400
 8001610:	200000e0 	.word	0x200000e0

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b095      	sub	sp, #84	; 0x54
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	2414      	movs	r4, #20
 800161c:	193b      	adds	r3, r7, r4
 800161e:	0018      	movs	r0, r3
 8001620:	233c      	movs	r3, #60	; 0x3c
 8001622:	001a      	movs	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f004 fc9f 	bl	8005f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	0018      	movs	r0, r3
 800162e:	2310      	movs	r3, #16
 8001630:	001a      	movs	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	f004 fc98 	bl	8005f68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	0018      	movs	r0, r3
 800163e:	f000 feeb 	bl	8002418 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001642:	193b      	adds	r3, r7, r4
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	193b      	adds	r3, r7, r4
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0052      	lsls	r2, r2, #1
 800164e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001650:	193b      	adds	r3, r7, r4
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001656:	193b      	adds	r3, r7, r4
 8001658:	2240      	movs	r2, #64	; 0x40
 800165a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800165c:	193b      	adds	r3, r7, r4
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	193b      	adds	r3, r7, r4
 8001664:	0018      	movs	r0, r3
 8001666:	f000 ff23 	bl	80024b0 <HAL_RCC_OscConfig>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800166e:	f000 f819 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2100      	movs	r1, #0
 800168e:	0018      	movs	r0, r3
 8001690:	f001 fa6e 	bl	8002b70 <HAL_RCC_ClockConfig>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001698:	f000 f804 	bl	80016a4 <Error_Handler>
  }
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b015      	add	sp, #84	; 0x54
 80016a2:	bd90      	pop	{r4, r7, pc}

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_MspInit+0x44>)
 80016b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_MspInit+0x44>)
 80016bc:	2101      	movs	r1, #1
 80016be:	430a      	orrs	r2, r1
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_MspInit+0x44>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x44>)
 80016d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_MspInit+0x44>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0549      	lsls	r1, r1, #21
 80016d8:	430a      	orrs	r2, r1
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_MspInit+0x44>)
 80016de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	055b      	lsls	r3, r3, #21
 80016e4:	4013      	ands	r3, r2
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40021000 	.word	0x40021000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 fad4 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <USART2_LPUART2_IRQHandler+0x10>)
 800172e:	0018      	movs	r0, r3
 8001730:	f003 f878 	bl	8004824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */
  while(1){}
 8001734:	e7fe      	b.n	8001734 <USART2_LPUART2_IRQHandler+0xc>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	200000e0 	.word	0x200000e0

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f004 fc16 	bl	8005f9c <__errno>
 8001770:	0003      	movs	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	2301      	movs	r3, #1
 8001778:	425b      	negs	r3, r3
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	18d2      	adds	r2, r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b006      	add	sp, #24
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20024000 	.word	0x20024000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000090 	.word	0x20000090
 80017a4:	200002c0 	.word	0x200002c0

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09c      	sub	sp, #112	; 0x70
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	2360      	movs	r3, #96	; 0x60
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	0018      	movs	r0, r3
 80017c0:	2310      	movs	r3, #16
 80017c2:	001a      	movs	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f004 fbcf 	bl	8005f68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	2354      	movs	r3, #84	; 0x54
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	0018      	movs	r0, r3
 80017d0:	230c      	movs	r3, #12
 80017d2:	001a      	movs	r2, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	f004 fbc7 	bl	8005f68 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017da:	2338      	movs	r3, #56	; 0x38
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	0018      	movs	r0, r3
 80017e0:	231c      	movs	r3, #28
 80017e2:	001a      	movs	r2, r3
 80017e4:	2100      	movs	r1, #0
 80017e6:	f004 fbbf 	bl	8005f68 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	0018      	movs	r0, r3
 80017ee:	2334      	movs	r3, #52	; 0x34
 80017f0:	001a      	movs	r2, r3
 80017f2:	2100      	movs	r1, #0
 80017f4:	f004 fbb8 	bl	8005f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f8:	4b51      	ldr	r3, [pc, #324]	; (8001940 <MX_TIM1_Init+0x18c>)
 80017fa:	4a52      	ldr	r2, [pc, #328]	; (8001944 <MX_TIM1_Init+0x190>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80017fe:	4b50      	ldr	r3, [pc, #320]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001800:	220f      	movs	r2, #15
 8001802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800180a:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <MX_TIM1_Init+0x18c>)
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <MX_TIM1_Init+0x194>)
 800180e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <MX_TIM1_Init+0x18c>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001824:	0018      	movs	r0, r3
 8001826:	f001 fd89 	bl	800333c <HAL_TIM_Base_Init>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800182e:	f7ff ff39 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001832:	2160      	movs	r1, #96	; 0x60
 8001834:	187b      	adds	r3, r7, r1
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	0152      	lsls	r2, r2, #5
 800183a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183c:	187a      	adds	r2, r7, r1
 800183e:	4b40      	ldr	r3, [pc, #256]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f002 f8ae 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800184c:	f7ff ff2a 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001852:	0018      	movs	r0, r3
 8001854:	f001 fdca 	bl	80033ec <HAL_TIM_PWM_Init>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800185c:	f7ff ff22 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2154      	movs	r1, #84	; 0x54
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001874:	187a      	adds	r2, r7, r1
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f002 fd84 	bl	8004388 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001884:	f7ff ff0e 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2138      	movs	r1, #56	; 0x38
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2260      	movs	r2, #96	; 0x60
 800188e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b4:	1879      	adds	r1, r7, r1
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_TIM1_Init+0x18c>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	0018      	movs	r0, r3
 80018bc:	f001 ff72 	bl	80037a4 <HAL_TIM_PWM_ConfigChannel>
 80018c0:	1e03      	subs	r3, r0, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80018c4:	f7ff feee 	bl	80016a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	0192      	lsls	r2, r2, #6
 80018ec:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	0492      	lsls	r2, r2, #18
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800191a:	1d3a      	adds	r2, r7, #4
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_TIM1_Init+0x18c>)
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f002 fda7 	bl	8004474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800192a:	f7ff febb 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <MX_TIM1_Init+0x18c>)
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f841 	bl	80019b8 <HAL_TIM_MspPostInit>

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b01c      	add	sp, #112	; 0x70
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20000094 	.word	0x20000094
 8001944:	40012c00 	.word	0x40012c00
 8001948:	00002710 	.word	0x00002710

0800194c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b097      	sub	sp, #92	; 0x5c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001954:	240c      	movs	r4, #12
 8001956:	193b      	adds	r3, r7, r4
 8001958:	0018      	movs	r0, r3
 800195a:	234c      	movs	r3, #76	; 0x4c
 800195c:	001a      	movs	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	f004 fb02 	bl	8005f68 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_TIM_Base_MspInit+0x64>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11c      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800196e:	193b      	adds	r3, r7, r4
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0392      	lsls	r2, r2, #14
 8001974:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001976:	193b      	adds	r3, r7, r4
 8001978:	2200      	movs	r2, #0
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197c:	193b      	adds	r3, r7, r4
 800197e:	0018      	movs	r0, r3
 8001980:	f001 faa0 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001988:	f7ff fe8c 	bl	80016a4 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_TIM_Base_MspInit+0x68>)
 800198e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_TIM_Base_MspInit+0x68>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	0109      	lsls	r1, r1, #4
 8001996:	430a      	orrs	r2, r1
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_TIM_Base_MspInit+0x68>)
 800199c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b017      	add	sp, #92	; 0x5c
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	240c      	movs	r4, #12
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	0018      	movs	r0, r3
 80019c6:	2314      	movs	r3, #20
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f004 facc 	bl	8005f68 <memset>
  if(timHandle->Instance==TIM1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <HAL_TIM_MspPostInit+0x70>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d121      	bne.n	8001a1e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_TIM_MspPostInit+0x74>)
 80019dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_TIM_MspPostInit+0x74>)
 80019e0:	2102      	movs	r1, #2
 80019e2:	430a      	orrs	r2, r1
 80019e4:	635a      	str	r2, [r3, #52]	; 0x34
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_TIM_MspPostInit+0x74>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f2:	0021      	movs	r1, r4
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2208      	movs	r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2202      	movs	r2, #2
 80019fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2201      	movs	r2, #1
 8001a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_TIM_MspPostInit+0x78>)
 8001a16:	0019      	movs	r1, r3
 8001a18:	0010      	movs	r0, r2
 8001a1a:	f000 fb3b 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b009      	add	sp, #36	; 0x24
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	50000400 	.word	0x50000400

08001a34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <MX_USART2_UART_Init+0x98>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a40:	22e1      	movs	r2, #225	; 0xe1
 8001a42:	0252      	lsls	r2, r2, #9
 8001a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f002 fd94 	bl	80045ac <HAL_UART_Init>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a88:	f7ff fe0c 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	0018      	movs	r0, r3
 8001a92:	f004 f829 	bl	8005ae8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a9a:	f7ff fe03 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f004 f860 	bl	8005b68 <HAL_UARTEx_SetRxFifoThreshold>
 8001aa8:	1e03      	subs	r3, r0, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001aac:	f7ff fdfa 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <MX_USART2_UART_Init+0x94>)
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f003 ffde 	bl	8005a74 <HAL_UARTEx_DisableFifoMode>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001abc:	f7ff fdf2 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	200000e0 	.word	0x200000e0
 8001acc:	40004400 	.word	0x40004400

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b09d      	sub	sp, #116	; 0x74
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	235c      	movs	r3, #92	; 0x5c
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	0018      	movs	r0, r3
 8001ade:	2314      	movs	r3, #20
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f004 fa40 	bl	8005f68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	2410      	movs	r4, #16
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	0018      	movs	r0, r3
 8001aee:	234c      	movs	r3, #76	; 0x4c
 8001af0:	001a      	movs	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f004 fa38 	bl	8005f68 <memset>
  if(uartHandle->Instance==USART2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a26      	ldr	r2, [pc, #152]	; (8001b98 <HAL_UART_MspInit+0xc8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d146      	bne.n	8001b90 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	0018      	movs	r0, r3
 8001b12:	f001 f9d7 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b1a:	f7ff fdc3 	bl	80016a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_UART_MspInit+0xcc>)
 8001b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_UART_MspInit+0xcc>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0289      	lsls	r1, r1, #10
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_UART_MspInit+0xcc>)
 8001b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_UART_MspInit+0xcc>)
 8001b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_UART_MspInit+0xcc>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_UART_MspInit+0xcc>)
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b52:	215c      	movs	r1, #92	; 0x5c
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2201      	movs	r2, #1
 8001b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	187a      	adds	r2, r7, r1
 8001b74:	23a0      	movs	r3, #160	; 0xa0
 8001b76:	05db      	lsls	r3, r3, #23
 8001b78:	0011      	movs	r1, r2
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fa8a 	bl	8002094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	201c      	movs	r0, #28
 8001b86:	f000 f98b 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001b8a:	201c      	movs	r0, #28
 8001b8c:	f000 f99d 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b01d      	add	sp, #116	; 0x74
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba4:	f7ff fe00 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bce:	f004 f9eb 	bl	8005fa8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bd2:	f7ff fb6b 	bl	80012ac <main>

08001bd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   r0, =_estack
 8001bd8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001be4:	080063d4 	.word	0x080063d4
  ldr r2, =_sbss
 8001be8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001bec:	200002c0 	.word	0x200002c0

08001bf0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_COMP_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_Init+0x3c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_Init+0x3c>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0049      	lsls	r1, r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f810 	bl	8001c34 <HAL_InitTick>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c18:	1dfb      	adds	r3, r7, #7
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e001      	b.n	8001c24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fd46 	bl	80016b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_InitTick+0x88>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d02b      	beq.n	8001ca4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_InitTick+0x8c>)
 8001c4e:	681c      	ldr	r4, [r3, #0]
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_InitTick+0x88>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	0019      	movs	r1, r3
 8001c56:	23fa      	movs	r3, #250	; 0xfa
 8001c58:	0098      	lsls	r0, r3, #2
 8001c5a:	f7fe fa53 	bl	8000104 <__udivsi3>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	0019      	movs	r1, r3
 8001c62:	0020      	movs	r0, r4
 8001c64:	f7fe fa4e 	bl	8000104 <__udivsi3>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 f93d 	bl	8001eea <HAL_SYSTICK_Config>
 8001c70:	1e03      	subs	r3, r0, #0
 8001c72:	d112      	bne.n	8001c9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d80a      	bhi.n	8001c90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	425b      	negs	r3, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f90c 	bl	8001ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_InitTick+0x90>)
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00d      	b.n	8001cac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c90:	230f      	movs	r3, #15
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e008      	b.n	8001cac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e003      	b.n	8001cac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001cac:	230f      	movs	r3, #15
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b005      	add	sp, #20
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_IncTick+0x1c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	18d2      	adds	r2, r2, r3
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000174 	.word	0x20000174

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <HAL_GetTick+0x10>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000174 	.word	0x20000174

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff fff0 	bl	8001cec <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3301      	adds	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	001a      	movs	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	189b      	adds	r3, r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	f7ff ffe0 	bl	8001cec <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	20000008 	.word	0x20000008

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	0002      	movs	r2, r0
 8001d50:	1dfb      	adds	r3, r7, #7
 8001d52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5a:	d809      	bhi.n	8001d70 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	001a      	movs	r2, r3
 8001d62:	231f      	movs	r3, #31
 8001d64:	401a      	ands	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_EnableIRQ+0x30>)
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4091      	lsls	r1, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	0002      	movs	r2, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d90:	d828      	bhi.n	8001de4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d92:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <__NVIC_SetPriority+0xd4>)
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	33c0      	adds	r3, #192	; 0xc0
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	589b      	ldr	r3, [r3, r2]
 8001da2:	1dfa      	adds	r2, r7, #7
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	0011      	movs	r1, r2
 8001da8:	2203      	movs	r2, #3
 8001daa:	400a      	ands	r2, r1
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	21ff      	movs	r1, #255	; 0xff
 8001db0:	4091      	lsls	r1, r2
 8001db2:	000a      	movs	r2, r1
 8001db4:	43d2      	mvns	r2, r2
 8001db6:	401a      	ands	r2, r3
 8001db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2303      	movs	r3, #3
 8001dca:	4003      	ands	r3, r0
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd0:	481f      	ldr	r0, [pc, #124]	; (8001e50 <__NVIC_SetPriority+0xd4>)
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	33c0      	adds	r3, #192	; 0xc0
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001de2:	e031      	b.n	8001e48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <__NVIC_SetPriority+0xd8>)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	0019      	movs	r1, r3
 8001dec:	230f      	movs	r3, #15
 8001dee:	400b      	ands	r3, r1
 8001df0:	3b08      	subs	r3, #8
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3306      	adds	r3, #6
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1dfa      	adds	r2, r7, #7
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	0011      	movs	r1, r2
 8001e04:	2203      	movs	r2, #3
 8001e06:	400a      	ands	r2, r1
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	2303      	movs	r3, #3
 8001e26:	4003      	ands	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <__NVIC_SetPriority+0xd8>)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	001c      	movs	r4, r3
 8001e34:	230f      	movs	r3, #15
 8001e36:	4023      	ands	r3, r4
 8001e38:	3b08      	subs	r3, #8
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	3306      	adds	r3, #6
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	18c3      	adds	r3, r0, r3
 8001e44:	3304      	adds	r3, #4
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	045b      	lsls	r3, r3, #17
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d301      	bcc.n	8001e70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e010      	b.n	8001e92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <SysTick_Config+0x44>)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	3a01      	subs	r2, #1
 8001e76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff ff7c 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x44>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x44>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	210f      	movs	r1, #15
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	1c02      	adds	r2, r0, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ff33 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff ffaf 	bl	8001e58 <SysTick_Config>
 8001efa:	0003      	movs	r3, r0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e04f      	b.n	8001fb6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2225      	movs	r2, #37	; 0x25
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d008      	beq.n	8001f34 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e040      	b.n	8001fb6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	210e      	movs	r1, #14
 8001f40:	438a      	bics	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	491c      	ldr	r1, [pc, #112]	; (8001fc0 <HAL_DMA_Abort+0xbc>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2101      	movs	r1, #1
 8001f60:	438a      	bics	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	221c      	movs	r2, #28
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2101      	movs	r1, #1
 8001f72:	4091      	lsls	r1, r2
 8001f74:	000a      	movs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	490a      	ldr	r1, [pc, #40]	; (8001fc0 <HAL_DMA_Abort+0xbc>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fa2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2225      	movs	r2, #37	; 0x25
 8001fa8:	2101      	movs	r1, #1
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b002      	add	sp, #8
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	fffffeff 	.word	0xfffffeff

08001fc4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	210f      	movs	r1, #15
 8001fce:	187b      	adds	r3, r7, r1
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2225      	movs	r2, #37	; 0x25
 8001fd8:	5c9b      	ldrb	r3, [r3, r2]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d006      	beq.n	8001fee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e048      	b.n	8002080 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	210e      	movs	r1, #14
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	438a      	bics	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	491d      	ldr	r1, [pc, #116]	; (8002090 <HAL_DMA_Abort_IT+0xcc>)
 800201a:	400a      	ands	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	221c      	movs	r2, #28
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2101      	movs	r1, #1
 800202c:	4091      	lsls	r1, r2
 800202e:	000a      	movs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800203a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	4910      	ldr	r1, [pc, #64]	; (8002090 <HAL_DMA_Abort_IT+0xcc>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800205c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2225      	movs	r2, #37	; 0x25
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2224      	movs	r2, #36	; 0x24
 800206a:	2100      	movs	r1, #0
 800206c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	0010      	movs	r0, r2
 800207e:	4798      	blx	r3
    }
  }
  return status;
 8002080:	230f      	movs	r3, #15
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	fffffeff 	.word	0xfffffeff

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e14d      	b.n	8002340 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d100      	bne.n	80020bc <HAL_GPIO_Init+0x28>
 80020ba:	e13e      	b.n	800233a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x40>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d130      	bne.n	8002136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	409a      	lsls	r2, r3
 80020e2:	0013      	movs	r3, r2
 80020e4:	43da      	mvns	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0013      	movs	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800210a:	2201      	movs	r2, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
 8002110:	0013      	movs	r3, r2
 8002112:	43da      	mvns	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	2201      	movs	r2, #1
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	4013      	ands	r3, r2
 800213e:	2b03      	cmp	r3, #3
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	4013      	ands	r3, r2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d123      	bne.n	80021c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	58d3      	ldr	r3, [r2, r3]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2207      	movs	r2, #7
 8002190:	4013      	ands	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	43da      	mvns	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2107      	movs	r1, #7
 80021aa:	400b      	ands	r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	6939      	ldr	r1, [r7, #16]
 80021c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	401a      	ands	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_GPIO_Init+0x174>
 8002206:	e098      	b.n	800233a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002208:	4a53      	ldr	r2, [pc, #332]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3318      	adds	r3, #24
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	589b      	ldr	r3, [r3, r2]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2203      	movs	r2, #3
 800221a:	4013      	ands	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	220f      	movs	r2, #15
 8002220:	409a      	lsls	r2, r3
 8002222:	0013      	movs	r3, r2
 8002224:	43da      	mvns	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	23a0      	movs	r3, #160	; 0xa0
 8002230:	05db      	lsls	r3, r3, #23
 8002232:	429a      	cmp	r2, r3
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x1d6>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a48      	ldr	r2, [pc, #288]	; (800235c <HAL_GPIO_Init+0x2c8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x1d2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_GPIO_Init+0x2cc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x1ce>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a46      	ldr	r2, [pc, #280]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x1ca>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a45      	ldr	r2, [pc, #276]	; (8002368 <HAL_GPIO_Init+0x2d4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x1c6>
 8002256:	2304      	movs	r3, #4
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x1d8>
 800225a:	2305      	movs	r3, #5
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x1d8>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x1d8>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x1d8>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x1d8>
 800226a:	2300      	movs	r3, #0
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	2103      	movs	r1, #3
 8002270:	400a      	ands	r2, r1
 8002272:	00d2      	lsls	r2, r2, #3
 8002274:	4093      	lsls	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800227c:	4936      	ldr	r1, [pc, #216]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3318      	adds	r3, #24
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800228a:	4b33      	ldr	r3, [pc, #204]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	035b      	lsls	r3, r3, #13
 80022a2:	4013      	ands	r3, r2
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43da      	mvns	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	039b      	lsls	r3, r3, #14
 80022cc:	4013      	ands	r3, r2
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 80022e0:	2384      	movs	r3, #132	; 0x84
 80022e2:	58d3      	ldr	r3, [r2, r3]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43da      	mvns	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	4013      	ands	r3, r2
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002304:	4914      	ldr	r1, [pc, #80]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 8002306:	2284      	movs	r2, #132	; 0x84
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	58d3      	ldr	r3, [r2, r3]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	025b      	lsls	r3, r3, #9
 8002326:	4013      	ands	r3, r2
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002332:	4909      	ldr	r1, [pc, #36]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 8002334:	2280      	movs	r2, #128	; 0x80
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	40da      	lsrs	r2, r3
 8002348:	1e13      	subs	r3, r2, #0
 800234a:	d000      	beq.n	800234e <HAL_GPIO_Init+0x2ba>
 800234c:	e6aa      	b.n	80020a4 <HAL_GPIO_Init+0x10>
  }
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b006      	add	sp, #24
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021800 	.word	0x40021800
 800235c:	50000400 	.word	0x50000400
 8002360:	50000800 	.word	0x50000800
 8002364:	50000c00 	.word	0x50000c00
 8002368:	50001000 	.word	0x50001000

0800236c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	000a      	movs	r2, r1
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	1cba      	adds	r2, r7, #2
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	4013      	ands	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002386:	230f      	movs	r3, #15
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e003      	b.n	8002398 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	0008      	movs	r0, r1
 80023b0:	0011      	movs	r1, r2
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	1c02      	adds	r2, r0, #0
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	1c7b      	adds	r3, r7, #1
 80023ba:	1c0a      	adds	r2, r1, #0
 80023bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023be:	1c7b      	adds	r3, r7, #1
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	1cbb      	adds	r3, r7, #2
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023ce:	e003      	b.n	80023d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023d0:	1cbb      	adds	r3, r7, #2
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	000a      	movs	r2, r1
 80023ea:	1cbb      	adds	r3, r7, #2
 80023ec:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f4:	1cbb      	adds	r3, r7, #2
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	1cb9      	adds	r1, r7, #2
 8002404:	8809      	ldrh	r1, [r1, #0]
 8002406:	400b      	ands	r3, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d11f      	bne.n	800247c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	0013      	movs	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	189b      	adds	r3, r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4912      	ldr	r1, [pc, #72]	; (8002494 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800244a:	0018      	movs	r0, r3
 800244c:	f7fd fe5a 	bl	8000104 <__udivsi3>
 8002450:	0003      	movs	r3, r0
 8002452:	3301      	adds	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002456:	e008      	b.n	800246a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e001      	b.n	800246a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e009      	b.n	800247e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	401a      	ands	r2, r3
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	429a      	cmp	r2, r3
 800247a:	d0ed      	beq.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40007000 	.word	0x40007000
 800248c:	fffff9ff 	.word	0xfffff9ff
 8002490:	20000000 	.word	0x20000000
 8002494:	000f4240 	.word	0x000f4240

08002498 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	23e0      	movs	r3, #224	; 0xe0
 80024a2:	01db      	lsls	r3, r3, #7
 80024a4:	4013      	ands	r3, r2
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f000 fb50 	bl	8002b64 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	d100      	bne.n	80024d0 <HAL_RCC_OscConfig+0x20>
 80024ce:	e07c      	b.n	80025ca <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d0:	4bc3      	ldr	r3, [pc, #780]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2238      	movs	r2, #56	; 0x38
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024da:	4bc1      	ldr	r3, [pc, #772]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2203      	movs	r2, #3
 80024e0:	4013      	ands	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x40>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d002      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d10b      	bne.n	800250e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4bba      	ldr	r3, [pc, #744]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4013      	ands	r3, r2
 8002500:	d062      	beq.n	80025c8 <HAL_RCC_OscConfig+0x118>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d15e      	bne.n	80025c8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e32a      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	429a      	cmp	r2, r3
 8002518:	d107      	bne.n	800252a <HAL_RCC_OscConfig+0x7a>
 800251a:	4bb1      	ldr	r3, [pc, #708]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4bb0      	ldr	r3, [pc, #704]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	0249      	lsls	r1, r1, #9
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e020      	b.n	800256c <HAL_RCC_OscConfig+0xbc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	23a0      	movs	r3, #160	; 0xa0
 8002530:	02db      	lsls	r3, r3, #11
 8002532:	429a      	cmp	r2, r3
 8002534:	d10e      	bne.n	8002554 <HAL_RCC_OscConfig+0xa4>
 8002536:	4baa      	ldr	r3, [pc, #680]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4ba9      	ldr	r3, [pc, #676]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	02c9      	lsls	r1, r1, #11
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4ba6      	ldr	r3, [pc, #664]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4ba5      	ldr	r3, [pc, #660]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	0249      	lsls	r1, r1, #9
 800254e:	430a      	orrs	r2, r1
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xbc>
 8002554:	4ba2      	ldr	r3, [pc, #648]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4ba1      	ldr	r3, [pc, #644]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800255a:	49a2      	ldr	r1, [pc, #648]	; (80027e4 <HAL_RCC_OscConfig+0x334>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	4b9f      	ldr	r3, [pc, #636]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b9e      	ldr	r3, [pc, #632]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002566:	49a0      	ldr	r1, [pc, #640]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002568:	400a      	ands	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d014      	beq.n	800259e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7ff fbba 	bl	8001cec <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257e:	f7ff fbb5 	bl	8001cec <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e2e9      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002590:	4b93      	ldr	r3, [pc, #588]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	029b      	lsls	r3, r3, #10
 8002598:	4013      	ands	r3, r2
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0xce>
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff fba5 	bl	8001cec <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fba0 	bl	8001cec <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e2d4      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ba:	4b89      	ldr	r3, [pc, #548]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0xf8>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d100      	bne.n	80025d6 <HAL_RCC_OscConfig+0x126>
 80025d4:	e099      	b.n	800270a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d6:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2238      	movs	r2, #56	; 0x38
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e0:	4b7f      	ldr	r3, [pc, #508]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2203      	movs	r2, #3
 80025e6:	4013      	ands	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_OscConfig+0x146>
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d135      	bne.n	8002668 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4013      	ands	r3, r2
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x164>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e2a7      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a74      	ldr	r2, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x33c>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d112      	bne.n	8002656 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002630:	4b6b      	ldr	r3, [pc, #428]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x340>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002644:	4b66      	ldr	r3, [pc, #408]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0adb      	lsrs	r3, r3, #11
 800264a:	2207      	movs	r2, #7
 800264c:	4013      	ands	r3, r2
 800264e:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x344>)
 8002650:	40da      	lsrs	r2, r3
 8002652:	4b69      	ldr	r3, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x348>)
 8002654:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002656:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_RCC_OscConfig+0x34c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff faea 	bl	8001c34 <HAL_InitTick>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d051      	beq.n	8002708 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e27d      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d030      	beq.n	80026d2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5e      	ldr	r2, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x340>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0049      	lsls	r1, r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7ff fb2b 	bl	8001cec <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7ff fb26 	bl	8001cec <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e25a      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ae:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4013      	ands	r3, r2
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_RCC_OscConfig+0x33c>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e01b      	b.n	800270a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80026d8:	4949      	ldr	r1, [pc, #292]	; (8002800 <HAL_RCC_OscConfig+0x350>)
 80026da:	400a      	ands	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7ff fb05 	bl	8001cec <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7ff fb00 	bl	8001cec <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e234      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4013      	ands	r3, r2
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x238>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2208      	movs	r2, #8
 8002710:	4013      	ands	r3, r2
 8002712:	d047      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2238      	movs	r2, #56	; 0x38
 800271a:	4013      	ands	r3, r2
 800271c:	2b18      	cmp	r3, #24
 800271e:	d10a      	bne.n	8002736 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002720:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d03c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2f4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d138      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e216      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d019      	beq.n	8002772 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff facf 	bl	8001cec <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7ff faca 	bl	8001cec <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1fe      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d0f1      	beq.n	8002754 <HAL_RCC_OscConfig+0x2a4>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 8002778:	2101      	movs	r1, #1
 800277a:	438a      	bics	r2, r1
 800277c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff fab5 	bl	8001cec <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff fab0 	bl	8001cec <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1e4      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d1f1      	bne.n	8002788 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2204      	movs	r2, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	d100      	bne.n	80027b0 <HAL_RCC_OscConfig+0x300>
 80027ae:	e0c7      	b.n	8002940 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b0:	231f      	movs	r3, #31
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2238      	movs	r2, #56	; 0x38
 80027be:	4013      	ands	r3, r2
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d11f      	bne.n	8002804 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d100      	bne.n	80027d0 <HAL_RCC_OscConfig+0x320>
 80027ce:	e0b7      	b.n	8002940 <HAL_RCC_OscConfig+0x490>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d000      	beq.n	80027da <HAL_RCC_OscConfig+0x32a>
 80027d8:	e0b2      	b.n	8002940 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1c2      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40021000 	.word	0x40021000
 80027e4:	fffeffff 	.word	0xfffeffff
 80027e8:	fffbffff 	.word	0xfffbffff
 80027ec:	ffff80ff 	.word	0xffff80ff
 80027f0:	ffffc7ff 	.word	0xffffc7ff
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004
 8002800:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002804:	4bb5      	ldr	r3, [pc, #724]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	055b      	lsls	r3, r3, #21
 800280c:	4013      	ands	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0x364>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x366>
 8002814:	2300      	movs	r3, #0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d011      	beq.n	800283e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	4bb0      	ldr	r3, [pc, #704]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800281c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281e:	4baf      	ldr	r3, [pc, #700]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0549      	lsls	r1, r1, #21
 8002824:	430a      	orrs	r2, r1
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
 8002828:	4bac      	ldr	r3, [pc, #688]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800282a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	055b      	lsls	r3, r3, #21
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	4ba8      	ldr	r3, [pc, #672]	; (8002ae0 <HAL_RCC_OscConfig+0x630>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4013      	ands	r3, r2
 8002848:	d11a      	bne.n	8002880 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284a:	4ba5      	ldr	r3, [pc, #660]	; (8002ae0 <HAL_RCC_OscConfig+0x630>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4ba4      	ldr	r3, [pc, #656]	; (8002ae0 <HAL_RCC_OscConfig+0x630>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0049      	lsls	r1, r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002858:	f7ff fa48 	bl	8001cec <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7ff fa43 	bl	8001cec <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e177      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002874:	4b9a      	ldr	r3, [pc, #616]	; (8002ae0 <HAL_RCC_OscConfig+0x630>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x3e6>
 8002888:	4b94      	ldr	r3, [pc, #592]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800288a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288c:	4b93      	ldr	r3, [pc, #588]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800288e:	2101      	movs	r1, #1
 8002890:	430a      	orrs	r2, r1
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x420>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x408>
 800289e:	4b8f      	ldr	r3, [pc, #572]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028a2:	4b8e      	ldr	r3, [pc, #568]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028a4:	2104      	movs	r1, #4
 80028a6:	430a      	orrs	r2, r1
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028aa:	4b8c      	ldr	r3, [pc, #560]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0x420>
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028bc:	4b87      	ldr	r3, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028be:	2101      	movs	r1, #1
 80028c0:	438a      	bics	r2, r1
 80028c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80028c4:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028c8:	4b84      	ldr	r3, [pc, #528]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028ca:	2104      	movs	r1, #4
 80028cc:	438a      	bics	r2, r1
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d014      	beq.n	8002902 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff fa08 	bl	8001cec <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7ff fa03 	bl	8001cec <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a7d      	ldr	r2, [pc, #500]	; (8002ae4 <HAL_RCC_OscConfig+0x634>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e136      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f6:	4b79      	ldr	r3, [pc, #484]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x432>
 8002900:	e013      	b.n	800292a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7ff f9f3 	bl	8001cec <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800290a:	e009      	b.n	8002920 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7ff f9ee 	bl	8001cec <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	4a73      	ldr	r2, [pc, #460]	; (8002ae4 <HAL_RCC_OscConfig+0x634>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e121      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002920:	4b6e      	ldr	r3, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800292a:	231f      	movs	r3, #31
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b69      	ldr	r3, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800293a:	496b      	ldr	r1, [pc, #428]	; (8002ae8 <HAL_RCC_OscConfig+0x638>)
 800293c:	400a      	ands	r2, r1
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2220      	movs	r2, #32
 8002946:	4013      	ands	r3, r2
 8002948:	d039      	beq.n	80029be <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01b      	beq.n	800298a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	03c9      	lsls	r1, r1, #15
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff f9c4 	bl	8001cec <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296a:	f7ff f9bf 	bl	8001cec <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0f3      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800297c:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	4013      	ands	r3, r2
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x4ba>
 8002988:	e019      	b.n	80029be <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002990:	4956      	ldr	r1, [pc, #344]	; (8002aec <HAL_RCC_OscConfig+0x63c>)
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7ff f9a9 	bl	8001cec <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a0:	f7ff f9a4 	bl	8001cec <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0d8      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029b2:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	4013      	ands	r3, r2
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d100      	bne.n	80029c8 <HAL_RCC_OscConfig+0x518>
 80029c6:	e0cc      	b.n	8002b62 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c8:	4b44      	ldr	r3, [pc, #272]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2238      	movs	r2, #56	; 0x38
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d100      	bne.n	80029d6 <HAL_RCC_OscConfig+0x526>
 80029d4:	e07b      	b.n	8002ace <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d156      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80029e4:	4942      	ldr	r1, [pc, #264]	; (8002af0 <HAL_RCC_OscConfig+0x640>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff f97f 	bl	8001cec <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff f97a 	bl	8001cec <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0ae      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	049b      	lsls	r3, r3, #18
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a12:	4b32      	ldr	r3, [pc, #200]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <HAL_RCC_OscConfig+0x644>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	0449      	lsls	r1, r1, #17
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	0549      	lsls	r1, r1, #21
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7ff f943 	bl	8001cec <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff f93e 	bl	8001cec <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e072      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	049b      	lsls	r3, r3, #18
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x5bc>
 8002a8a:	e06a      	b.n	8002b62 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a92:	4917      	ldr	r1, [pc, #92]	; (8002af0 <HAL_RCC_OscConfig+0x640>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7ff f928 	bl	8001cec <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7ff f923 	bl	8001cec <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e057      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	049b      	lsls	r3, r3, #18
 8002abc:	4013      	ands	r3, r2
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002ac6:	490c      	ldr	r1, [pc, #48]	; (8002af8 <HAL_RCC_OscConfig+0x648>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	e049      	b.n	8002b62 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d112      	bne.n	8002afc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e044      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	00001388 	.word	0x00001388
 8002ae8:	efffffff 	.word	0xefffffff
 8002aec:	ffbfffff 	.word	0xffbfffff
 8002af0:	feffffff 	.word	0xfeffffff
 8002af4:	11c1808c 	.word	0x11c1808c
 8002af8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x6bc>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2203      	movs	r2, #3
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d126      	bne.n	8002b5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2270      	movs	r2, #112	; 0x70
 8002b14:	401a      	ands	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	23fe      	movs	r3, #254	; 0xfe
 8002b22:	01db      	lsls	r3, r3, #7
 8002b24:	401a      	ands	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d116      	bne.n	8002b5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	23f8      	movs	r3, #248	; 0xf8
 8002b34:	039b      	lsls	r3, r3, #14
 8002b36:	401a      	ands	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10e      	bne.n	8002b5e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	23e0      	movs	r3, #224	; 0xe0
 8002b44:	051b      	lsls	r3, r3, #20
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	0f5b      	lsrs	r3, r3, #29
 8002b54:	075a      	lsls	r2, r3, #29
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b008      	add	sp, #32
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0e9      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b76      	ldr	r3, [pc, #472]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d91e      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2207      	movs	r2, #7
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f8a2 	bl	8001cec <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bae:	f7ff f89d 	bl	8001cec <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4a6a      	ldr	r2, [pc, #424]	; (8002d64 <HAL_RCC_ClockConfig+0x1f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0ca      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	4013      	ands	r3, r2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2204      	movs	r2, #4
 8002be0:	4013      	ands	r3, r2
 8002be2:	d006      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002be4:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4b5f      	ldr	r3, [pc, #380]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002bea:	21e0      	movs	r1, #224	; 0xe0
 8002bec:	01c9      	lsls	r1, r1, #7
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf2:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_RCC_ClockConfig+0x1fc>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d057      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	029b      	lsls	r3, r3, #10
 8002c20:	4013      	ands	r3, r2
 8002c22:	d12b      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e097      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c30:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	049b      	lsls	r3, r3, #18
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d11f      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e08b      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4013      	ands	r3, r2
 8002c52:	d113      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e07f      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e074      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e06d      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2207      	movs	r2, #7
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7ff f82c 	bl	8001cec <HAL_GetTick>
 8002c94:	0003      	movs	r3, r0
 8002c96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7ff f827 	bl	8001cec <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a2f      	ldr	r2, [pc, #188]	; (8002d64 <HAL_RCC_ClockConfig+0x1f4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e054      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2238      	movs	r2, #56	; 0x38
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1ec      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d21e      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ce0:	f7ff f804 	bl	8001cec <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ce8:	e009      	b.n	8002cfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cea:	f7fe ffff 	bl	8001cec <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_RCC_ClockConfig+0x1f4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e02c      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2207      	movs	r2, #7
 8002d04:	4013      	ands	r3, r2
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <HAL_RCC_ClockConfig+0x200>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d2a:	f000 f829 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d2e:	0001      	movs	r1, r0
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	220f      	movs	r2, #15
 8002d38:	401a      	ands	r2, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x204>)
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	58d3      	ldr	r3, [r2, r3]
 8002d40:	221f      	movs	r2, #31
 8002d42:	4013      	ands	r3, r2
 8002d44:	000a      	movs	r2, r1
 8002d46:	40da      	lsrs	r2, r3
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x208>)
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x20c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fe ff6f 	bl	8001c34 <HAL_InitTick>
 8002d56:	0003      	movs	r3, r0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40022000 	.word	0x40022000
 8002d64:	00001388 	.word	0x00001388
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	fffff0ff 	.word	0xfffff0ff
 8002d70:	ffff8fff 	.word	0xffff8fff
 8002d74:	080061e4 	.word	0x080061e4
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2238      	movs	r2, #56	; 0x38
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d10f      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0adb      	lsrs	r3, r3, #11
 8002d96:	2207      	movs	r2, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	0013      	movs	r3, r2
 8002da0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	4835      	ldr	r0, [pc, #212]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002da6:	f7fd f9ad 	bl	8000104 <__udivsi3>
 8002daa:	0003      	movs	r3, r0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e05d      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db0:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2238      	movs	r2, #56	; 0x38
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	e054      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2238      	movs	r2, #56	; 0x38
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d138      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	2207      	movs	r2, #7
 8002de0:	4013      	ands	r3, r2
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4824      	ldr	r0, [pc, #144]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8002df0:	f7fd f988 	bl	8000104 <__udivsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	0019      	movs	r1, r3
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	227f      	movs	r2, #127	; 0x7f
 8002e00:	4013      	ands	r3, r2
 8002e02:	434b      	muls	r3, r1
 8002e04:	617b      	str	r3, [r7, #20]
        break;
 8002e06:	e00d      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	481c      	ldr	r0, [pc, #112]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e0c:	f7fd f97a 	bl	8000104 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	0019      	movs	r1, r3
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	227f      	movs	r2, #127	; 0x7f
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	434b      	muls	r3, r1
 8002e20:	617b      	str	r3, [r7, #20]
        break;
 8002e22:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0f5b      	lsrs	r3, r3, #29
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	3301      	adds	r3, #1
 8002e30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6978      	ldr	r0, [r7, #20]
 8002e36:	f7fd f965 	bl	8000104 <__udivsi3>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e015      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2238      	movs	r2, #56	; 0x38
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d103      	bne.n	8002e54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2238      	movs	r2, #56	; 0x38
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b18      	cmp	r3, #24
 8002e5e:	d103      	bne.n	8002e68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e60:	23fa      	movs	r3, #250	; 0xfa
 8002e62:	01db      	lsls	r3, r3, #7
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	e001      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e6c:	693b      	ldr	r3, [r7, #16]
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b006      	add	sp, #24
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	00f42400 	.word	0x00f42400
 8002e80:	007a1200 	.word	0x007a1200

08002e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	20000000 	.word	0x20000000

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e9c:	f7ff fff2 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea0:	0004      	movs	r4, r0
 8002ea2:	f7ff faf9 	bl	8002498 <LL_RCC_GetAPB1Prescaler>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	0b1a      	lsrs	r2, r3, #12
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eac:	0092      	lsls	r2, r2, #2
 8002eae:	58d3      	ldr	r3, [r2, r3]
 8002eb0:	221f      	movs	r2, #31
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	40dc      	lsrs	r4, r3
 8002eb6:	0023      	movs	r3, r4
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	08006224 	.word	0x08006224

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ecc:	2313      	movs	r3, #19
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ed4:	2312      	movs	r3, #18
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d100      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ee8:	e0ad      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eea:	2011      	movs	r0, #17
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	055b      	lsls	r3, r3, #21
 8002efa:	4013      	ands	r3, r2
 8002efc:	d110      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f02:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0549      	lsls	r1, r1, #21
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	055b      	lsls	r3, r3, #21
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	183b      	adds	r3, r7, r0
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f20:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	0049      	lsls	r1, r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe fedd 	bl	8001cec <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f36:	e00b      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe fed8 	bl	8001cec <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d904      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f46:	2313      	movs	r3, #19
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	701a      	strb	r2, [r3, #0]
        break;
 8002f4e:	e005      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f50:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d0ed      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f5c:	2313      	movs	r3, #19
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d15e      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f6a:	23c0      	movs	r3, #192	; 0xc0
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d019      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d014      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0249      	lsls	r1, r1, #9
 8002f96:	430a      	orrs	r2, r1
 8002f98:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fa0:	491e      	ldr	r1, [pc, #120]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d016      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fe9a 	bl	8001cec <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbc:	e00c      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fe95 	bl	8001cec <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d904      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002fce:	2313      	movs	r3, #19
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	701a      	strb	r2, [r3, #0]
            break;
 8002fd6:	e004      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2202      	movs	r2, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d0ed      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002fe2:	2313      	movs	r3, #19
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003000:	e016      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003002:	2312      	movs	r3, #18
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2213      	movs	r2, #19
 8003008:	18ba      	adds	r2, r7, r2
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e00f      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
 8003018:	fffffcff 	.word	0xfffffcff
 800301c:	fffeffff 	.word	0xfffeffff
 8003020:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	2312      	movs	r3, #18
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2213      	movs	r2, #19
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003030:	2311      	movs	r3, #17
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4bb6      	ldr	r3, [pc, #728]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800303c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800303e:	4bb5      	ldr	r3, [pc, #724]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003040:	49b5      	ldr	r1, [pc, #724]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003042:	400a      	ands	r2, r1
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003050:	4bb0      	ldr	r3, [pc, #704]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	2203      	movs	r2, #3
 8003056:	4393      	bics	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4bad      	ldr	r3, [pc, #692]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003060:	430a      	orrs	r2, r1
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2202      	movs	r2, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800306e:	4ba9      	ldr	r3, [pc, #676]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	220c      	movs	r2, #12
 8003074:	4393      	bics	r3, r2
 8003076:	0019      	movs	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4ba5      	ldr	r3, [pc, #660]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800307e:	430a      	orrs	r2, r1
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2204      	movs	r2, #4
 8003088:	4013      	ands	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800308c:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2230      	movs	r2, #48	; 0x30
 8003092:	4393      	bics	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b9e      	ldr	r3, [pc, #632]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800309c:	430a      	orrs	r2, r1
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2210      	movs	r2, #16
 80030a6:	4013      	ands	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030aa:	4b9a      	ldr	r3, [pc, #616]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	4a9b      	ldr	r2, [pc, #620]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	4b96      	ldr	r3, [pc, #600]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ba:	430a      	orrs	r2, r1
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	4013      	ands	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80030ca:	4b92      	ldr	r3, [pc, #584]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	4a94      	ldr	r2, [pc, #592]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	4b8e      	ldr	r3, [pc, #568]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ea:	4b8a      	ldr	r3, [pc, #552]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	4a8d      	ldr	r2, [pc, #564]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f8:	4b86      	ldr	r3, [pc, #536]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4013      	ands	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800310a:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	4a86      	ldr	r2, [pc, #536]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800311a:	430a      	orrs	r2, r1
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2220      	movs	r2, #32
 8003124:	4013      	ands	r3, r2
 8003126:	d009      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003128:	4b7a      	ldr	r3, [pc, #488]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	4a7f      	ldr	r2, [pc, #508]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	4b77      	ldr	r3, [pc, #476]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003138:	430a      	orrs	r2, r1
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2240      	movs	r2, #64	; 0x40
 8003142:	4013      	ands	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	4a79      	ldr	r2, [pc, #484]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800314c:	4013      	ands	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003156:	430a      	orrs	r2, r1
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4013      	ands	r3, r2
 8003164:	d015      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003166:	4b6b      	ldr	r3, [pc, #428]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	0899      	lsrs	r1, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003172:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003174:	430a      	orrs	r2, r1
 8003176:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	429a      	cmp	r2, r3
 8003182:	d106      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003184:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	4b62      	ldr	r3, [pc, #392]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	0249      	lsls	r1, r1, #9
 800318e:	430a      	orrs	r2, r1
 8003190:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	031b      	lsls	r3, r3, #12
 800319a:	4013      	ands	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	039b      	lsls	r3, r3, #14
 80031ba:	4013      	ands	r3, r2
 80031bc:	d016      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031be:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	4a5c      	ldr	r2, [pc, #368]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031cc:	4b51      	ldr	r3, [pc, #324]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ce:	430a      	orrs	r2, r1
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	03db      	lsls	r3, r3, #15
 80031da:	429a      	cmp	r2, r3
 80031dc:	d106      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031de:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0449      	lsls	r1, r1, #17
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	03db      	lsls	r3, r3, #15
 80031f4:	4013      	ands	r3, r2
 80031f6:	d016      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003208:	430a      	orrs	r2, r1
 800320a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	045b      	lsls	r3, r3, #17
 8003214:	429a      	cmp	r2, r3
 8003216:	d106      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003218:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	0449      	lsls	r1, r1, #17
 8003222:	430a      	orrs	r2, r1
 8003224:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4013      	ands	r3, r2
 8003230:	d014      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	2203      	movs	r2, #3
 8003238:	4393      	bics	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003242:	430a      	orrs	r2, r1
 8003244:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d106      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0249      	lsls	r1, r1, #9
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	4013      	ands	r3, r2
 8003266:	d014      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	220c      	movs	r2, #12
 800326e:	4393      	bics	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003278:	430a      	orrs	r2, r1
 800327a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b04      	cmp	r3, #4
 8003282:	d106      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	0249      	lsls	r1, r1, #9
 800328e:	430a      	orrs	r2, r1
 8003290:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	045b      	lsls	r3, r3, #17
 800329a:	4013      	ands	r3, r2
 800329c:	d016      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ae:	430a      	orrs	r2, r1
 80032b0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d106      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	0449      	lsls	r1, r1, #17
 80032c8:	430a      	orrs	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	049b      	lsls	r3, r3, #18
 80032d4:	4013      	ands	r3, r2
 80032d6:	d016      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d106      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032fe:	2180      	movs	r1, #128	; 0x80
 8003300:	0449      	lsls	r1, r1, #17
 8003302:	430a      	orrs	r2, r1
 8003304:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003306:	2312      	movs	r3, #18
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b006      	add	sp, #24
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	efffffff 	.word	0xefffffff
 800331c:	fffff3ff 	.word	0xfffff3ff
 8003320:	fffffcff 	.word	0xfffffcff
 8003324:	fff3ffff 	.word	0xfff3ffff
 8003328:	ffcfffff 	.word	0xffcfffff
 800332c:	ffffcfff 	.word	0xffffcfff
 8003330:	ffff3fff 	.word	0xffff3fff
 8003334:	ffbfffff 	.word	0xffbfffff
 8003338:	feffffff 	.word	0xfeffffff

0800333c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e04a      	b.n	80033e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	223d      	movs	r2, #61	; 0x3d
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223c      	movs	r2, #60	; 0x3c
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f7fe faf1 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223d      	movs	r2, #61	; 0x3d
 800336e:	2102      	movs	r1, #2
 8003370:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	0019      	movs	r1, r3
 800337c:	0010      	movs	r0, r2
 800337e:	f000 fbe7 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2248      	movs	r2, #72	; 0x48
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	223e      	movs	r2, #62	; 0x3e
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	223f      	movs	r2, #63	; 0x3f
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2241      	movs	r2, #65	; 0x41
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2242      	movs	r2, #66	; 0x42
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2243      	movs	r2, #67	; 0x43
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2244      	movs	r2, #68	; 0x44
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2245      	movs	r2, #69	; 0x45
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2246      	movs	r2, #70	; 0x46
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2247      	movs	r2, #71	; 0x47
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223d      	movs	r2, #61	; 0x3d
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e04a      	b.n	8003494 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223d      	movs	r2, #61	; 0x3d
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223c      	movs	r2, #60	; 0x3c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f000 f841 	bl	800349c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223d      	movs	r2, #61	; 0x3d
 800341e:	2102      	movs	r1, #2
 8003420:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f000 fb8f 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2248      	movs	r2, #72	; 0x48
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223e      	movs	r2, #62	; 0x3e
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223f      	movs	r2, #63	; 0x3f
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2241      	movs	r2, #65	; 0x41
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2242      	movs	r2, #66	; 0x42
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2243      	movs	r2, #67	; 0x43
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2244      	movs	r2, #68	; 0x44
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2245      	movs	r2, #69	; 0x45
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2246      	movs	r2, #70	; 0x46
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2247      	movs	r2, #71	; 0x47
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223d      	movs	r2, #61	; 0x3d
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <HAL_TIM_PWM_Start+0x22>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	223e      	movs	r2, #62	; 0x3e
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	4193      	sbcs	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e037      	b.n	800353e <HAL_TIM_PWM_Start+0x92>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d108      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x3a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223f      	movs	r2, #63	; 0x3f
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	4193      	sbcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e02b      	b.n	800353e <HAL_TIM_PWM_Start+0x92>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d108      	bne.n	80034fe <HAL_TIM_PWM_Start+0x52>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	4193      	sbcs	r3, r2
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e01f      	b.n	800353e <HAL_TIM_PWM_Start+0x92>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d108      	bne.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2241      	movs	r2, #65	; 0x41
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	4193      	sbcs	r3, r2
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Start+0x92>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b10      	cmp	r3, #16
 800351a:	d108      	bne.n	800352e <HAL_TIM_PWM_Start+0x82>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2242      	movs	r2, #66	; 0x42
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	1e5a      	subs	r2, r3, #1
 8003528:	4193      	sbcs	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e007      	b.n	800353e <HAL_TIM_PWM_Start+0x92>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2243      	movs	r2, #67	; 0x43
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	4193      	sbcs	r3, r2
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e090      	b.n	8003668 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	223e      	movs	r2, #62	; 0x3e
 8003550:	2102      	movs	r1, #2
 8003552:	5499      	strb	r1, [r3, r2]
 8003554:	e023      	b.n	800359e <HAL_TIM_PWM_Start+0xf2>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start+0xba>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	2102      	movs	r1, #2
 8003562:	5499      	strb	r1, [r3, r2]
 8003564:	e01b      	b.n	800359e <HAL_TIM_PWM_Start+0xf2>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d104      	bne.n	8003576 <HAL_TIM_PWM_Start+0xca>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2240      	movs	r2, #64	; 0x40
 8003570:	2102      	movs	r1, #2
 8003572:	5499      	strb	r1, [r3, r2]
 8003574:	e013      	b.n	800359e <HAL_TIM_PWM_Start+0xf2>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d104      	bne.n	8003586 <HAL_TIM_PWM_Start+0xda>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2241      	movs	r2, #65	; 0x41
 8003580:	2102      	movs	r1, #2
 8003582:	5499      	strb	r1, [r3, r2]
 8003584:	e00b      	b.n	800359e <HAL_TIM_PWM_Start+0xf2>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b10      	cmp	r3, #16
 800358a:	d104      	bne.n	8003596 <HAL_TIM_PWM_Start+0xea>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2242      	movs	r2, #66	; 0x42
 8003590:	2102      	movs	r1, #2
 8003592:	5499      	strb	r1, [r3, r2]
 8003594:	e003      	b.n	800359e <HAL_TIM_PWM_Start+0xf2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2243      	movs	r2, #67	; 0x43
 800359a:	2102      	movs	r1, #2
 800359c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	0018      	movs	r0, r3
 80035a8:	f000 feca 	bl	8004340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <HAL_TIM_PWM_Start+0x1c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x128>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2e      	ldr	r2, [pc, #184]	; (8003674 <HAL_TIM_PWM_Start+0x1c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x128>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <HAL_TIM_PWM_Start+0x1cc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x128>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <HAL_TIM_PWM_Start+0x1d0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x12c>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_TIM_PWM_Start+0x12e>
 80035d8:	2300      	movs	r3, #0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	0209      	lsls	r1, r1, #8
 80035ec:	430a      	orrs	r2, r1
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <HAL_TIM_PWM_Start+0x1c4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d014      	beq.n	8003624 <HAL_TIM_PWM_Start+0x178>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	429a      	cmp	r2, r3
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_PWM_Start+0x178>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <HAL_TIM_PWM_Start+0x1d4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_TIM_PWM_Start+0x178>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_TIM_PWM_Start+0x1d8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_PWM_Start+0x178>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <HAL_TIM_PWM_Start+0x1c8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d116      	bne.n	8003652 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_TIM_PWM_Start+0x1dc>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d016      	beq.n	8003664 <HAL_TIM_PWM_Start+0x1b8>
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	025b      	lsls	r3, r3, #9
 800363c:	429a      	cmp	r2, r3
 800363e:	d011      	beq.n	8003664 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	e008      	b.n	8003664 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e000      	b.n	8003666 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40014000 	.word	0x40014000
 8003678:	40014400 	.word	0x40014400
 800367c:	40014800 	.word	0x40014800
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	00010007 	.word	0x00010007

0800368c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fe4e 	bl	8004340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a37      	ldr	r2, [pc, #220]	; (8003788 <HAL_TIM_PWM_Stop+0xfc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_PWM_Stop+0x40>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a36      	ldr	r2, [pc, #216]	; (800378c <HAL_TIM_PWM_Stop+0x100>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_PWM_Stop+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a34      	ldr	r2, [pc, #208]	; (8003790 <HAL_TIM_PWM_Stop+0x104>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_PWM_Stop+0x40>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a33      	ldr	r2, [pc, #204]	; (8003794 <HAL_TIM_PWM_Stop+0x108>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_PWM_Stop+0x44>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_TIM_PWM_Stop+0x46>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4a2e      	ldr	r2, [pc, #184]	; (8003798 <HAL_TIM_PWM_Stop+0x10c>)
 80036de:	4013      	ands	r3, r2
 80036e0:	d10d      	bne.n	80036fe <HAL_TIM_PWM_Stop+0x72>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a2c      	ldr	r2, [pc, #176]	; (800379c <HAL_TIM_PWM_Stop+0x110>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_PWM_Stop+0x72>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4929      	ldr	r1, [pc, #164]	; (80037a0 <HAL_TIM_PWM_Stop+0x114>)
 80036fa:	400a      	ands	r2, r1
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4a24      	ldr	r2, [pc, #144]	; (8003798 <HAL_TIM_PWM_Stop+0x10c>)
 8003706:	4013      	ands	r3, r2
 8003708:	d10d      	bne.n	8003726 <HAL_TIM_PWM_Stop+0x9a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_TIM_PWM_Stop+0x110>)
 8003712:	4013      	ands	r3, r2
 8003714:	d107      	bne.n	8003726 <HAL_TIM_PWM_Stop+0x9a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	438a      	bics	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Stop+0xaa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	223e      	movs	r2, #62	; 0x3e
 8003730:	2101      	movs	r1, #1
 8003732:	5499      	strb	r1, [r3, r2]
 8003734:	e023      	b.n	800377e <HAL_TIM_PWM_Stop+0xf2>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d104      	bne.n	8003746 <HAL_TIM_PWM_Stop+0xba>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	223f      	movs	r2, #63	; 0x3f
 8003740:	2101      	movs	r1, #1
 8003742:	5499      	strb	r1, [r3, r2]
 8003744:	e01b      	b.n	800377e <HAL_TIM_PWM_Stop+0xf2>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d104      	bne.n	8003756 <HAL_TIM_PWM_Stop+0xca>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	2101      	movs	r1, #1
 8003752:	5499      	strb	r1, [r3, r2]
 8003754:	e013      	b.n	800377e <HAL_TIM_PWM_Stop+0xf2>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d104      	bne.n	8003766 <HAL_TIM_PWM_Stop+0xda>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2241      	movs	r2, #65	; 0x41
 8003760:	2101      	movs	r1, #1
 8003762:	5499      	strb	r1, [r3, r2]
 8003764:	e00b      	b.n	800377e <HAL_TIM_PWM_Stop+0xf2>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b10      	cmp	r3, #16
 800376a:	d104      	bne.n	8003776 <HAL_TIM_PWM_Stop+0xea>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2242      	movs	r2, #66	; 0x42
 8003770:	2101      	movs	r1, #1
 8003772:	5499      	strb	r1, [r3, r2]
 8003774:	e003      	b.n	800377e <HAL_TIM_PWM_Stop+0xf2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2243      	movs	r2, #67	; 0x43
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800
 8003798:	00001111 	.word	0x00001111
 800379c:	00000444 	.word	0x00000444
 80037a0:	ffff7fff 	.word	0xffff7fff

080037a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2317      	movs	r3, #23
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	223c      	movs	r2, #60	; 0x3c
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e0e5      	b.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	223c      	movs	r2, #60	; 0x3c
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b14      	cmp	r3, #20
 80037d2:	d900      	bls.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80037d4:	e0d1      	b.n	800397a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	009a      	lsls	r2, r3, #2
 80037da:	4b70      	ldr	r3, [pc, #448]	; (800399c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	0011      	movs	r1, r2
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fa48 	bl	8003c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2108      	movs	r1, #8
 80037fc:	430a      	orrs	r2, r1
 80037fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2104      	movs	r1, #4
 800380c:	438a      	bics	r2, r1
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6999      	ldr	r1, [r3, #24]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	619a      	str	r2, [r3, #24]
      break;
 8003822:	e0af      	b.n	8003984 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	0011      	movs	r1, r2
 800382c:	0018      	movs	r0, r3
 800382e:	f000 fab1 	bl	8003d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	0109      	lsls	r1, r1, #4
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4954      	ldr	r1, [pc, #336]	; (80039a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003850:	400a      	ands	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6999      	ldr	r1, [r3, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	021a      	lsls	r2, r3, #8
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	619a      	str	r2, [r3, #24]
      break;
 8003868:	e08c      	b.n	8003984 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f000 fb12 	bl	8003e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2108      	movs	r1, #8
 8003884:	430a      	orrs	r2, r1
 8003886:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2104      	movs	r1, #4
 8003894:	438a      	bics	r2, r1
 8003896:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69d9      	ldr	r1, [r3, #28]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	61da      	str	r2, [r3, #28]
      break;
 80038aa:	e06b      	b.n	8003984 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fb79 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0109      	lsls	r1, r1, #4
 80038c8:	430a      	orrs	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4932      	ldr	r1, [pc, #200]	; (80039a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038d8:	400a      	ands	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69d9      	ldr	r1, [r3, #28]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	61da      	str	r2, [r3, #28]
      break;
 80038f0:	e048      	b.n	8003984 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fbc0 	bl	8004080 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2108      	movs	r1, #8
 800390c:	430a      	orrs	r2, r1
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2104      	movs	r1, #4
 800391c:	438a      	bics	r2, r1
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003932:	e027      	b.n	8003984 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	0011      	movs	r1, r2
 800393c:	0018      	movs	r0, r3
 800393e:	f000 fbff 	bl	8004140 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	0109      	lsls	r1, r1, #4
 8003950:	430a      	orrs	r2, r1
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4910      	ldr	r1, [pc, #64]	; (80039a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003960:	400a      	ands	r2, r1
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003978:	e004      	b.n	8003984 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800397a:	2317      	movs	r3, #23
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
      break;
 8003982:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	223c      	movs	r2, #60	; 0x3c
 8003988:	2100      	movs	r1, #0
 800398a:	5499      	strb	r1, [r3, r2]

  return status;
 800398c:	2317      	movs	r3, #23
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	781b      	ldrb	r3, [r3, #0]
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b006      	add	sp, #24
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	08006244 	.word	0x08006244
 80039a0:	fffffbff 	.word	0xfffffbff

080039a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	230f      	movs	r3, #15
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223c      	movs	r2, #60	; 0x3c
 80039ba:	5c9b      	ldrb	r3, [r3, r2]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIM_ConfigClockSource+0x20>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0bc      	b.n	8003b3e <HAL_TIM_ConfigClockSource+0x19a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	223c      	movs	r2, #60	; 0x3c
 80039c8:	2101      	movs	r1, #1
 80039ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	223d      	movs	r2, #61	; 0x3d
 80039d0:	2102      	movs	r1, #2
 80039d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4a5a      	ldr	r2, [pc, #360]	; (8003b48 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <HAL_TIM_ConfigClockSource+0x1a8>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	0192      	lsls	r2, r2, #6
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d040      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xde>
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0192      	lsls	r2, r2, #6
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d900      	bls.n	8003a0a <HAL_TIM_ConfigClockSource+0x66>
 8003a08:	e088      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	0152      	lsls	r2, r2, #5
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d100      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x70>
 8003a12:	e088      	b.n	8003b26 <HAL_TIM_ConfigClockSource+0x182>
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	0152      	lsls	r2, r2, #5
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d900      	bls.n	8003a1e <HAL_TIM_ConfigClockSource+0x7a>
 8003a1c:	e07e      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a1e:	2b70      	cmp	r3, #112	; 0x70
 8003a20:	d018      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0xb0>
 8003a22:	d900      	bls.n	8003a26 <HAL_TIM_ConfigClockSource+0x82>
 8003a24:	e07a      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a26:	2b60      	cmp	r3, #96	; 0x60
 8003a28:	d04f      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x126>
 8003a2a:	d900      	bls.n	8003a2e <HAL_TIM_ConfigClockSource+0x8a>
 8003a2c:	e076      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a2e:	2b50      	cmp	r3, #80	; 0x50
 8003a30:	d03b      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x106>
 8003a32:	d900      	bls.n	8003a36 <HAL_TIM_ConfigClockSource+0x92>
 8003a34:	e072      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d057      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x146>
 8003a3a:	d900      	bls.n	8003a3e <HAL_TIM_ConfigClockSource+0x9a>
 8003a3c:	e06e      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d063      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x166>
 8003a42:	d86b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d060      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x166>
 8003a48:	d868      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d05d      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x166>
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d05b      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x166>
 8003a52:	e063      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a64:	f000 fc4c 	bl	8004300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2277      	movs	r2, #119	; 0x77
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e052      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a92:	f000 fc35 	bl	8004300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	01c9      	lsls	r1, r1, #7
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e03e      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	f000 fba6 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2150      	movs	r1, #80	; 0x50
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 fc00 	bl	80042c8 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e02e      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	f000 fbc4 	bl	8004264 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2160      	movs	r1, #96	; 0x60
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 fbf0 	bl	80042c8 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e01e      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	001a      	movs	r2, r3
 8003af8:	f000 fb86 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 fbe0 	bl	80042c8 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e00e      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0019      	movs	r1, r3
 8003b14:	0010      	movs	r0, r2
 8003b16:	f000 fbd7 	bl	80042c8 <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e005      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
      break;
 8003b24:	e000      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	223d      	movs	r2, #61	; 0x3d
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	223c      	movs	r2, #60	; 0x3c
 8003b34:	2100      	movs	r1, #0
 8003b36:	5499      	strb	r1, [r3, r2]

  return status;
 8003b38:	230f      	movs	r3, #15
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	ffceff88 	.word	0xffceff88
 8003b4c:	ffff00ff 	.word	0xffff00ff

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <TIM_Base_SetConfig+0x110>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00c      	beq.n	8003b82 <TIM_Base_SetConfig+0x32>
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	05db      	lsls	r3, r3, #23
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d007      	beq.n	8003b82 <TIM_Base_SetConfig+0x32>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_Base_SetConfig+0x32>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x118>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2270      	movs	r2, #112	; 0x70
 8003b86:	4393      	bics	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a32      	ldr	r2, [pc, #200]	; (8003c60 <TIM_Base_SetConfig+0x110>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01c      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	05db      	lsls	r3, r3, #23
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d017      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	; (8003c68 <TIM_Base_SetConfig+0x118>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00f      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <TIM_Base_SetConfig+0x11c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <TIM_Base_SetConfig+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_Base_SetConfig+0x86>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <TIM_Base_SetConfig+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d108      	bne.n	8003be8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <TIM_Base_SetConfig+0x12c>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	4393      	bics	r3, r2
 8003bee:	001a      	movs	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <TIM_Base_SetConfig+0x110>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0xde>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <TIM_Base_SetConfig+0x120>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0xde>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0xde>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <TIM_Base_SetConfig+0x128>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d103      	bne.n	8003c36 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2201      	movs	r2, #1
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4393      	bics	r3, r2
 8003c50:	001a      	movs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	611a      	str	r2, [r3, #16]
  }
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40002000 	.word	0x40002000
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800
 8003c7c:	fffffcff 	.word	0xfffffcff

08003c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4393      	bics	r3, r2
 8003c98:	001a      	movs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <TIM_OC1_SetConfig+0xf8>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4393      	bics	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <TIM_OC1_SetConfig+0xfc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_OC1_SetConfig+0x76>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <TIM_OC1_SetConfig+0x100>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_OC1_SetConfig+0x76>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <TIM_OC1_SetConfig+0x104>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC1_SetConfig+0x76>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <TIM_OC1_SetConfig+0x108>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10c      	bne.n	8003d10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <TIM_OC1_SetConfig+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_OC1_SetConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <TIM_OC1_SetConfig+0x100>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_OC1_SetConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_OC1_SetConfig+0x104>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC1_SetConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <TIM_OC1_SetConfig+0x108>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <TIM_OC1_SetConfig+0x10c>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <TIM_OC1_SetConfig+0x110>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b006      	add	sp, #24
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	fffeff8f 	.word	0xfffeff8f
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	fffffeff 	.word	0xfffffeff
 8003d90:	fffffdff 	.word	0xfffffdff

08003d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	2210      	movs	r2, #16
 8003daa:	4393      	bics	r3, r2
 8003dac:	001a      	movs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a2e      	ldr	r2, [pc, #184]	; (8003e7c <TIM_OC2_SetConfig+0xe8>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a2d      	ldr	r2, [pc, #180]	; (8003e80 <TIM_OC2_SetConfig+0xec>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	4393      	bics	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a24      	ldr	r2, [pc, #144]	; (8003e84 <TIM_OC2_SetConfig+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10d      	bne.n	8003e12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	4393      	bics	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	4393      	bics	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <TIM_OC2_SetConfig+0xf0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00b      	beq.n	8003e32 <TIM_OC2_SetConfig+0x9e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <TIM_OC2_SetConfig+0xf4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <TIM_OC2_SetConfig+0x9e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <TIM_OC2_SetConfig+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC2_SetConfig+0x9e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <TIM_OC2_SetConfig+0xfc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <TIM_OC2_SetConfig+0x100>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <TIM_OC2_SetConfig+0x104>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	feff8fff 	.word	0xfeff8fff
 8003e80:	fffffcff 	.word	0xfffffcff
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40014400 	.word	0x40014400
 8003e90:	40014800 	.word	0x40014800
 8003e94:	fffffbff 	.word	0xfffffbff
 8003e98:	fffff7ff 	.word	0xfffff7ff

08003e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <TIM_OC3_SetConfig+0xe4>)
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_OC3_SetConfig+0xe8>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <TIM_OC3_SetConfig+0xec>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <TIM_OC3_SetConfig+0xf0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10d      	bne.n	8003f16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4a24      	ldr	r2, [pc, #144]	; (8003f90 <TIM_OC3_SetConfig+0xf4>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <TIM_OC3_SetConfig+0xf8>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <TIM_OC3_SetConfig+0xf0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_OC3_SetConfig+0x9a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <TIM_OC3_SetConfig+0xfc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_OC3_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <TIM_OC3_SetConfig+0x100>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_OC3_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <TIM_OC3_SetConfig+0x104>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d113      	bne.n	8003f5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <TIM_OC3_SetConfig+0x108>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <TIM_OC3_SetConfig+0x10c>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b006      	add	sp, #24
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	fffffeff 	.word	0xfffffeff
 8003f84:	fffeff8f 	.word	0xfffeff8f
 8003f88:	fffffdff 	.word	0xfffffdff
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	fffff7ff 	.word	0xfffff7ff
 8003f94:	fffffbff 	.word	0xfffffbff
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	ffffefff 	.word	0xffffefff
 8003fa8:	ffffdfff 	.word	0xffffdfff

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4a26      	ldr	r2, [pc, #152]	; (800405c <TIM_OC4_SetConfig+0xb0>)
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a22      	ldr	r2, [pc, #136]	; (8004060 <TIM_OC4_SetConfig+0xb4>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a21      	ldr	r2, [pc, #132]	; (8004064 <TIM_OC4_SetConfig+0xb8>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <TIM_OC4_SetConfig+0xbc>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a19      	ldr	r2, [pc, #100]	; (800406c <TIM_OC4_SetConfig+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_OC4_SetConfig+0x78>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a18      	ldr	r2, [pc, #96]	; (8004070 <TIM_OC4_SetConfig+0xc4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_OC4_SetConfig+0x78>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <TIM_OC4_SetConfig+0xc8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC4_SetConfig+0x78>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <TIM_OC4_SetConfig+0xcc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d109      	bne.n	8004038 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <TIM_OC4_SetConfig+0xd0>)
 8004028:	4013      	ands	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b006      	add	sp, #24
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	ffffefff 	.word	0xffffefff
 8004060:	feff8fff 	.word	0xfeff8fff
 8004064:	fffffcff 	.word	0xfffffcff
 8004068:	ffffdfff 	.word	0xffffdfff
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800
 800407c:	ffffbfff 	.word	0xffffbfff

08004080 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4a23      	ldr	r2, [pc, #140]	; (8004124 <TIM_OC5_SetConfig+0xa4>)
 8004096:	401a      	ands	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <TIM_OC5_SetConfig+0xa8>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <TIM_OC5_SetConfig+0xac>)
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a17      	ldr	r2, [pc, #92]	; (8004130 <TIM_OC5_SetConfig+0xb0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_OC5_SetConfig+0x6e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a16      	ldr	r2, [pc, #88]	; (8004134 <TIM_OC5_SetConfig+0xb4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_OC5_SetConfig+0x6e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <TIM_OC5_SetConfig+0xb8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_OC5_SetConfig+0x6e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <TIM_OC5_SetConfig+0xbc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d109      	bne.n	8004102 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <TIM_OC5_SetConfig+0xa4>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b006      	add	sp, #24
 8004122:	bd80      	pop	{r7, pc}
 8004124:	fffeffff 	.word	0xfffeffff
 8004128:	fffeff8f 	.word	0xfffeff8f
 800412c:	fffdffff 	.word	0xfffdffff
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800

08004140 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <TIM_OC6_SetConfig+0xa8>)
 8004156:	401a      	ands	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a20      	ldr	r2, [pc, #128]	; (80041ec <TIM_OC6_SetConfig+0xac>)
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <TIM_OC6_SetConfig+0xb0>)
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	051b      	lsls	r3, r3, #20
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <TIM_OC6_SetConfig+0xb4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_OC6_SetConfig+0x70>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <TIM_OC6_SetConfig+0xb8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_OC6_SetConfig+0x70>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <TIM_OC6_SetConfig+0xbc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC6_SetConfig+0x70>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <TIM_OC6_SetConfig+0xc0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d109      	bne.n	80041c4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <TIM_OC6_SetConfig+0xc4>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	029b      	lsls	r3, r3, #10
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b006      	add	sp, #24
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	ffefffff 	.word	0xffefffff
 80041ec:	feff8fff 	.word	0xfeff8fff
 80041f0:	ffdfffff 	.word	0xffdfffff
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40014400 	.word	0x40014400
 8004200:	40014800 	.word	0x40014800
 8004204:	fffbffff 	.word	0xfffbffff

08004208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	2201      	movs	r2, #1
 8004220:	4393      	bics	r3, r2
 8004222:	001a      	movs	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	22f0      	movs	r2, #240	; 0xf0
 8004232:	4393      	bics	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	220a      	movs	r2, #10
 8004244:	4393      	bics	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b006      	add	sp, #24
 8004262:	bd80      	pop	{r7, pc}

08004264 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	2210      	movs	r2, #16
 800427c:	4393      	bics	r3, r2
 800427e:	001a      	movs	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <TIM_TI2_ConfigInputStage+0x60>)
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	031b      	lsls	r3, r3, #12
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	22a0      	movs	r2, #160	; 0xa0
 80042a0:	4393      	bics	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b006      	add	sp, #24
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	ffff0fff 	.word	0xffff0fff

080042c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a08      	ldr	r2, [pc, #32]	; (80042fc <TIM_ITRx_SetConfig+0x34>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	2207      	movs	r2, #7
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	609a      	str	r2, [r3, #8]
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b004      	add	sp, #16
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	ffcfff8f 	.word	0xffcfff8f

08004300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <TIM_ETR_SetConfig+0x3c>)
 8004318:	4013      	ands	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	021a      	lsls	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bd80      	pop	{r7, pc}
 800433c:	ffff00ff 	.word	0xffff00ff

08004340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	221f      	movs	r2, #31
 8004350:	4013      	ands	r3, r2
 8004352:	2201      	movs	r2, #1
 8004354:	409a      	lsls	r2, r3
 8004356:	0013      	movs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	43d2      	mvns	r2, r2
 8004362:	401a      	ands	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	211f      	movs	r1, #31
 8004370:	400b      	ands	r3, r1
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4099      	lsls	r1, r3
 8004376:	000b      	movs	r3, r1
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b006      	add	sp, #24
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223c      	movs	r2, #60	; 0x3c
 8004396:	5c9b      	ldrb	r3, [r3, r2]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800439c:	2302      	movs	r3, #2
 800439e:	e05a      	b.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	223c      	movs	r2, #60	; 0x3c
 80043a4:	2101      	movs	r1, #1
 80043a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	223d      	movs	r2, #61	; 0x3d
 80043ac:	2102      	movs	r1, #2
 80043ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a25      	ldr	r2, [pc, #148]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2270      	movs	r2, #112	; 0x70
 80043e0:	4393      	bics	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d014      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	05db      	lsls	r3, r3, #23
 8004408:	429a      	cmp	r2, r3
 800440a:	d00e      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a14      	ldr	r2, [pc, #80]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a12      	ldr	r2, [pc, #72]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10c      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2280      	movs	r2, #128	; 0x80
 800442e:	4393      	bics	r3, r2
 8004430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	223d      	movs	r2, #61	; 0x3d
 8004448:	2101      	movs	r1, #1
 800444a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	223c      	movs	r2, #60	; 0x3c
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	40012c00 	.word	0x40012c00
 8004464:	ff0fffff 	.word	0xff0fffff
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40014000 	.word	0x40014000

08004474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	223c      	movs	r2, #60	; 0x3c
 8004486:	5c9b      	ldrb	r3, [r3, r2]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800448c:	2302      	movs	r3, #2
 800448e:	e06f      	b.n	8004570 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	223c      	movs	r2, #60	; 0x3c
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	22ff      	movs	r2, #255	; 0xff
 800449c:	4393      	bics	r3, r2
 800449e:	001a      	movs	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a33      	ldr	r2, [pc, #204]	; (8004578 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80044ac:	401a      	ands	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a30      	ldr	r2, [pc, #192]	; (800457c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80044ba:	401a      	ands	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a2e      	ldr	r2, [pc, #184]	; (8004580 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80044c8:	401a      	ands	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80044d6:	401a      	ands	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80044e4:	401a      	ands	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80044f2:	401a      	ands	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004500:	401a      	ands	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004510:	401a      	ands	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d11c      	bne.n	800455e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004528:	401a      	ands	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	051b      	lsls	r3, r3, #20
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004538:	401a      	ands	r2, r3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004546:	401a      	ands	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004554:	401a      	ands	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	223c      	movs	r2, #60	; 0x3c
 800456a:	2100      	movs	r1, #0
 800456c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bd80      	pop	{r7, pc}
 8004578:	fffffcff 	.word	0xfffffcff
 800457c:	fffffbff 	.word	0xfffffbff
 8004580:	fffff7ff 	.word	0xfffff7ff
 8004584:	ffffefff 	.word	0xffffefff
 8004588:	ffffdfff 	.word	0xffffdfff
 800458c:	ffffbfff 	.word	0xffffbfff
 8004590:	fff0ffff 	.word	0xfff0ffff
 8004594:	efffffff 	.word	0xefffffff
 8004598:	40012c00 	.word	0x40012c00
 800459c:	ff0fffff 	.word	0xff0fffff
 80045a0:	feffffff 	.word	0xfeffffff
 80045a4:	fdffffff 	.word	0xfdffffff
 80045a8:	dfffffff 	.word	0xdfffffff

080045ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e046      	b.n	800464c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2288      	movs	r2, #136	; 0x88
 80045c2:	589b      	ldr	r3, [r3, r2]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2284      	movs	r2, #132	; 0x84
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f7fd fa7c 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2288      	movs	r2, #136	; 0x88
 80045dc:	2124      	movs	r1, #36	; 0x24
 80045de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	438a      	bics	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 ffaa 	bl	8005554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fc50 	bl	8004ea8 <UART_SetConfig>
 8004608:	0003      	movs	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e01c      	b.n	800464c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	490d      	ldr	r1, [pc, #52]	; (8004654 <HAL_UART_Init+0xa8>)
 800461e:	400a      	ands	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	212a      	movs	r1, #42	; 0x2a
 800462e:	438a      	bics	r2, r1
 8004630:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f001 f839 	bl	80056bc <UART_CheckIdleState>
 800464a:	0003      	movs	r3, r0
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b002      	add	sp, #8
 8004652:	bd80      	pop	{r7, pc}
 8004654:	ffffb7ff 	.word	0xffffb7ff

08004658 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	1dbb      	adds	r3, r7, #6
 8004666:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	228c      	movs	r2, #140	; 0x8c
 800466c:	589b      	ldr	r3, [r3, r2]
 800466e:	2b20      	cmp	r3, #32
 8004670:	d000      	beq.n	8004674 <HAL_UART_Receive+0x1c>
 8004672:	e0d0      	b.n	8004816 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_UART_Receive+0x2a>
 800467a:	1dbb      	adds	r3, r7, #6
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0c8      	b.n	8004818 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	015b      	lsls	r3, r3, #5
 800468e:	429a      	cmp	r2, r3
 8004690:	d109      	bne.n	80046a6 <HAL_UART_Receive+0x4e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2201      	movs	r2, #1
 800469e:	4013      	ands	r3, r2
 80046a0:	d001      	beq.n	80046a6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e0b8      	b.n	8004818 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2290      	movs	r2, #144	; 0x90
 80046aa:	2100      	movs	r1, #0
 80046ac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	228c      	movs	r2, #140	; 0x8c
 80046b2:	2122      	movs	r1, #34	; 0x22
 80046b4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046bc:	f7fd fb16 	bl	8001cec <HAL_GetTick>
 80046c0:	0003      	movs	r3, r0
 80046c2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1dba      	adds	r2, r7, #6
 80046c8:	215c      	movs	r1, #92	; 0x5c
 80046ca:	8812      	ldrh	r2, [r2, #0]
 80046cc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1dba      	adds	r2, r7, #6
 80046d2:	215e      	movs	r1, #94	; 0x5e
 80046d4:	8812      	ldrh	r2, [r2, #0]
 80046d6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	015b      	lsls	r3, r3, #5
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d10d      	bne.n	8004700 <HAL_UART_Receive+0xa8>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <HAL_UART_Receive+0x9e>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2260      	movs	r2, #96	; 0x60
 80046f0:	494b      	ldr	r1, [pc, #300]	; (8004820 <HAL_UART_Receive+0x1c8>)
 80046f2:	5299      	strh	r1, [r3, r2]
 80046f4:	e02e      	b.n	8004754 <HAL_UART_Receive+0xfc>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2260      	movs	r2, #96	; 0x60
 80046fa:	21ff      	movs	r1, #255	; 0xff
 80046fc:	5299      	strh	r1, [r3, r2]
 80046fe:	e029      	b.n	8004754 <HAL_UART_Receive+0xfc>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_UART_Receive+0xcc>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_UART_Receive+0xc2>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2260      	movs	r2, #96	; 0x60
 8004714:	21ff      	movs	r1, #255	; 0xff
 8004716:	5299      	strh	r1, [r3, r2]
 8004718:	e01c      	b.n	8004754 <HAL_UART_Receive+0xfc>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2260      	movs	r2, #96	; 0x60
 800471e:	217f      	movs	r1, #127	; 0x7f
 8004720:	5299      	strh	r1, [r3, r2]
 8004722:	e017      	b.n	8004754 <HAL_UART_Receive+0xfc>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	055b      	lsls	r3, r3, #21
 800472c:	429a      	cmp	r2, r3
 800472e:	d10d      	bne.n	800474c <HAL_UART_Receive+0xf4>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <HAL_UART_Receive+0xea>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2260      	movs	r2, #96	; 0x60
 800473c:	217f      	movs	r1, #127	; 0x7f
 800473e:	5299      	strh	r1, [r3, r2]
 8004740:	e008      	b.n	8004754 <HAL_UART_Receive+0xfc>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2260      	movs	r2, #96	; 0x60
 8004746:	213f      	movs	r1, #63	; 0x3f
 8004748:	5299      	strh	r1, [r3, r2]
 800474a:	e003      	b.n	8004754 <HAL_UART_Receive+0xfc>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2260      	movs	r2, #96	; 0x60
 8004750:	2100      	movs	r1, #0
 8004752:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004754:	2312      	movs	r3, #18
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	2160      	movs	r1, #96	; 0x60
 800475c:	5a52      	ldrh	r2, [r2, r1]
 800475e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	015b      	lsls	r3, r3, #5
 8004768:	429a      	cmp	r2, r3
 800476a:	d108      	bne.n	800477e <HAL_UART_Receive+0x126>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e003      	b.n	8004786 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004786:	e03a      	b.n	80047fe <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	0013      	movs	r3, r2
 8004792:	2200      	movs	r2, #0
 8004794:	2120      	movs	r1, #32
 8004796:	f001 f83b 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 800479a:	1e03      	subs	r3, r0, #0
 800479c:	d005      	beq.n	80047aa <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	228c      	movs	r2, #140	; 0x8c
 80047a2:	2120      	movs	r1, #32
 80047a4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e036      	b.n	8004818 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10e      	bne.n	80047ce <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2212      	movs	r2, #18
 80047ba:	18ba      	adds	r2, r7, r2
 80047bc:	8812      	ldrh	r2, [r2, #0]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3302      	adds	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e00e      	b.n	80047ec <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2212      	movs	r2, #18
 80047d8:	18ba      	adds	r2, r7, r2
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	4013      	ands	r3, r2
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	225e      	movs	r2, #94	; 0x5e
 80047f0:	5a9b      	ldrh	r3, [r3, r2]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b299      	uxth	r1, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	225e      	movs	r2, #94	; 0x5e
 80047fc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	225e      	movs	r2, #94	; 0x5e
 8004802:	5a9b      	ldrh	r3, [r3, r2]
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1be      	bne.n	8004788 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	228c      	movs	r2, #140	; 0x8c
 800480e:	2120      	movs	r1, #32
 8004810:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b008      	add	sp, #32
 800481e:	bd80      	pop	{r7, pc}
 8004820:	000001ff 	.word	0x000001ff

08004824 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004824:	b5b0      	push	{r4, r5, r7, lr}
 8004826:	b0aa      	sub	sp, #168	; 0xa8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	22a4      	movs	r2, #164	; 0xa4
 8004834:	18b9      	adds	r1, r7, r2
 8004836:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	20a0      	movs	r0, #160	; 0xa0
 8004840:	1839      	adds	r1, r7, r0
 8004842:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	249c      	movs	r4, #156	; 0x9c
 800484c:	1939      	adds	r1, r7, r4
 800484e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004850:	0011      	movs	r1, r2
 8004852:	18bb      	adds	r3, r7, r2
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4aa2      	ldr	r2, [pc, #648]	; (8004ae0 <HAL_UART_IRQHandler+0x2bc>)
 8004858:	4013      	ands	r3, r2
 800485a:	2298      	movs	r2, #152	; 0x98
 800485c:	18bd      	adds	r5, r7, r2
 800485e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004860:	18bb      	adds	r3, r7, r2
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d11a      	bne.n	800489e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004868:	187b      	adds	r3, r7, r1
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2220      	movs	r2, #32
 800486e:	4013      	ands	r3, r2
 8004870:	d015      	beq.n	800489e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004872:	183b      	adds	r3, r7, r0
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2220      	movs	r2, #32
 8004878:	4013      	ands	r3, r2
 800487a:	d105      	bne.n	8004888 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800487c:	193b      	adds	r3, r7, r4
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	055b      	lsls	r3, r3, #21
 8004884:	4013      	ands	r3, r2
 8004886:	d00a      	beq.n	800489e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	2b00      	cmp	r3, #0
 800488e:	d100      	bne.n	8004892 <HAL_UART_IRQHandler+0x6e>
 8004890:	e2dc      	b.n	8004e4c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	0010      	movs	r0, r2
 800489a:	4798      	blx	r3
      }
      return;
 800489c:	e2d6      	b.n	8004e4c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800489e:	2398      	movs	r3, #152	; 0x98
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d100      	bne.n	80048aa <HAL_UART_IRQHandler+0x86>
 80048a8:	e122      	b.n	8004af0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048aa:	239c      	movs	r3, #156	; 0x9c
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a8c      	ldr	r2, [pc, #560]	; (8004ae4 <HAL_UART_IRQHandler+0x2c0>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	d106      	bne.n	80048c4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048b6:	23a0      	movs	r3, #160	; 0xa0
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a8a      	ldr	r2, [pc, #552]	; (8004ae8 <HAL_UART_IRQHandler+0x2c4>)
 80048be:	4013      	ands	r3, r2
 80048c0:	d100      	bne.n	80048c4 <HAL_UART_IRQHandler+0xa0>
 80048c2:	e115      	b.n	8004af0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048c4:	23a4      	movs	r3, #164	; 0xa4
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	d012      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
 80048d0:	23a0      	movs	r3, #160	; 0xa0
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4013      	ands	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2201      	movs	r2, #1
 80048e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2290      	movs	r2, #144	; 0x90
 80048ea:	589b      	ldr	r3, [r3, r2]
 80048ec:	2201      	movs	r2, #1
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2190      	movs	r1, #144	; 0x90
 80048f4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048f6:	23a4      	movs	r3, #164	; 0xa4
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d011      	beq.n	8004926 <HAL_UART_IRQHandler+0x102>
 8004902:	239c      	movs	r3, #156	; 0x9c
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2201      	movs	r2, #1
 800490a:	4013      	ands	r3, r2
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2202      	movs	r2, #2
 8004914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2290      	movs	r2, #144	; 0x90
 800491a:	589b      	ldr	r3, [r3, r2]
 800491c:	2204      	movs	r2, #4
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2190      	movs	r1, #144	; 0x90
 8004924:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004926:	23a4      	movs	r3, #164	; 0xa4
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2204      	movs	r2, #4
 800492e:	4013      	ands	r3, r2
 8004930:	d011      	beq.n	8004956 <HAL_UART_IRQHandler+0x132>
 8004932:	239c      	movs	r3, #156	; 0x9c
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	d00b      	beq.n	8004956 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2204      	movs	r2, #4
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2290      	movs	r2, #144	; 0x90
 800494a:	589b      	ldr	r3, [r3, r2]
 800494c:	2202      	movs	r2, #2
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2190      	movs	r1, #144	; 0x90
 8004954:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004956:	23a4      	movs	r3, #164	; 0xa4
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2208      	movs	r2, #8
 800495e:	4013      	ands	r3, r2
 8004960:	d017      	beq.n	8004992 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004962:	23a0      	movs	r3, #160	; 0xa0
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2220      	movs	r2, #32
 800496a:	4013      	ands	r3, r2
 800496c:	d105      	bne.n	800497a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800496e:	239c      	movs	r3, #156	; 0x9c
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5b      	ldr	r2, [pc, #364]	; (8004ae4 <HAL_UART_IRQHandler+0x2c0>)
 8004976:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004978:	d00b      	beq.n	8004992 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2208      	movs	r2, #8
 8004980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2290      	movs	r2, #144	; 0x90
 8004986:	589b      	ldr	r3, [r3, r2]
 8004988:	2208      	movs	r2, #8
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2190      	movs	r1, #144	; 0x90
 8004990:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004992:	23a4      	movs	r3, #164	; 0xa4
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	4013      	ands	r3, r2
 800499e:	d013      	beq.n	80049c8 <HAL_UART_IRQHandler+0x1a4>
 80049a0:	23a0      	movs	r3, #160	; 0xa0
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	04db      	lsls	r3, r3, #19
 80049aa:	4013      	ands	r3, r2
 80049ac:	d00c      	beq.n	80049c8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	0112      	lsls	r2, r2, #4
 80049b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2290      	movs	r2, #144	; 0x90
 80049bc:	589b      	ldr	r3, [r3, r2]
 80049be:	2220      	movs	r2, #32
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2190      	movs	r1, #144	; 0x90
 80049c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2290      	movs	r2, #144	; 0x90
 80049cc:	589b      	ldr	r3, [r3, r2]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d100      	bne.n	80049d4 <HAL_UART_IRQHandler+0x1b0>
 80049d2:	e23d      	b.n	8004e50 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049d4:	23a4      	movs	r3, #164	; 0xa4
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2220      	movs	r2, #32
 80049dc:	4013      	ands	r3, r2
 80049de:	d015      	beq.n	8004a0c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049e0:	23a0      	movs	r3, #160	; 0xa0
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	4013      	ands	r3, r2
 80049ea:	d106      	bne.n	80049fa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049ec:	239c      	movs	r3, #156	; 0x9c
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	055b      	lsls	r3, r3, #21
 80049f6:	4013      	ands	r3, r2
 80049f8:	d008      	beq.n	8004a0c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d004      	beq.n	8004a0c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	0010      	movs	r0, r2
 8004a0a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2290      	movs	r2, #144	; 0x90
 8004a10:	589b      	ldr	r3, [r3, r2]
 8004a12:	2194      	movs	r1, #148	; 0x94
 8004a14:	187a      	adds	r2, r7, r1
 8004a16:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2240      	movs	r2, #64	; 0x40
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d004      	beq.n	8004a30 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a26:	187b      	adds	r3, r7, r1
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2228      	movs	r2, #40	; 0x28
 8004a2c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2e:	d04c      	beq.n	8004aca <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 ff5c 	bl	80058f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d13c      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a46:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4e:	2090      	movs	r0, #144	; 0x90
 8004a50:	183a      	adds	r2, r7, r0
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	2301      	movs	r3, #1
 8004a56:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a78:	f383 8810 	msr	PRIMASK, r3
}
 8004a7c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2280      	movs	r2, #128	; 0x80
 8004a82:	589b      	ldr	r3, [r3, r2]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d016      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	589b      	ldr	r3, [r3, r2]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <HAL_UART_IRQHandler+0x2c8>)
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2280      	movs	r2, #128	; 0x80
 8004a96:	589b      	ldr	r3, [r3, r2]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fd fa93 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8004a9e:	1e03      	subs	r3, r0, #0
 8004aa0:	d01c      	beq.n	8004adc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2280      	movs	r2, #128	; 0x80
 8004aa6:	589b      	ldr	r3, [r3, r2]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	5852      	ldr	r2, [r2, r1]
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	e012      	b.n	8004adc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 f9e1 	bl	8004e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abe:	e00d      	b.n	8004adc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 f9dc 	bl	8004e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	e008      	b.n	8004adc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 f9d7 	bl	8004e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2290      	movs	r2, #144	; 0x90
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ada:	e1b9      	b.n	8004e50 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	46c0      	nop			; (mov r8, r8)
    return;
 8004ade:	e1b7      	b.n	8004e50 <HAL_UART_IRQHandler+0x62c>
 8004ae0:	0000080f 	.word	0x0000080f
 8004ae4:	10000001 	.word	0x10000001
 8004ae8:	04000120 	.word	0x04000120
 8004aec:	080059bd 	.word	0x080059bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d000      	beq.n	8004afa <HAL_UART_IRQHandler+0x2d6>
 8004af8:	e13e      	b.n	8004d78 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004afa:	23a4      	movs	r3, #164	; 0xa4
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2210      	movs	r2, #16
 8004b02:	4013      	ands	r3, r2
 8004b04:	d100      	bne.n	8004b08 <HAL_UART_IRQHandler+0x2e4>
 8004b06:	e137      	b.n	8004d78 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b08:	23a0      	movs	r3, #160	; 0xa0
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2210      	movs	r2, #16
 8004b10:	4013      	ands	r3, r2
 8004b12:	d100      	bne.n	8004b16 <HAL_UART_IRQHandler+0x2f2>
 8004b14:	e130      	b.n	8004d78 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d000      	beq.n	8004b2e <HAL_UART_IRQHandler+0x30a>
 8004b2c:	e0a4      	b.n	8004c78 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	589b      	ldr	r3, [r3, r2]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	217e      	movs	r1, #126	; 0x7e
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d100      	bne.n	8004b48 <HAL_UART_IRQHandler+0x324>
 8004b46:	e185      	b.n	8004e54 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	225c      	movs	r2, #92	; 0x5c
 8004b4c:	5a9b      	ldrh	r3, [r3, r2]
 8004b4e:	187a      	adds	r2, r7, r1
 8004b50:	8812      	ldrh	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d300      	bcc.n	8004b58 <HAL_UART_IRQHandler+0x334>
 8004b56:	e17d      	b.n	8004e54 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	187a      	adds	r2, r7, r1
 8004b5c:	215e      	movs	r1, #94	; 0x5e
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2280      	movs	r2, #128	; 0x80
 8004b66:	589b      	ldr	r3, [r3, r2]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d170      	bne.n	8004c54 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b72:	f3ef 8310 	mrs	r3, PRIMASK
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	f383 8810 	msr	PRIMASK, r3
}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	49b4      	ldr	r1, [pc, #720]	; (8004e64 <HAL_UART_IRQHandler+0x640>)
 8004b94:	400a      	ands	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bac:	677b      	str	r3, [r7, #116]	; 0x74
 8004bae:	2301      	movs	r3, #1
 8004bb0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	438a      	bics	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bcc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd0:	f383 8810 	msr	PRIMASK, r3
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bda:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bde:	673b      	str	r3, [r7, #112]	; 0x70
 8004be0:	2301      	movs	r3, #1
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2140      	movs	r1, #64	; 0x40
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	228c      	movs	r2, #140	; 0x8c
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c20:	2301      	movs	r3, #1
 8004c22:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2110      	movs	r1, #16
 8004c38:	438a      	bics	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c42:	f383 8810 	msr	PRIMASK, r3
}
 8004c46:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	589b      	ldr	r3, [r3, r2]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7fd f958 	bl	8001f04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	225c      	movs	r2, #92	; 0x5c
 8004c5e:	5a9a      	ldrh	r2, [r3, r2]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	215e      	movs	r1, #94	; 0x5e
 8004c64:	5a5b      	ldrh	r3, [r3, r1]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0011      	movs	r1, r2
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f90d 	bl	8004e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c76:	e0ed      	b.n	8004e54 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	225c      	movs	r2, #92	; 0x5c
 8004c7c:	5a99      	ldrh	r1, [r3, r2]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	225e      	movs	r2, #94	; 0x5e
 8004c82:	5a9b      	ldrh	r3, [r3, r2]
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	208e      	movs	r0, #142	; 0x8e
 8004c88:	183b      	adds	r3, r7, r0
 8004c8a:	1a8a      	subs	r2, r1, r2
 8004c8c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	225e      	movs	r2, #94	; 0x5e
 8004c92:	5a9b      	ldrh	r3, [r3, r2]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d100      	bne.n	8004c9c <HAL_UART_IRQHandler+0x478>
 8004c9a:	e0dd      	b.n	8004e58 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004c9c:	183b      	adds	r3, r7, r0
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d100      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x482>
 8004ca4:	e0d8      	b.n	8004e58 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8004caa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cac:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cae:	2488      	movs	r4, #136	; 0x88
 8004cb0:	193a      	adds	r2, r7, r4
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f383 8810 	msr	PRIMASK, r3
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4967      	ldr	r1, [pc, #412]	; (8004e68 <HAL_UART_IRQHandler+0x644>)
 8004ccc:	400a      	ands	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cde:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ce4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ce6:	2484      	movs	r4, #132	; 0x84
 8004ce8:	193a      	adds	r2, r7, r4
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	2301      	movs	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	495a      	ldr	r1, [pc, #360]	; (8004e6c <HAL_UART_IRQHandler+0x648>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	228c      	movs	r2, #140	; 0x8c
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	2480      	movs	r4, #128	; 0x80
 8004d34:	193a      	adds	r2, r7, r4
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	f383 8810 	msr	PRIMASK, r3
}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2110      	movs	r1, #16
 8004d50:	438a      	bics	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	193b      	adds	r3, r7, r4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d68:	183b      	adds	r3, r7, r0
 8004d6a:	881a      	ldrh	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 f88d 	bl	8004e90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d76:	e06f      	b.n	8004e58 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d78:	23a4      	movs	r3, #164	; 0xa4
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	035b      	lsls	r3, r3, #13
 8004d82:	4013      	ands	r3, r2
 8004d84:	d010      	beq.n	8004da8 <HAL_UART_IRQHandler+0x584>
 8004d86:	239c      	movs	r3, #156	; 0x9c
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	03db      	lsls	r3, r3, #15
 8004d90:	4013      	ands	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2280      	movs	r2, #128	; 0x80
 8004d9a:	0352      	lsls	r2, r2, #13
 8004d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 fe4e 	bl	8005a42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004da6:	e05a      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004da8:	23a4      	movs	r3, #164	; 0xa4
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	4013      	ands	r3, r2
 8004db2:	d016      	beq.n	8004de2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004db4:	23a0      	movs	r3, #160	; 0xa0
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d106      	bne.n	8004dce <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004dc0:	239c      	movs	r3, #156	; 0x9c
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d042      	beq.n	8004e5c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	0010      	movs	r0, r2
 8004dde:	4798      	blx	r3
    }
    return;
 8004de0:	e03c      	b.n	8004e5c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004de2:	23a4      	movs	r3, #164	; 0xa4
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2240      	movs	r2, #64	; 0x40
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00a      	beq.n	8004e04 <HAL_UART_IRQHandler+0x5e0>
 8004dee:	23a0      	movs	r3, #160	; 0xa0
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	4013      	ands	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 fdf4 	bl	80059ea <UART_EndTransmit_IT>
    return;
 8004e02:	e02c      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e04:	23a4      	movs	r3, #164	; 0xa4
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0x606>
 8004e12:	23a0      	movs	r3, #160	; 0xa0
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	05db      	lsls	r3, r3, #23
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fe1d 	bl	8005a62 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e28:	e019      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e2a:	23a4      	movs	r3, #164	; 0xa4
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	045b      	lsls	r3, r3, #17
 8004e34:	4013      	ands	r3, r2
 8004e36:	d012      	beq.n	8004e5e <HAL_UART_IRQHandler+0x63a>
 8004e38:	23a0      	movs	r3, #160	; 0xa0
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da0d      	bge.n	8004e5e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 fe04 	bl	8005a52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e4a:	e008      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
      return;
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	e006      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
    return;
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	e004      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
      return;
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	e002      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
      return;
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	e000      	b.n	8004e5e <HAL_UART_IRQHandler+0x63a>
    return;
 8004e5c:	46c0      	nop			; (mov r8, r8)
  }
}
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b02a      	add	sp, #168	; 0xa8
 8004e62:	bdb0      	pop	{r4, r5, r7, pc}
 8004e64:	fffffeff 	.word	0xfffffeff
 8004e68:	fffffedf 	.word	0xfffffedf
 8004e6c:	effffffe 	.word	0xeffffffe

08004e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	000a      	movs	r2, r1
 8004e9a:	1cbb      	adds	r3, r7, #2
 8004e9c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b002      	add	sp, #8
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b5b0      	push	{r4, r5, r7, lr}
 8004eaa:	b090      	sub	sp, #64	; 0x40
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb0:	231a      	movs	r3, #26
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	189b      	adds	r3, r3, r2
 8004eb6:	19db      	adds	r3, r3, r7
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4ac1      	ldr	r2, [pc, #772]	; (80051e0 <UART_SetConfig+0x338>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	0019      	movs	r1, r3
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4abc      	ldr	r2, [pc, #752]	; (80051e4 <UART_SetConfig+0x33c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	68d9      	ldr	r1, [r3, #12]
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	0003      	movs	r3, r0
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4ab6      	ldr	r2, [pc, #728]	; (80051e8 <UART_SetConfig+0x340>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <UART_SetConfig+0x80>
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4ab4      	ldr	r2, [pc, #720]	; (80051ec <UART_SetConfig+0x344>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f24:	4313      	orrs	r3, r2
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4ab0      	ldr	r2, [pc, #704]	; (80051f0 <UART_SetConfig+0x348>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	0019      	movs	r1, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	220f      	movs	r2, #15
 8004f46:	4393      	bics	r3, r2
 8004f48:	0018      	movs	r0, r3
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	0003      	movs	r3, r0
 8004f54:	430b      	orrs	r3, r1
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4aa5      	ldr	r2, [pc, #660]	; (80051f4 <UART_SetConfig+0x34c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d131      	bne.n	8004fc6 <UART_SetConfig+0x11e>
 8004f62:	4ba5      	ldr	r3, [pc, #660]	; (80051f8 <UART_SetConfig+0x350>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	2203      	movs	r2, #3
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d01d      	beq.n	8004faa <UART_SetConfig+0x102>
 8004f6e:	d823      	bhi.n	8004fb8 <UART_SetConfig+0x110>
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d00c      	beq.n	8004f8e <UART_SetConfig+0xe6>
 8004f74:	d820      	bhi.n	8004fb8 <UART_SetConfig+0x110>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <UART_SetConfig+0xd8>
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d00e      	beq.n	8004f9c <UART_SetConfig+0xf4>
 8004f7e:	e01b      	b.n	8004fb8 <UART_SetConfig+0x110>
 8004f80:	231b      	movs	r3, #27
 8004f82:	2220      	movs	r2, #32
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e154      	b.n	8005238 <UART_SetConfig+0x390>
 8004f8e:	231b      	movs	r3, #27
 8004f90:	2220      	movs	r2, #32
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	19db      	adds	r3, r3, r7
 8004f96:	2202      	movs	r2, #2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e14d      	b.n	8005238 <UART_SetConfig+0x390>
 8004f9c:	231b      	movs	r3, #27
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	19db      	adds	r3, r3, r7
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e146      	b.n	8005238 <UART_SetConfig+0x390>
 8004faa:	231b      	movs	r3, #27
 8004fac:	2220      	movs	r2, #32
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	19db      	adds	r3, r3, r7
 8004fb2:	2208      	movs	r2, #8
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e13f      	b.n	8005238 <UART_SetConfig+0x390>
 8004fb8:	231b      	movs	r3, #27
 8004fba:	2220      	movs	r2, #32
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	19db      	adds	r3, r3, r7
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e138      	b.n	8005238 <UART_SetConfig+0x390>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a8c      	ldr	r2, [pc, #560]	; (80051fc <UART_SetConfig+0x354>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d131      	bne.n	8005034 <UART_SetConfig+0x18c>
 8004fd0:	4b89      	ldr	r3, [pc, #548]	; (80051f8 <UART_SetConfig+0x350>)
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	220c      	movs	r2, #12
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d01d      	beq.n	8005018 <UART_SetConfig+0x170>
 8004fdc:	d823      	bhi.n	8005026 <UART_SetConfig+0x17e>
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d00c      	beq.n	8004ffc <UART_SetConfig+0x154>
 8004fe2:	d820      	bhi.n	8005026 <UART_SetConfig+0x17e>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <UART_SetConfig+0x146>
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d00e      	beq.n	800500a <UART_SetConfig+0x162>
 8004fec:	e01b      	b.n	8005026 <UART_SetConfig+0x17e>
 8004fee:	231b      	movs	r3, #27
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	19db      	adds	r3, r3, r7
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e11d      	b.n	8005238 <UART_SetConfig+0x390>
 8004ffc:	231b      	movs	r3, #27
 8004ffe:	2220      	movs	r2, #32
 8005000:	189b      	adds	r3, r3, r2
 8005002:	19db      	adds	r3, r3, r7
 8005004:	2202      	movs	r2, #2
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e116      	b.n	8005238 <UART_SetConfig+0x390>
 800500a:	231b      	movs	r3, #27
 800500c:	2220      	movs	r2, #32
 800500e:	189b      	adds	r3, r3, r2
 8005010:	19db      	adds	r3, r3, r7
 8005012:	2204      	movs	r2, #4
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e10f      	b.n	8005238 <UART_SetConfig+0x390>
 8005018:	231b      	movs	r3, #27
 800501a:	2220      	movs	r2, #32
 800501c:	189b      	adds	r3, r3, r2
 800501e:	19db      	adds	r3, r3, r7
 8005020:	2208      	movs	r2, #8
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e108      	b.n	8005238 <UART_SetConfig+0x390>
 8005026:	231b      	movs	r3, #27
 8005028:	2220      	movs	r2, #32
 800502a:	189b      	adds	r3, r3, r2
 800502c:	19db      	adds	r3, r3, r7
 800502e:	2210      	movs	r2, #16
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e101      	b.n	8005238 <UART_SetConfig+0x390>
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a71      	ldr	r2, [pc, #452]	; (8005200 <UART_SetConfig+0x358>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d131      	bne.n	80050a2 <UART_SetConfig+0x1fa>
 800503e:	4b6e      	ldr	r3, [pc, #440]	; (80051f8 <UART_SetConfig+0x350>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	2230      	movs	r2, #48	; 0x30
 8005044:	4013      	ands	r3, r2
 8005046:	2b30      	cmp	r3, #48	; 0x30
 8005048:	d01d      	beq.n	8005086 <UART_SetConfig+0x1de>
 800504a:	d823      	bhi.n	8005094 <UART_SetConfig+0x1ec>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d00c      	beq.n	800506a <UART_SetConfig+0x1c2>
 8005050:	d820      	bhi.n	8005094 <UART_SetConfig+0x1ec>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <UART_SetConfig+0x1b4>
 8005056:	2b10      	cmp	r3, #16
 8005058:	d00e      	beq.n	8005078 <UART_SetConfig+0x1d0>
 800505a:	e01b      	b.n	8005094 <UART_SetConfig+0x1ec>
 800505c:	231b      	movs	r3, #27
 800505e:	2220      	movs	r2, #32
 8005060:	189b      	adds	r3, r3, r2
 8005062:	19db      	adds	r3, r3, r7
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e0e6      	b.n	8005238 <UART_SetConfig+0x390>
 800506a:	231b      	movs	r3, #27
 800506c:	2220      	movs	r2, #32
 800506e:	189b      	adds	r3, r3, r2
 8005070:	19db      	adds	r3, r3, r7
 8005072:	2202      	movs	r2, #2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e0df      	b.n	8005238 <UART_SetConfig+0x390>
 8005078:	231b      	movs	r3, #27
 800507a:	2220      	movs	r2, #32
 800507c:	189b      	adds	r3, r3, r2
 800507e:	19db      	adds	r3, r3, r7
 8005080:	2204      	movs	r2, #4
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e0d8      	b.n	8005238 <UART_SetConfig+0x390>
 8005086:	231b      	movs	r3, #27
 8005088:	2220      	movs	r2, #32
 800508a:	189b      	adds	r3, r3, r2
 800508c:	19db      	adds	r3, r3, r7
 800508e:	2208      	movs	r2, #8
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e0d1      	b.n	8005238 <UART_SetConfig+0x390>
 8005094:	231b      	movs	r3, #27
 8005096:	2220      	movs	r2, #32
 8005098:	189b      	adds	r3, r3, r2
 800509a:	19db      	adds	r3, r3, r7
 800509c:	2210      	movs	r2, #16
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e0ca      	b.n	8005238 <UART_SetConfig+0x390>
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a57      	ldr	r2, [pc, #348]	; (8005204 <UART_SetConfig+0x35c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d106      	bne.n	80050ba <UART_SetConfig+0x212>
 80050ac:	231b      	movs	r3, #27
 80050ae:	2220      	movs	r2, #32
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	19db      	adds	r3, r3, r7
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e0be      	b.n	8005238 <UART_SetConfig+0x390>
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a52      	ldr	r2, [pc, #328]	; (8005208 <UART_SetConfig+0x360>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d106      	bne.n	80050d2 <UART_SetConfig+0x22a>
 80050c4:	231b      	movs	r3, #27
 80050c6:	2220      	movs	r2, #32
 80050c8:	189b      	adds	r3, r3, r2
 80050ca:	19db      	adds	r3, r3, r7
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e0b2      	b.n	8005238 <UART_SetConfig+0x390>
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4d      	ldr	r2, [pc, #308]	; (800520c <UART_SetConfig+0x364>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d106      	bne.n	80050ea <UART_SetConfig+0x242>
 80050dc:	231b      	movs	r3, #27
 80050de:	2220      	movs	r2, #32
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	19db      	adds	r3, r3, r7
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e0a6      	b.n	8005238 <UART_SetConfig+0x390>
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3e      	ldr	r2, [pc, #248]	; (80051e8 <UART_SetConfig+0x340>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d13e      	bne.n	8005172 <UART_SetConfig+0x2ca>
 80050f4:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <UART_SetConfig+0x350>)
 80050f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f8:	23c0      	movs	r3, #192	; 0xc0
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	4013      	ands	r3, r2
 80050fe:	22c0      	movs	r2, #192	; 0xc0
 8005100:	0112      	lsls	r2, r2, #4
 8005102:	4293      	cmp	r3, r2
 8005104:	d027      	beq.n	8005156 <UART_SetConfig+0x2ae>
 8005106:	22c0      	movs	r2, #192	; 0xc0
 8005108:	0112      	lsls	r2, r2, #4
 800510a:	4293      	cmp	r3, r2
 800510c:	d82a      	bhi.n	8005164 <UART_SetConfig+0x2bc>
 800510e:	2280      	movs	r2, #128	; 0x80
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	4293      	cmp	r3, r2
 8005114:	d011      	beq.n	800513a <UART_SetConfig+0x292>
 8005116:	2280      	movs	r2, #128	; 0x80
 8005118:	0112      	lsls	r2, r2, #4
 800511a:	4293      	cmp	r3, r2
 800511c:	d822      	bhi.n	8005164 <UART_SetConfig+0x2bc>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d004      	beq.n	800512c <UART_SetConfig+0x284>
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	00d2      	lsls	r2, r2, #3
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <UART_SetConfig+0x2a0>
 800512a:	e01b      	b.n	8005164 <UART_SetConfig+0x2bc>
 800512c:	231b      	movs	r3, #27
 800512e:	2220      	movs	r2, #32
 8005130:	189b      	adds	r3, r3, r2
 8005132:	19db      	adds	r3, r3, r7
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e07e      	b.n	8005238 <UART_SetConfig+0x390>
 800513a:	231b      	movs	r3, #27
 800513c:	2220      	movs	r2, #32
 800513e:	189b      	adds	r3, r3, r2
 8005140:	19db      	adds	r3, r3, r7
 8005142:	2202      	movs	r2, #2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e077      	b.n	8005238 <UART_SetConfig+0x390>
 8005148:	231b      	movs	r3, #27
 800514a:	2220      	movs	r2, #32
 800514c:	189b      	adds	r3, r3, r2
 800514e:	19db      	adds	r3, r3, r7
 8005150:	2204      	movs	r2, #4
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e070      	b.n	8005238 <UART_SetConfig+0x390>
 8005156:	231b      	movs	r3, #27
 8005158:	2220      	movs	r2, #32
 800515a:	189b      	adds	r3, r3, r2
 800515c:	19db      	adds	r3, r3, r7
 800515e:	2208      	movs	r2, #8
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	e069      	b.n	8005238 <UART_SetConfig+0x390>
 8005164:	231b      	movs	r3, #27
 8005166:	2220      	movs	r2, #32
 8005168:	189b      	adds	r3, r3, r2
 800516a:	19db      	adds	r3, r3, r7
 800516c:	2210      	movs	r2, #16
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e062      	b.n	8005238 <UART_SetConfig+0x390>
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <UART_SetConfig+0x344>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d157      	bne.n	800522c <UART_SetConfig+0x384>
 800517c:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <UART_SetConfig+0x350>)
 800517e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005180:	23c0      	movs	r3, #192	; 0xc0
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4013      	ands	r3, r2
 8005186:	22c0      	movs	r2, #192	; 0xc0
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	4293      	cmp	r3, r2
 800518c:	d040      	beq.n	8005210 <UART_SetConfig+0x368>
 800518e:	22c0      	movs	r2, #192	; 0xc0
 8005190:	0092      	lsls	r2, r2, #2
 8005192:	4293      	cmp	r3, r2
 8005194:	d843      	bhi.n	800521e <UART_SetConfig+0x376>
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	0092      	lsls	r2, r2, #2
 800519a:	4293      	cmp	r3, r2
 800519c:	d011      	beq.n	80051c2 <UART_SetConfig+0x31a>
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d83b      	bhi.n	800521e <UART_SetConfig+0x376>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <UART_SetConfig+0x30c>
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00e      	beq.n	80051d0 <UART_SetConfig+0x328>
 80051b2:	e034      	b.n	800521e <UART_SetConfig+0x376>
 80051b4:	231b      	movs	r3, #27
 80051b6:	2220      	movs	r2, #32
 80051b8:	189b      	adds	r3, r3, r2
 80051ba:	19db      	adds	r3, r3, r7
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e03a      	b.n	8005238 <UART_SetConfig+0x390>
 80051c2:	231b      	movs	r3, #27
 80051c4:	2220      	movs	r2, #32
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	19db      	adds	r3, r3, r7
 80051ca:	2202      	movs	r2, #2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e033      	b.n	8005238 <UART_SetConfig+0x390>
 80051d0:	231b      	movs	r3, #27
 80051d2:	2220      	movs	r2, #32
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	19db      	adds	r3, r3, r7
 80051d8:	2204      	movs	r2, #4
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e02c      	b.n	8005238 <UART_SetConfig+0x390>
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	cfff69f3 	.word	0xcfff69f3
 80051e4:	ffffcfff 	.word	0xffffcfff
 80051e8:	40008000 	.word	0x40008000
 80051ec:	40008400 	.word	0x40008400
 80051f0:	11fff4ff 	.word	0x11fff4ff
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40004400 	.word	0x40004400
 8005200:	40004800 	.word	0x40004800
 8005204:	40004c00 	.word	0x40004c00
 8005208:	40005000 	.word	0x40005000
 800520c:	40013c00 	.word	0x40013c00
 8005210:	231b      	movs	r3, #27
 8005212:	2220      	movs	r2, #32
 8005214:	189b      	adds	r3, r3, r2
 8005216:	19db      	adds	r3, r3, r7
 8005218:	2208      	movs	r2, #8
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e00c      	b.n	8005238 <UART_SetConfig+0x390>
 800521e:	231b      	movs	r3, #27
 8005220:	2220      	movs	r2, #32
 8005222:	189b      	adds	r3, r3, r2
 8005224:	19db      	adds	r3, r3, r7
 8005226:	2210      	movs	r2, #16
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e005      	b.n	8005238 <UART_SetConfig+0x390>
 800522c:	231b      	movs	r3, #27
 800522e:	2220      	movs	r2, #32
 8005230:	189b      	adds	r3, r3, r2
 8005232:	19db      	adds	r3, r3, r7
 8005234:	2210      	movs	r2, #16
 8005236:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4ac1      	ldr	r2, [pc, #772]	; (8005544 <UART_SetConfig+0x69c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d005      	beq.n	800524e <UART_SetConfig+0x3a6>
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4ac0      	ldr	r2, [pc, #768]	; (8005548 <UART_SetConfig+0x6a0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d000      	beq.n	800524e <UART_SetConfig+0x3a6>
 800524c:	e093      	b.n	8005376 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800524e:	231b      	movs	r3, #27
 8005250:	2220      	movs	r2, #32
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d015      	beq.n	8005288 <UART_SetConfig+0x3e0>
 800525c:	dc18      	bgt.n	8005290 <UART_SetConfig+0x3e8>
 800525e:	2b04      	cmp	r3, #4
 8005260:	d00d      	beq.n	800527e <UART_SetConfig+0x3d6>
 8005262:	dc15      	bgt.n	8005290 <UART_SetConfig+0x3e8>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <UART_SetConfig+0x3c6>
 8005268:	2b02      	cmp	r3, #2
 800526a:	d005      	beq.n	8005278 <UART_SetConfig+0x3d0>
 800526c:	e010      	b.n	8005290 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526e:	f7fd fe13 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8005272:	0003      	movs	r3, r0
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005276:	e014      	b.n	80052a2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005278:	4bb4      	ldr	r3, [pc, #720]	; (800554c <UART_SetConfig+0x6a4>)
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800527c:	e011      	b.n	80052a2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800527e:	f7fd fd7f 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8005282:	0003      	movs	r3, r0
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005286:	e00c      	b.n	80052a2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800528e:	e008      	b.n	80052a2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005294:	231a      	movs	r3, #26
 8005296:	2220      	movs	r2, #32
 8005298:	189b      	adds	r3, r3, r2
 800529a:	19db      	adds	r3, r3, r7
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
        break;
 80052a0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d100      	bne.n	80052aa <UART_SetConfig+0x402>
 80052a8:	e135      	b.n	8005516 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ae:	4ba8      	ldr	r3, [pc, #672]	; (8005550 <UART_SetConfig+0x6a8>)
 80052b0:	0052      	lsls	r2, r2, #1
 80052b2:	5ad3      	ldrh	r3, [r2, r3]
 80052b4:	0019      	movs	r1, r3
 80052b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052b8:	f7fa ff24 	bl	8000104 <__udivsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	0013      	movs	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d305      	bcc.n	80052dc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d8:	429a      	cmp	r2, r3
 80052da:	d906      	bls.n	80052ea <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80052dc:	231a      	movs	r3, #26
 80052de:	2220      	movs	r2, #32
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e044      	b.n	8005374 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f6:	4b96      	ldr	r3, [pc, #600]	; (8005550 <UART_SetConfig+0x6a8>)
 80052f8:	0052      	lsls	r2, r2, #1
 80052fa:	5ad3      	ldrh	r3, [r2, r3]
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	69b8      	ldr	r0, [r7, #24]
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	f7fb f871 	bl	80003f0 <__aeabi_uldivmod>
 800530e:	0002      	movs	r2, r0
 8005310:	000b      	movs	r3, r1
 8005312:	0e11      	lsrs	r1, r2, #24
 8005314:	021d      	lsls	r5, r3, #8
 8005316:	430d      	orrs	r5, r1
 8005318:	0214      	lsls	r4, r2, #8
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68b8      	ldr	r0, [r7, #8]
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	1900      	adds	r0, r0, r4
 800532c:	4169      	adcs	r1, r5
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f7fb f858 	bl	80003f0 <__aeabi_uldivmod>
 8005340:	0002      	movs	r2, r0
 8005342:	000b      	movs	r3, r1
 8005344:	0013      	movs	r3, r2
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	23c0      	movs	r3, #192	; 0xc0
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	429a      	cmp	r2, r3
 8005350:	d309      	bcc.n	8005366 <UART_SetConfig+0x4be>
 8005352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	035b      	lsls	r3, r3, #13
 8005358:	429a      	cmp	r2, r3
 800535a:	d204      	bcs.n	8005366 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	e006      	b.n	8005374 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005366:	231a      	movs	r3, #26
 8005368:	2220      	movs	r2, #32
 800536a:	189b      	adds	r3, r3, r2
 800536c:	19db      	adds	r3, r3, r7
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005372:	e0d0      	b.n	8005516 <UART_SetConfig+0x66e>
 8005374:	e0cf      	b.n	8005516 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	429a      	cmp	r2, r3
 8005380:	d000      	beq.n	8005384 <UART_SetConfig+0x4dc>
 8005382:	e070      	b.n	8005466 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005384:	231b      	movs	r3, #27
 8005386:	2220      	movs	r2, #32
 8005388:	189b      	adds	r3, r3, r2
 800538a:	19db      	adds	r3, r3, r7
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d015      	beq.n	80053be <UART_SetConfig+0x516>
 8005392:	dc18      	bgt.n	80053c6 <UART_SetConfig+0x51e>
 8005394:	2b04      	cmp	r3, #4
 8005396:	d00d      	beq.n	80053b4 <UART_SetConfig+0x50c>
 8005398:	dc15      	bgt.n	80053c6 <UART_SetConfig+0x51e>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <UART_SetConfig+0x4fc>
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d005      	beq.n	80053ae <UART_SetConfig+0x506>
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fd fd78 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 80053a8:	0003      	movs	r3, r0
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ac:	e014      	b.n	80053d8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ae:	4b67      	ldr	r3, [pc, #412]	; (800554c <UART_SetConfig+0x6a4>)
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053b2:	e011      	b.n	80053d8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b4:	f7fd fce4 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80053b8:	0003      	movs	r3, r0
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053bc:	e00c      	b.n	80053d8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053c4:	e008      	b.n	80053d8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80053ca:	231a      	movs	r3, #26
 80053cc:	2220      	movs	r2, #32
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	19db      	adds	r3, r3, r7
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
        break;
 80053d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d100      	bne.n	80053e0 <UART_SetConfig+0x538>
 80053de:	e09a      	b.n	8005516 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e4:	4b5a      	ldr	r3, [pc, #360]	; (8005550 <UART_SetConfig+0x6a8>)
 80053e6:	0052      	lsls	r2, r2, #1
 80053e8:	5ad3      	ldrh	r3, [r2, r3]
 80053ea:	0019      	movs	r1, r3
 80053ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053ee:	f7fa fe89 	bl	8000104 <__udivsi3>
 80053f2:	0003      	movs	r3, r0
 80053f4:	005a      	lsls	r2, r3, #1
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	18d2      	adds	r2, r2, r3
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	0019      	movs	r1, r3
 8005404:	0010      	movs	r0, r2
 8005406:	f7fa fe7d 	bl	8000104 <__udivsi3>
 800540a:	0003      	movs	r3, r0
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2b0f      	cmp	r3, #15
 8005412:	d921      	bls.n	8005458 <UART_SetConfig+0x5b0>
 8005414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	429a      	cmp	r2, r3
 800541c:	d21c      	bcs.n	8005458 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	b29a      	uxth	r2, r3
 8005422:	200e      	movs	r0, #14
 8005424:	2420      	movs	r4, #32
 8005426:	1903      	adds	r3, r0, r4
 8005428:	19db      	adds	r3, r3, r7
 800542a:	210f      	movs	r1, #15
 800542c:	438a      	bics	r2, r1
 800542e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	b29b      	uxth	r3, r3
 8005436:	2207      	movs	r2, #7
 8005438:	4013      	ands	r3, r2
 800543a:	b299      	uxth	r1, r3
 800543c:	1903      	adds	r3, r0, r4
 800543e:	19db      	adds	r3, r3, r7
 8005440:	1902      	adds	r2, r0, r4
 8005442:	19d2      	adds	r2, r2, r7
 8005444:	8812      	ldrh	r2, [r2, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	1902      	adds	r2, r0, r4
 8005450:	19d2      	adds	r2, r2, r7
 8005452:	8812      	ldrh	r2, [r2, #0]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	e05e      	b.n	8005516 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005458:	231a      	movs	r3, #26
 800545a:	2220      	movs	r2, #32
 800545c:	189b      	adds	r3, r3, r2
 800545e:	19db      	adds	r3, r3, r7
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e057      	b.n	8005516 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005466:	231b      	movs	r3, #27
 8005468:	2220      	movs	r2, #32
 800546a:	189b      	adds	r3, r3, r2
 800546c:	19db      	adds	r3, r3, r7
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d015      	beq.n	80054a0 <UART_SetConfig+0x5f8>
 8005474:	dc18      	bgt.n	80054a8 <UART_SetConfig+0x600>
 8005476:	2b04      	cmp	r3, #4
 8005478:	d00d      	beq.n	8005496 <UART_SetConfig+0x5ee>
 800547a:	dc15      	bgt.n	80054a8 <UART_SetConfig+0x600>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <UART_SetConfig+0x5de>
 8005480:	2b02      	cmp	r3, #2
 8005482:	d005      	beq.n	8005490 <UART_SetConfig+0x5e8>
 8005484:	e010      	b.n	80054a8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005486:	f7fd fd07 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800548a:	0003      	movs	r3, r0
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800548e:	e014      	b.n	80054ba <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b2e      	ldr	r3, [pc, #184]	; (800554c <UART_SetConfig+0x6a4>)
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005494:	e011      	b.n	80054ba <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fd fc73 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800549a:	0003      	movs	r3, r0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800549e:	e00c      	b.n	80054ba <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a6:	e008      	b.n	80054ba <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054ac:	231a      	movs	r3, #26
 80054ae:	2220      	movs	r2, #32
 80054b0:	189b      	adds	r3, r3, r2
 80054b2:	19db      	adds	r3, r3, r7
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
        break;
 80054b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02a      	beq.n	8005516 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <UART_SetConfig+0x6a8>)
 80054c6:	0052      	lsls	r2, r2, #1
 80054c8:	5ad3      	ldrh	r3, [r2, r3]
 80054ca:	0019      	movs	r1, r3
 80054cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054ce:	f7fa fe19 	bl	8000104 <__udivsi3>
 80054d2:	0003      	movs	r3, r0
 80054d4:	001a      	movs	r2, r3
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	18d2      	adds	r2, r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	0019      	movs	r1, r3
 80054e4:	0010      	movs	r0, r2
 80054e6:	f7fa fe0d 	bl	8000104 <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d90a      	bls.n	800550a <UART_SetConfig+0x662>
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	025b      	lsls	r3, r3, #9
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d205      	bcs.n	800550a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	b29a      	uxth	r2, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60da      	str	r2, [r3, #12]
 8005508:	e005      	b.n	8005516 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800550a:	231a      	movs	r3, #26
 800550c:	2220      	movs	r2, #32
 800550e:	189b      	adds	r3, r3, r2
 8005510:	19db      	adds	r3, r3, r7
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	226a      	movs	r2, #106	; 0x6a
 800551a:	2101      	movs	r1, #1
 800551c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2268      	movs	r2, #104	; 0x68
 8005522:	2101      	movs	r1, #1
 8005524:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	2200      	movs	r2, #0
 800552a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	2200      	movs	r2, #0
 8005530:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005532:	231a      	movs	r3, #26
 8005534:	2220      	movs	r2, #32
 8005536:	189b      	adds	r3, r3, r2
 8005538:	19db      	adds	r3, r3, r7
 800553a:	781b      	ldrb	r3, [r3, #0]
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	b010      	add	sp, #64	; 0x40
 8005542:	bdb0      	pop	{r4, r5, r7, pc}
 8005544:	40008000 	.word	0x40008000
 8005548:	40008400 	.word	0x40008400
 800554c:	00f42400 	.word	0x00f42400
 8005550:	08006298 	.word	0x08006298

08005554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	2208      	movs	r2, #8
 8005562:	4013      	ands	r3, r2
 8005564:	d00b      	beq.n	800557e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a4a      	ldr	r2, [pc, #296]	; (8005698 <UART_AdvFeatureConfig+0x144>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2201      	movs	r2, #1
 8005584:	4013      	ands	r3, r2
 8005586:	d00b      	beq.n	80055a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4a43      	ldr	r2, [pc, #268]	; (800569c <UART_AdvFeatureConfig+0x148>)
 8005590:	4013      	ands	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a3b      	ldr	r2, [pc, #236]	; (80056a0 <UART_AdvFeatureConfig+0x14c>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	2204      	movs	r2, #4
 80055c8:	4013      	ands	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4a34      	ldr	r2, [pc, #208]	; (80056a4 <UART_AdvFeatureConfig+0x150>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	0019      	movs	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	2210      	movs	r2, #16
 80055ea:	4013      	ands	r3, r2
 80055ec:	d00b      	beq.n	8005606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a2c      	ldr	r2, [pc, #176]	; (80056a8 <UART_AdvFeatureConfig+0x154>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	2220      	movs	r2, #32
 800560c:	4013      	ands	r3, r2
 800560e:	d00b      	beq.n	8005628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a25      	ldr	r2, [pc, #148]	; (80056ac <UART_AdvFeatureConfig+0x158>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	2240      	movs	r2, #64	; 0x40
 800562e:	4013      	ands	r3, r2
 8005630:	d01d      	beq.n	800566e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <UART_AdvFeatureConfig+0x15c>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	035b      	lsls	r3, r3, #13
 8005652:	429a      	cmp	r2, r3
 8005654:	d10b      	bne.n	800566e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <UART_AdvFeatureConfig+0x160>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	4013      	ands	r3, r2
 8005676:	d00b      	beq.n	8005690 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <UART_AdvFeatureConfig+0x164>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }
}
 8005690:	46c0      	nop			; (mov r8, r8)
 8005692:	46bd      	mov	sp, r7
 8005694:	b002      	add	sp, #8
 8005696:	bd80      	pop	{r7, pc}
 8005698:	ffff7fff 	.word	0xffff7fff
 800569c:	fffdffff 	.word	0xfffdffff
 80056a0:	fffeffff 	.word	0xfffeffff
 80056a4:	fffbffff 	.word	0xfffbffff
 80056a8:	ffffefff 	.word	0xffffefff
 80056ac:	ffffdfff 	.word	0xffffdfff
 80056b0:	ffefffff 	.word	0xffefffff
 80056b4:	ff9fffff 	.word	0xff9fffff
 80056b8:	fff7ffff 	.word	0xfff7ffff

080056bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b092      	sub	sp, #72	; 0x48
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2290      	movs	r2, #144	; 0x90
 80056c8:	2100      	movs	r1, #0
 80056ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056cc:	f7fc fb0e 	bl	8001cec <HAL_GetTick>
 80056d0:	0003      	movs	r3, r0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2208      	movs	r2, #8
 80056dc:	4013      	ands	r3, r2
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d12d      	bne.n	800573e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	0391      	lsls	r1, r2, #14
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4a47      	ldr	r2, [pc, #284]	; (8005808 <UART_CheckIdleState+0x14c>)
 80056ec:	9200      	str	r2, [sp, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f000 f88e 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d022      	beq.n	800573e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f8:	f3ef 8310 	mrs	r3, PRIMASK
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
 8005702:	2301      	movs	r3, #1
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	f383 8810 	msr	PRIMASK, r3
}
 800570c:	46c0      	nop			; (mov r8, r8)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	438a      	bics	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	f383 8810 	msr	PRIMASK, r3
}
 8005728:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2288      	movs	r2, #136	; 0x88
 800572e:	2120      	movs	r1, #32
 8005730:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2284      	movs	r2, #132	; 0x84
 8005736:	2100      	movs	r1, #0
 8005738:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e060      	b.n	8005800 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2204      	movs	r2, #4
 8005746:	4013      	ands	r3, r2
 8005748:	2b04      	cmp	r3, #4
 800574a:	d146      	bne.n	80057da <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	03d1      	lsls	r1, r2, #15
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4a2c      	ldr	r2, [pc, #176]	; (8005808 <UART_CheckIdleState+0x14c>)
 8005756:	9200      	str	r2, [sp, #0]
 8005758:	2200      	movs	r2, #0
 800575a:	f000 f859 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d03b      	beq.n	80057da <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005762:	f3ef 8310 	mrs	r3, PRIMASK
 8005766:	60fb      	str	r3, [r7, #12]
  return(result);
 8005768:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
 800576c:	2301      	movs	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4922      	ldr	r1, [pc, #136]	; (800580c <UART_CheckIdleState+0x150>)
 8005784:	400a      	ands	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005794:	f3ef 8310 	mrs	r3, PRIMASK
 8005798:	61bb      	str	r3, [r7, #24]
  return(result);
 800579a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2101      	movs	r1, #1
 80057b6:	438a      	bics	r2, r1
 80057b8:	609a      	str	r2, [r3, #8]
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	228c      	movs	r2, #140	; 0x8c
 80057ca:	2120      	movs	r1, #32
 80057cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2284      	movs	r2, #132	; 0x84
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e012      	b.n	8005800 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2288      	movs	r2, #136	; 0x88
 80057de:	2120      	movs	r1, #32
 80057e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	228c      	movs	r2, #140	; 0x8c
 80057e6:	2120      	movs	r1, #32
 80057e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2284      	movs	r2, #132	; 0x84
 80057fa:	2100      	movs	r1, #0
 80057fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b010      	add	sp, #64	; 0x40
 8005806:	bd80      	pop	{r7, pc}
 8005808:	01ffffff 	.word	0x01ffffff
 800580c:	fffffedf 	.word	0xfffffedf

08005810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	1dfb      	adds	r3, r7, #7
 800581e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005820:	e051      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3301      	adds	r3, #1
 8005826:	d04e      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005828:	f7fc fa60 	bl	8001cec <HAL_GetTick>
 800582c:	0002      	movs	r2, r0
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	429a      	cmp	r2, r3
 8005836:	d302      	bcc.n	800583e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e051      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2204      	movs	r2, #4
 800584a:	4013      	ands	r3, r2
 800584c:	d03b      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d038      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d035      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2208      	movs	r2, #8
 8005862:	4013      	ands	r3, r2
 8005864:	2b08      	cmp	r3, #8
 8005866:	d111      	bne.n	800588c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2208      	movs	r2, #8
 800586e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 f83c 	bl	80058f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2290      	movs	r2, #144	; 0x90
 800587c:	2108      	movs	r1, #8
 800587e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2284      	movs	r2, #132	; 0x84
 8005884:	2100      	movs	r1, #0
 8005886:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e02c      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	401a      	ands	r2, r3
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	429a      	cmp	r2, r3
 800589e:	d112      	bne.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	0112      	lsls	r2, r2, #4
 80058a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f81f 	bl	80058f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2290      	movs	r2, #144	; 0x90
 80058b6:	2120      	movs	r1, #32
 80058b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2284      	movs	r2, #132	; 0x84
 80058be:	2100      	movs	r1, #0
 80058c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e00f      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	425a      	negs	r2, r3
 80058d6:	4153      	adcs	r3, r2
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	001a      	movs	r2, r3
 80058dc:	1dfb      	adds	r3, r7, #7
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d09e      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b004      	add	sp, #16
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f8:	f3ef 8310 	mrs	r3, PRIMASK
 80058fc:	617b      	str	r3, [r7, #20]
  return(result);
 80058fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
 8005902:	2301      	movs	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f383 8810 	msr	PRIMASK, r3
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4926      	ldr	r1, [pc, #152]	; (80059b4 <UART_EndRxTransfer+0xc4>)
 800591a:	400a      	ands	r2, r1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f383 8810 	msr	PRIMASK, r3
}
 8005928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592a:	f3ef 8310 	mrs	r3, PRIMASK
 800592e:	623b      	str	r3, [r7, #32]
  return(result);
 8005930:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005932:	633b      	str	r3, [r7, #48]	; 0x30
 8005934:	2301      	movs	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	f383 8810 	msr	PRIMASK, r3
}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	491b      	ldr	r1, [pc, #108]	; (80059b8 <UART_EndRxTransfer+0xc8>)
 800594c:	400a      	ands	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	f383 8810 	msr	PRIMASK, r3
}
 800595a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d118      	bne.n	8005996 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005964:	f3ef 8310 	mrs	r3, PRIMASK
 8005968:	60bb      	str	r3, [r7, #8]
  return(result);
 800596a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596e:	2301      	movs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2110      	movs	r1, #16
 8005986:	438a      	bics	r2, r1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f383 8810 	msr	PRIMASK, r3
}
 8005994:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	228c      	movs	r2, #140	; 0x8c
 800599a:	2120      	movs	r1, #32
 800599c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b00e      	add	sp, #56	; 0x38
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	fffffedf 	.word	0xfffffedf
 80059b8:	effffffe 	.word	0xeffffffe

080059bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	225e      	movs	r2, #94	; 0x5e
 80059ce:	2100      	movs	r1, #0
 80059d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2256      	movs	r2, #86	; 0x56
 80059d6:	2100      	movs	r1, #0
 80059d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7ff fa4f 	bl	8004e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b004      	add	sp, #16
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f2:	f3ef 8310 	mrs	r3, PRIMASK
 80059f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80059f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	2301      	movs	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f383 8810 	msr	PRIMASK, r3
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	438a      	bics	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2288      	movs	r2, #136	; 0x88
 8005a28:	2120      	movs	r1, #32
 8005a2a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7ff fa1b 	bl	8004e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b006      	add	sp, #24
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b002      	add	sp, #8
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b002      	add	sp, #8
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2284      	movs	r2, #132	; 0x84
 8005a80:	5c9b      	ldrb	r3, [r3, r2]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e027      	b.n	8005ada <HAL_UARTEx_DisableFifoMode+0x66>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2284      	movs	r2, #132	; 0x84
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2288      	movs	r2, #136	; 0x88
 8005a96:	2124      	movs	r1, #36	; 0x24
 8005a98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2101      	movs	r1, #1
 8005aae:	438a      	bics	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2288      	movs	r2, #136	; 0x88
 8005acc:	2120      	movs	r1, #32
 8005ace:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2284      	movs	r2, #132	; 0x84
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	dfffffff 	.word	0xdfffffff

08005ae8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2284      	movs	r2, #132	; 0x84
 8005af6:	5c9b      	ldrb	r3, [r3, r2]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e02e      	b.n	8005b5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2284      	movs	r2, #132	; 0x84
 8005b04:	2101      	movs	r1, #1
 8005b06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2288      	movs	r2, #136	; 0x88
 8005b0c:	2124      	movs	r1, #36	; 0x24
 8005b0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2101      	movs	r1, #1
 8005b24:	438a      	bics	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	08d9      	lsrs	r1, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 f854 	bl	8005bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2288      	movs	r2, #136	; 0x88
 8005b50:	2120      	movs	r1, #32
 8005b52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2284      	movs	r2, #132	; 0x84
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b004      	add	sp, #16
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2284      	movs	r2, #132	; 0x84
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e02f      	b.n	8005be0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2284      	movs	r2, #132	; 0x84
 8005b84:	2101      	movs	r1, #1
 8005b86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2288      	movs	r2, #136	; 0x88
 8005b8c:	2124      	movs	r1, #36	; 0x24
 8005b8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4a0e      	ldr	r2, [pc, #56]	; (8005be8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 f813 	bl	8005bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2288      	movs	r2, #136	; 0x88
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2284      	movs	r2, #132	; 0x84
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	f1ffffff 	.word	0xf1ffffff

08005bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	226a      	movs	r2, #106	; 0x6a
 8005c00:	2101      	movs	r1, #1
 8005c02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2268      	movs	r2, #104	; 0x68
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c0c:	e043      	b.n	8005c96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c0e:	260f      	movs	r6, #15
 8005c10:	19bb      	adds	r3, r7, r6
 8005c12:	2208      	movs	r2, #8
 8005c14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c16:	200e      	movs	r0, #14
 8005c18:	183b      	adds	r3, r7, r0
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	0e5b      	lsrs	r3, r3, #25
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	240d      	movs	r4, #13
 8005c2a:	193b      	adds	r3, r7, r4
 8005c2c:	2107      	movs	r1, #7
 8005c2e:	400a      	ands	r2, r1
 8005c30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	0f5b      	lsrs	r3, r3, #29
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	250c      	movs	r5, #12
 8005c3e:	197b      	adds	r3, r7, r5
 8005c40:	2107      	movs	r1, #7
 8005c42:	400a      	ands	r2, r1
 8005c44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c46:	183b      	adds	r3, r7, r0
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	197a      	adds	r2, r7, r5
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	4914      	ldr	r1, [pc, #80]	; (8005ca0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c50:	5c8a      	ldrb	r2, [r1, r2]
 8005c52:	435a      	muls	r2, r3
 8005c54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c56:	197b      	adds	r3, r7, r5
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c5e:	0019      	movs	r1, r3
 8005c60:	f7fa fada 	bl	8000218 <__divsi3>
 8005c64:	0003      	movs	r3, r0
 8005c66:	b299      	uxth	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	226a      	movs	r2, #106	; 0x6a
 8005c6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c6e:	19bb      	adds	r3, r7, r6
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	193a      	adds	r2, r7, r4
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	490a      	ldr	r1, [pc, #40]	; (8005ca0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c78:	5c8a      	ldrb	r2, [r1, r2]
 8005c7a:	435a      	muls	r2, r3
 8005c7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c7e:	193b      	adds	r3, r7, r4
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c86:	0019      	movs	r1, r3
 8005c88:	f7fa fac6 	bl	8000218 <__divsi3>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2268      	movs	r2, #104	; 0x68
 8005c94:	5299      	strh	r1, [r3, r2]
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b005      	add	sp, #20
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	080062b0 	.word	0x080062b0
 8005ca4:	080062b8 	.word	0x080062b8

08005ca8 <atoi>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	220a      	movs	r2, #10
 8005cac:	2100      	movs	r1, #0
 8005cae:	f000 f94f 	bl	8005f50 <strtol>
 8005cb2:	bd10      	pop	{r4, pc}

08005cb4 <malloc>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <malloc+0x10>)
 8005cb8:	0001      	movs	r1, r0
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	f000 f830 	bl	8005d20 <_malloc_r>
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	20000058 	.word	0x20000058

08005cc8 <free>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <free+0x10>)
 8005ccc:	0001      	movs	r1, r0
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	f000 f99a 	bl	8006008 <_free_r>
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	20000058 	.word	0x20000058

08005cdc <sbrk_aligned>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	4e0f      	ldr	r6, [pc, #60]	; (8005d1c <sbrk_aligned+0x40>)
 8005ce0:	000d      	movs	r5, r1
 8005ce2:	6831      	ldr	r1, [r6, #0]
 8005ce4:	0004      	movs	r4, r0
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	d102      	bne.n	8005cf0 <sbrk_aligned+0x14>
 8005cea:	f000 f945 	bl	8005f78 <_sbrk_r>
 8005cee:	6030      	str	r0, [r6, #0]
 8005cf0:	0029      	movs	r1, r5
 8005cf2:	0020      	movs	r0, r4
 8005cf4:	f000 f940 	bl	8005f78 <_sbrk_r>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d00a      	beq.n	8005d12 <sbrk_aligned+0x36>
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	1cc5      	adds	r5, r0, #3
 8005d00:	439d      	bics	r5, r3
 8005d02:	42a8      	cmp	r0, r5
 8005d04:	d007      	beq.n	8005d16 <sbrk_aligned+0x3a>
 8005d06:	1a29      	subs	r1, r5, r0
 8005d08:	0020      	movs	r0, r4
 8005d0a:	f000 f935 	bl	8005f78 <_sbrk_r>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d101      	bne.n	8005d16 <sbrk_aligned+0x3a>
 8005d12:	2501      	movs	r5, #1
 8005d14:	426d      	negs	r5, r5
 8005d16:	0028      	movs	r0, r5
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	2000017c 	.word	0x2000017c

08005d20 <_malloc_r>:
 8005d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d22:	2203      	movs	r2, #3
 8005d24:	1ccb      	adds	r3, r1, #3
 8005d26:	4393      	bics	r3, r2
 8005d28:	3308      	adds	r3, #8
 8005d2a:	0006      	movs	r6, r0
 8005d2c:	001f      	movs	r7, r3
 8005d2e:	2b0c      	cmp	r3, #12
 8005d30:	d238      	bcs.n	8005da4 <_malloc_r+0x84>
 8005d32:	270c      	movs	r7, #12
 8005d34:	42b9      	cmp	r1, r7
 8005d36:	d837      	bhi.n	8005da8 <_malloc_r+0x88>
 8005d38:	0030      	movs	r0, r6
 8005d3a:	f000 f873 	bl	8005e24 <__malloc_lock>
 8005d3e:	4b38      	ldr	r3, [pc, #224]	; (8005e20 <_malloc_r+0x100>)
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	001c      	movs	r4, r3
 8005d46:	2c00      	cmp	r4, #0
 8005d48:	d133      	bne.n	8005db2 <_malloc_r+0x92>
 8005d4a:	0039      	movs	r1, r7
 8005d4c:	0030      	movs	r0, r6
 8005d4e:	f7ff ffc5 	bl	8005cdc <sbrk_aligned>
 8005d52:	0004      	movs	r4, r0
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d15e      	bne.n	8005e16 <_malloc_r+0xf6>
 8005d58:	9b00      	ldr	r3, [sp, #0]
 8005d5a:	681c      	ldr	r4, [r3, #0]
 8005d5c:	0025      	movs	r5, r4
 8005d5e:	2d00      	cmp	r5, #0
 8005d60:	d14e      	bne.n	8005e00 <_malloc_r+0xe0>
 8005d62:	2c00      	cmp	r4, #0
 8005d64:	d051      	beq.n	8005e0a <_malloc_r+0xea>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	0029      	movs	r1, r5
 8005d6a:	18e3      	adds	r3, r4, r3
 8005d6c:	0030      	movs	r0, r6
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	f000 f902 	bl	8005f78 <_sbrk_r>
 8005d74:	9b01      	ldr	r3, [sp, #4]
 8005d76:	4283      	cmp	r3, r0
 8005d78:	d147      	bne.n	8005e0a <_malloc_r+0xea>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	0030      	movs	r0, r6
 8005d7e:	1aff      	subs	r7, r7, r3
 8005d80:	0039      	movs	r1, r7
 8005d82:	f7ff ffab 	bl	8005cdc <sbrk_aligned>
 8005d86:	3001      	adds	r0, #1
 8005d88:	d03f      	beq.n	8005e0a <_malloc_r+0xea>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	19db      	adds	r3, r3, r7
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	9b00      	ldr	r3, [sp, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d040      	beq.n	8005e1a <_malloc_r+0xfa>
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	42a2      	cmp	r2, r4
 8005d9c:	d133      	bne.n	8005e06 <_malloc_r+0xe6>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e014      	b.n	8005dce <_malloc_r+0xae>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dac5      	bge.n	8005d34 <_malloc_r+0x14>
 8005da8:	230c      	movs	r3, #12
 8005daa:	2500      	movs	r5, #0
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	0028      	movs	r0, r5
 8005db0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005db2:	6821      	ldr	r1, [r4, #0]
 8005db4:	1bc9      	subs	r1, r1, r7
 8005db6:	d420      	bmi.n	8005dfa <_malloc_r+0xda>
 8005db8:	290b      	cmp	r1, #11
 8005dba:	d918      	bls.n	8005dee <_malloc_r+0xce>
 8005dbc:	19e2      	adds	r2, r4, r7
 8005dbe:	6027      	str	r7, [r4, #0]
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d112      	bne.n	8005dea <_malloc_r+0xca>
 8005dc4:	9b00      	ldr	r3, [sp, #0]
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	6011      	str	r1, [r2, #0]
 8005dcc:	6053      	str	r3, [r2, #4]
 8005dce:	0030      	movs	r0, r6
 8005dd0:	0025      	movs	r5, r4
 8005dd2:	f000 f82f 	bl	8005e34 <__malloc_unlock>
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	350b      	adds	r5, #11
 8005dda:	1d23      	adds	r3, r4, #4
 8005ddc:	4395      	bics	r5, r2
 8005dde:	1aea      	subs	r2, r5, r3
 8005de0:	429d      	cmp	r5, r3
 8005de2:	d0e4      	beq.n	8005dae <_malloc_r+0x8e>
 8005de4:	1b5b      	subs	r3, r3, r5
 8005de6:	50a3      	str	r3, [r4, r2]
 8005de8:	e7e1      	b.n	8005dae <_malloc_r+0x8e>
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	e7ec      	b.n	8005dc8 <_malloc_r+0xa8>
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d1d5      	bne.n	8005da0 <_malloc_r+0x80>
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	e7e9      	b.n	8005dce <_malloc_r+0xae>
 8005dfa:	0023      	movs	r3, r4
 8005dfc:	6864      	ldr	r4, [r4, #4]
 8005dfe:	e7a2      	b.n	8005d46 <_malloc_r+0x26>
 8005e00:	002c      	movs	r4, r5
 8005e02:	686d      	ldr	r5, [r5, #4]
 8005e04:	e7ab      	b.n	8005d5e <_malloc_r+0x3e>
 8005e06:	0013      	movs	r3, r2
 8005e08:	e7c4      	b.n	8005d94 <_malloc_r+0x74>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	0030      	movs	r0, r6
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	f000 f810 	bl	8005e34 <__malloc_unlock>
 8005e14:	e7cb      	b.n	8005dae <_malloc_r+0x8e>
 8005e16:	6027      	str	r7, [r4, #0]
 8005e18:	e7d9      	b.n	8005dce <_malloc_r+0xae>
 8005e1a:	605b      	str	r3, [r3, #4]
 8005e1c:	deff      	udf	#255	; 0xff
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	20000178 	.word	0x20000178

08005e24 <__malloc_lock>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	4802      	ldr	r0, [pc, #8]	; (8005e30 <__malloc_lock+0xc>)
 8005e28:	f000 f8e2 	bl	8005ff0 <__retarget_lock_acquire_recursive>
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	200002bc 	.word	0x200002bc

08005e34 <__malloc_unlock>:
 8005e34:	b510      	push	{r4, lr}
 8005e36:	4802      	ldr	r0, [pc, #8]	; (8005e40 <__malloc_unlock+0xc>)
 8005e38:	f000 f8db 	bl	8005ff2 <__retarget_lock_release_recursive>
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	200002bc 	.word	0x200002bc

08005e44 <_strtol_l.constprop.0>:
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e46:	b087      	sub	sp, #28
 8005e48:	001e      	movs	r6, r3
 8005e4a:	9005      	str	r0, [sp, #20]
 8005e4c:	9101      	str	r1, [sp, #4]
 8005e4e:	9202      	str	r2, [sp, #8]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d048      	beq.n	8005ee6 <_strtol_l.constprop.0+0xa2>
 8005e54:	000b      	movs	r3, r1
 8005e56:	2e24      	cmp	r6, #36	; 0x24
 8005e58:	d845      	bhi.n	8005ee6 <_strtol_l.constprop.0+0xa2>
 8005e5a:	4a3b      	ldr	r2, [pc, #236]	; (8005f48 <_strtol_l.constprop.0+0x104>)
 8005e5c:	2108      	movs	r1, #8
 8005e5e:	4694      	mov	ip, r2
 8005e60:	001a      	movs	r2, r3
 8005e62:	4660      	mov	r0, ip
 8005e64:	7814      	ldrb	r4, [r2, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	5d00      	ldrb	r0, [r0, r4]
 8005e6a:	001d      	movs	r5, r3
 8005e6c:	0007      	movs	r7, r0
 8005e6e:	400f      	ands	r7, r1
 8005e70:	4208      	tst	r0, r1
 8005e72:	d1f5      	bne.n	8005e60 <_strtol_l.constprop.0+0x1c>
 8005e74:	2c2d      	cmp	r4, #45	; 0x2d
 8005e76:	d13d      	bne.n	8005ef4 <_strtol_l.constprop.0+0xb0>
 8005e78:	2701      	movs	r7, #1
 8005e7a:	781c      	ldrb	r4, [r3, #0]
 8005e7c:	1c95      	adds	r5, r2, #2
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	d05e      	beq.n	8005f40 <_strtol_l.constprop.0+0xfc>
 8005e82:	2e10      	cmp	r6, #16
 8005e84:	d109      	bne.n	8005e9a <_strtol_l.constprop.0+0x56>
 8005e86:	2c30      	cmp	r4, #48	; 0x30
 8005e88:	d107      	bne.n	8005e9a <_strtol_l.constprop.0+0x56>
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	782b      	ldrb	r3, [r5, #0]
 8005e8e:	4393      	bics	r3, r2
 8005e90:	2b58      	cmp	r3, #88	; 0x58
 8005e92:	d150      	bne.n	8005f36 <_strtol_l.constprop.0+0xf2>
 8005e94:	2610      	movs	r6, #16
 8005e96:	786c      	ldrb	r4, [r5, #1]
 8005e98:	3502      	adds	r5, #2
 8005e9a:	4b2c      	ldr	r3, [pc, #176]	; (8005f4c <_strtol_l.constprop.0+0x108>)
 8005e9c:	0031      	movs	r1, r6
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	9303      	str	r3, [sp, #12]
 8005ea4:	f7fa f9b4 	bl	8000210 <__aeabi_uidivmod>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	9104      	str	r1, [sp, #16]
 8005eac:	2101      	movs	r1, #1
 8005eae:	4684      	mov	ip, r0
 8005eb0:	0010      	movs	r0, r2
 8005eb2:	4249      	negs	r1, r1
 8005eb4:	0023      	movs	r3, r4
 8005eb6:	3b30      	subs	r3, #48	; 0x30
 8005eb8:	2b09      	cmp	r3, #9
 8005eba:	d903      	bls.n	8005ec4 <_strtol_l.constprop.0+0x80>
 8005ebc:	3b11      	subs	r3, #17
 8005ebe:	2b19      	cmp	r3, #25
 8005ec0:	d81d      	bhi.n	8005efe <_strtol_l.constprop.0+0xba>
 8005ec2:	330a      	adds	r3, #10
 8005ec4:	429e      	cmp	r6, r3
 8005ec6:	dd1e      	ble.n	8005f06 <_strtol_l.constprop.0+0xc2>
 8005ec8:	1c54      	adds	r4, r2, #1
 8005eca:	d009      	beq.n	8005ee0 <_strtol_l.constprop.0+0x9c>
 8005ecc:	000a      	movs	r2, r1
 8005ece:	4584      	cmp	ip, r0
 8005ed0:	d306      	bcc.n	8005ee0 <_strtol_l.constprop.0+0x9c>
 8005ed2:	d102      	bne.n	8005eda <_strtol_l.constprop.0+0x96>
 8005ed4:	9c04      	ldr	r4, [sp, #16]
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	db02      	blt.n	8005ee0 <_strtol_l.constprop.0+0x9c>
 8005eda:	2201      	movs	r2, #1
 8005edc:	4370      	muls	r0, r6
 8005ede:	1818      	adds	r0, r3, r0
 8005ee0:	782c      	ldrb	r4, [r5, #0]
 8005ee2:	3501      	adds	r5, #1
 8005ee4:	e7e6      	b.n	8005eb4 <_strtol_l.constprop.0+0x70>
 8005ee6:	f000 f859 	bl	8005f9c <__errno>
 8005eea:	2316      	movs	r3, #22
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	2000      	movs	r0, #0
 8005ef0:	b007      	add	sp, #28
 8005ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef4:	2c2b      	cmp	r4, #43	; 0x2b
 8005ef6:	d1c2      	bne.n	8005e7e <_strtol_l.constprop.0+0x3a>
 8005ef8:	781c      	ldrb	r4, [r3, #0]
 8005efa:	1c95      	adds	r5, r2, #2
 8005efc:	e7bf      	b.n	8005e7e <_strtol_l.constprop.0+0x3a>
 8005efe:	0023      	movs	r3, r4
 8005f00:	3b61      	subs	r3, #97	; 0x61
 8005f02:	2b19      	cmp	r3, #25
 8005f04:	d9dd      	bls.n	8005ec2 <_strtol_l.constprop.0+0x7e>
 8005f06:	1c53      	adds	r3, r2, #1
 8005f08:	d109      	bne.n	8005f1e <_strtol_l.constprop.0+0xda>
 8005f0a:	2322      	movs	r3, #34	; 0x22
 8005f0c:	9a05      	ldr	r2, [sp, #20]
 8005f0e:	9803      	ldr	r0, [sp, #12]
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	9b02      	ldr	r3, [sp, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0eb      	beq.n	8005ef0 <_strtol_l.constprop.0+0xac>
 8005f18:	1e6b      	subs	r3, r5, #1
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	e007      	b.n	8005f2e <_strtol_l.constprop.0+0xea>
 8005f1e:	2f00      	cmp	r7, #0
 8005f20:	d000      	beq.n	8005f24 <_strtol_l.constprop.0+0xe0>
 8005f22:	4240      	negs	r0, r0
 8005f24:	9b02      	ldr	r3, [sp, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0e2      	beq.n	8005ef0 <_strtol_l.constprop.0+0xac>
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d1f4      	bne.n	8005f18 <_strtol_l.constprop.0+0xd4>
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	9a01      	ldr	r2, [sp, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e7dc      	b.n	8005ef0 <_strtol_l.constprop.0+0xac>
 8005f36:	2430      	movs	r4, #48	; 0x30
 8005f38:	2e00      	cmp	r6, #0
 8005f3a:	d1ae      	bne.n	8005e9a <_strtol_l.constprop.0+0x56>
 8005f3c:	3608      	adds	r6, #8
 8005f3e:	e7ac      	b.n	8005e9a <_strtol_l.constprop.0+0x56>
 8005f40:	2c30      	cmp	r4, #48	; 0x30
 8005f42:	d0a2      	beq.n	8005e8a <_strtol_l.constprop.0+0x46>
 8005f44:	260a      	movs	r6, #10
 8005f46:	e7a8      	b.n	8005e9a <_strtol_l.constprop.0+0x56>
 8005f48:	080062c1 	.word	0x080062c1
 8005f4c:	7fffffff 	.word	0x7fffffff

08005f50 <strtol>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4c04      	ldr	r4, [pc, #16]	; (8005f64 <strtol+0x14>)
 8005f54:	0013      	movs	r3, r2
 8005f56:	000a      	movs	r2, r1
 8005f58:	0001      	movs	r1, r0
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	f7ff ff72 	bl	8005e44 <_strtol_l.constprop.0>
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	20000058 	.word	0x20000058

08005f68 <memset>:
 8005f68:	0003      	movs	r3, r0
 8005f6a:	1882      	adds	r2, r0, r2
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <memset+0xa>
 8005f70:	4770      	bx	lr
 8005f72:	7019      	strb	r1, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	e7f9      	b.n	8005f6c <memset+0x4>

08005f78 <_sbrk_r>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	4d06      	ldr	r5, [pc, #24]	; (8005f98 <_sbrk_r+0x20>)
 8005f7e:	0004      	movs	r4, r0
 8005f80:	0008      	movs	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fb fbda 	bl	800173c <_sbrk>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d103      	bne.n	8005f94 <_sbrk_r+0x1c>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d000      	beq.n	8005f94 <_sbrk_r+0x1c>
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	200002b8 	.word	0x200002b8

08005f9c <__errno>:
 8005f9c:	4b01      	ldr	r3, [pc, #4]	; (8005fa4 <__errno+0x8>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	20000058 	.word	0x20000058

08005fa8 <__libc_init_array>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	2600      	movs	r6, #0
 8005fac:	4c0c      	ldr	r4, [pc, #48]	; (8005fe0 <__libc_init_array+0x38>)
 8005fae:	4d0d      	ldr	r5, [pc, #52]	; (8005fe4 <__libc_init_array+0x3c>)
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	42a6      	cmp	r6, r4
 8005fb6:	d109      	bne.n	8005fcc <__libc_init_array+0x24>
 8005fb8:	2600      	movs	r6, #0
 8005fba:	f000 f86f 	bl	800609c <_init>
 8005fbe:	4c0a      	ldr	r4, [pc, #40]	; (8005fe8 <__libc_init_array+0x40>)
 8005fc0:	4d0a      	ldr	r5, [pc, #40]	; (8005fec <__libc_init_array+0x44>)
 8005fc2:	1b64      	subs	r4, r4, r5
 8005fc4:	10a4      	asrs	r4, r4, #2
 8005fc6:	42a6      	cmp	r6, r4
 8005fc8:	d105      	bne.n	8005fd6 <__libc_init_array+0x2e>
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	00b3      	lsls	r3, r6, #2
 8005fce:	58eb      	ldr	r3, [r5, r3]
 8005fd0:	4798      	blx	r3
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	e7ee      	b.n	8005fb4 <__libc_init_array+0xc>
 8005fd6:	00b3      	lsls	r3, r6, #2
 8005fd8:	58eb      	ldr	r3, [r5, r3]
 8005fda:	4798      	blx	r3
 8005fdc:	3601      	adds	r6, #1
 8005fde:	e7f2      	b.n	8005fc6 <__libc_init_array+0x1e>
 8005fe0:	080063cc 	.word	0x080063cc
 8005fe4:	080063cc 	.word	0x080063cc
 8005fe8:	080063d0 	.word	0x080063d0
 8005fec:	080063cc 	.word	0x080063cc

08005ff0 <__retarget_lock_acquire_recursive>:
 8005ff0:	4770      	bx	lr

08005ff2 <__retarget_lock_release_recursive>:
 8005ff2:	4770      	bx	lr

08005ff4 <memcpy>:
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d100      	bne.n	8005ffe <memcpy+0xa>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	5ccc      	ldrb	r4, [r1, r3]
 8006000:	54c4      	strb	r4, [r0, r3]
 8006002:	3301      	adds	r3, #1
 8006004:	e7f8      	b.n	8005ff8 <memcpy+0x4>
	...

08006008 <_free_r>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	0005      	movs	r5, r0
 800600c:	2900      	cmp	r1, #0
 800600e:	d010      	beq.n	8006032 <_free_r+0x2a>
 8006010:	1f0c      	subs	r4, r1, #4
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	da00      	bge.n	800601a <_free_r+0x12>
 8006018:	18e4      	adds	r4, r4, r3
 800601a:	0028      	movs	r0, r5
 800601c:	f7ff ff02 	bl	8005e24 <__malloc_lock>
 8006020:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <_free_r+0x90>)
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d105      	bne.n	8006034 <_free_r+0x2c>
 8006028:	6063      	str	r3, [r4, #4]
 800602a:	6014      	str	r4, [r2, #0]
 800602c:	0028      	movs	r0, r5
 800602e:	f7ff ff01 	bl	8005e34 <__malloc_unlock>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	42a3      	cmp	r3, r4
 8006036:	d908      	bls.n	800604a <_free_r+0x42>
 8006038:	6820      	ldr	r0, [r4, #0]
 800603a:	1821      	adds	r1, r4, r0
 800603c:	428b      	cmp	r3, r1
 800603e:	d1f3      	bne.n	8006028 <_free_r+0x20>
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	1809      	adds	r1, r1, r0
 8006046:	6021      	str	r1, [r4, #0]
 8006048:	e7ee      	b.n	8006028 <_free_r+0x20>
 800604a:	001a      	movs	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <_free_r+0x4e>
 8006052:	42a3      	cmp	r3, r4
 8006054:	d9f9      	bls.n	800604a <_free_r+0x42>
 8006056:	6811      	ldr	r1, [r2, #0]
 8006058:	1850      	adds	r0, r2, r1
 800605a:	42a0      	cmp	r0, r4
 800605c:	d10b      	bne.n	8006076 <_free_r+0x6e>
 800605e:	6820      	ldr	r0, [r4, #0]
 8006060:	1809      	adds	r1, r1, r0
 8006062:	1850      	adds	r0, r2, r1
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	4283      	cmp	r3, r0
 8006068:	d1e0      	bne.n	800602c <_free_r+0x24>
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	1841      	adds	r1, r0, r1
 8006070:	6011      	str	r1, [r2, #0]
 8006072:	6053      	str	r3, [r2, #4]
 8006074:	e7da      	b.n	800602c <_free_r+0x24>
 8006076:	42a0      	cmp	r0, r4
 8006078:	d902      	bls.n	8006080 <_free_r+0x78>
 800607a:	230c      	movs	r3, #12
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	e7d5      	b.n	800602c <_free_r+0x24>
 8006080:	6820      	ldr	r0, [r4, #0]
 8006082:	1821      	adds	r1, r4, r0
 8006084:	428b      	cmp	r3, r1
 8006086:	d103      	bne.n	8006090 <_free_r+0x88>
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	1809      	adds	r1, r1, r0
 800608e:	6021      	str	r1, [r4, #0]
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	6054      	str	r4, [r2, #4]
 8006094:	e7ca      	b.n	800602c <_free_r+0x24>
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	20000178 	.word	0x20000178

0800609c <_init>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr

080060a8 <_fini>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr
