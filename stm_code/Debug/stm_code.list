
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800433c  0800433c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004344  08004344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800434c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004358  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108e2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b8  00000000  00000000  00030959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00032e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8b  00000000  00000000  00033cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1fd  00000000  00000000  00034863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001234c  00000000  00000000  00050a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8196  00000000  00000000  00062dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034a0  00000000  00000000  0011af44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0011e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004248 	.word	0x08004248

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004248 	.word	0x08004248

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <buzzer_freq>:

uint32_t Channel = TIM_CHANNEL_2;
//TIM_HandleTypeDef htim1; // declare the timer handle


void buzzer_freq(int freq) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	int arr = 1066000/freq;
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <buzzer_freq+0x34>)
 8000628:	f7ff fdf6 	bl	8000218 <__divsi3>
 800062c:	0003      	movs	r3, r0
 800062e:	60fb      	str	r3, [r7, #12]
	TIM1->CCR2 = 50;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <buzzer_freq+0x38>)
 8000632:	2232      	movs	r2, #50	; 0x32
 8000634:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->ARR = arr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <buzzer_freq+0x38>)
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <buzzer_freq+0x3c>)
 800063e:	2104      	movs	r1, #4
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fe5b 	bl	80022fc <HAL_TIM_PWM_Start>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	00104410 	.word	0x00104410
 8000654:	40012c00 	.word	0x40012c00
 8000658:	20000028 	.word	0x20000028

0800065c <buzzer_stop>:
void buzzer_stop(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // Stop the PWM signal
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <buzzer_stop+0x14>)
 8000662:	2104      	movs	r1, #4
 8000664:	0018      	movs	r0, r3
 8000666:	f001 ff39 	bl	80024dc <HAL_TIM_PWM_Stop>
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028

08000674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b08b      	sub	sp, #44	; 0x2c
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 fdb3 	bl	80041f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <MX_GPIO_Init+0xf0>)
 800068c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <MX_GPIO_Init+0xf0>)
 8000690:	2104      	movs	r1, #4
 8000692:	430a      	orrs	r2, r1
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <MX_GPIO_Init+0xf0>)
 8000698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069a:	2204      	movs	r2, #4
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006a8:	2120      	movs	r1, #32
 80006aa:	430a      	orrs	r2, r1
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b2:	2220      	movs	r2, #32
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006d8:	2102      	movs	r1, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	2202      	movs	r2, #2
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fd9a 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2212      	movs	r2, #18
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2201      	movs	r2, #1
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fc1e 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2220      	movs	r2, #32
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fc0b 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2201      	movs	r2, #1
 800074e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000750:	193b      	adds	r3, r7, r4
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <MX_GPIO_Init+0xf4>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f000 fbfc 	bl	8000f54 <HAL_GPIO_Init>

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b00b      	add	sp, #44	; 0x2c
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fab6 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f810 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff ff7c 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800077c:	f000 f9d8 	bl	8000b30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000780:	f000 f898 	bl	80008b4 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  buzzer_stop();
 8000784:	f7ff ff6a 	bl	800065c <buzzer_stop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  buzzer_freq(12000);
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <main+0x28>)
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff46 	bl	800061c <buzzer_freq>
 8000790:	e7fa      	b.n	8000788 <main+0x1c>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	00002ee0 	.word	0x00002ee0

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b095      	sub	sp, #84	; 0x54
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	2414      	movs	r4, #20
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	233c      	movs	r3, #60	; 0x3c
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f003 fd21 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	2310      	movs	r3, #16
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f003 fd1a 	bl	80041f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fd51 	bl	8001268 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fd89 	bl	8001300 <HAL_RCC_OscConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007f2:	f000 f819 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f8d4 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800081c:	f000 f804 	bl	8000828 <Error_Handler>
  }
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b015      	add	sp, #84	; 0x54
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	641a      	str	r2, [r3, #64]	; 0x40
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0549      	lsls	r1, r1, #21
 800085c:	430a      	orrs	r2, r1
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_MspInit+0x44>)
 8000862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	055b      	lsls	r3, r3, #21
 8000868:	4013      	ands	r3, r2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 fa88 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	; 0x70
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	2360      	movs	r3, #96	; 0x60
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	0018      	movs	r0, r3
 80008c0:	2310      	movs	r3, #16
 80008c2:	001a      	movs	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	f003 fc93 	bl	80041f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	2354      	movs	r3, #84	; 0x54
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	0018      	movs	r0, r3
 80008d0:	230c      	movs	r3, #12
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f003 fc8b 	bl	80041f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008da:	2338      	movs	r3, #56	; 0x38
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	0018      	movs	r0, r3
 80008e0:	231c      	movs	r3, #28
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f003 fc83 	bl	80041f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	0018      	movs	r0, r3
 80008ee:	2334      	movs	r3, #52	; 0x34
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f003 fc7c 	bl	80041f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f8:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <MX_TIM1_Init+0x18c>)
 80008fa:	4a52      	ldr	r2, [pc, #328]	; (8000a44 <MX_TIM1_Init+0x190>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000900:	220f      	movs	r2, #15
 8000902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800090a:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <MX_TIM1_Init+0x18c>)
 800090c:	2263      	movs	r2, #99	; 0x63
 800090e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000916:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <MX_TIM1_Init+0x18c>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000922:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000924:	0018      	movs	r0, r3
 8000926:	f001 fc31 	bl	800218c <HAL_TIM_Base_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800092e:	f7ff ff7b 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	2160      	movs	r1, #96	; 0x60
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	0152      	lsls	r2, r2, #5
 800093a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093c:	187a      	adds	r2, r7, r1
 800093e:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f001 ff56 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800094c:	f7ff ff6c 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fc72 	bl	800223c <HAL_TIM_PWM_Init>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800095c:	f7ff ff64 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2154      	movs	r1, #84	; 0x54
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000974:	187a      	adds	r2, r7, r1
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f002 fc2c 	bl	80031d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000984:	f7ff ff50 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2138      	movs	r1, #56	; 0x38
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2260      	movs	r2, #96	; 0x60
 800098e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	1879      	adds	r1, r7, r1
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_TIM1_Init+0x18c>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fe1a 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80009c4:	f7ff ff30 	bl	8000828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0192      	lsls	r2, r2, #6
 80009ec:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0492      	lsls	r2, r2, #18
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1a:	1d3a      	adds	r2, r7, #4
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fc4f 	bl	80032c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a2a:	f7ff fefd 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <MX_TIM1_Init+0x18c>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 f83f 	bl	8000ab4 <HAL_TIM_MspPostInit>

}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b01c      	add	sp, #112	; 0x70
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000028 	.word	0x20000028
 8000a44:	40012c00 	.word	0x40012c00

08000a48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b097      	sub	sp, #92	; 0x5c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	240c      	movs	r4, #12
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	234c      	movs	r3, #76	; 0x4c
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f003 fbc8 	bl	80041f0 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_TIM_Base_MspInit+0x64>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d11c      	bne.n	8000aa4 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0392      	lsls	r2, r2, #14
 8000a70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 f94a 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000a84:	f7ff fed0 	bl	8000828 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_TIM_Base_MspInit+0x68>)
 8000a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_TIM_Base_MspInit+0x68>)
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	0109      	lsls	r1, r1, #4
 8000a92:	430a      	orrs	r2, r1
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_TIM_Base_MspInit+0x68>)
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b017      	add	sp, #92	; 0x5c
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	240c      	movs	r4, #12
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f003 fb92 	bl	80041f0 <memset>
  if(timHandle->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <HAL_TIM_MspPostInit+0x70>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d121      	bne.n	8000b1a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_TIM_MspPostInit+0x74>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_TIM_MspPostInit+0x74>)
 8000adc:	2102      	movs	r1, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_TIM_MspPostInit+0x74>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aee:	0021      	movs	r1, r4
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2208      	movs	r2, #8
 8000af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_TIM_MspPostInit+0x78>)
 8000b12:	0019      	movs	r1, r3
 8000b14:	0010      	movs	r0, r2
 8000b16:	f000 fa1d 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b009      	add	sp, #36	; 0x24
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	50000400 	.word	0x50000400

08000b30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b36:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <MX_USART2_UART_Init+0x98>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b3c:	22e1      	movs	r2, #225	; 0xe1
 8000b3e:	0252      	lsls	r2, r2, #9
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fc3e 	bl	80033fc <HAL_UART_Init>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b84:	f7ff fe50 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f003 fa4f 	bl	8004030 <HAL_UARTEx_SetTxFifoThreshold>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b96:	f7ff fe47 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f003 fa86 	bl	80040b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f7ff fe3e 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <MX_USART2_UART_Init+0x94>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f003 fa04 	bl	8003fbc <HAL_UARTEx_DisableFifoMode>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f7ff fe36 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000074 	.word	0x20000074
 8000bc8:	40004400 	.word	0x40004400

08000bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b09d      	sub	sp, #116	; 0x74
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	235c      	movs	r3, #92	; 0x5c
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	0018      	movs	r0, r3
 8000bda:	2314      	movs	r3, #20
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f003 fb06 	bl	80041f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	2410      	movs	r4, #16
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	0018      	movs	r0, r3
 8000bea:	234c      	movs	r3, #76	; 0x4c
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 fafe 	bl	80041f0 <memset>
  if(uartHandle->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d13e      	bne.n	8000c7c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2202      	movs	r2, #2
 8000c02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 f881 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c16:	f7ff fe07 	bl	8000828 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c4e:	215c      	movs	r1, #92	; 0x5c
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f96c 	bl	8000f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b01d      	add	sp, #116	; 0x74
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40021000 	.word	0x40021000

08000c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c90:	f7ff fe0b 	bl	80008aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	; (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cba:	f003 faa1 	bl	8004200 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cbe:	f7ff fd55 	bl	800076c <main>

08000cc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd0:	0800434c 	.word	0x0800434c
  ldr r2, =_sbss
 8000cd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd8:	2000010c 	.word	0x2000010c

08000cdc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_COMP_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x3c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Init+0x3c>)
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	0049      	lsls	r1, r1, #1
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f810 	bl	8000d20 <HAL_InitTick>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff fd92 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_InitTick+0x88>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d02b      	beq.n	8000d90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_InitTick+0x8c>)
 8000d3a:	681c      	ldr	r4, [r3, #0]
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_InitTick+0x88>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	0019      	movs	r1, r3
 8000d42:	23fa      	movs	r3, #250	; 0xfa
 8000d44:	0098      	lsls	r0, r3, #2
 8000d46:	f7ff f9dd 	bl	8000104 <__udivsi3>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f7ff f9d8 	bl	8000104 <__udivsi3>
 8000d54:	0003      	movs	r3, r0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f8ef 	bl	8000f3a <HAL_SYSTICK_Config>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d112      	bne.n	8000d86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d80a      	bhi.n	8000d7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f8ce 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_InitTick+0x90>)
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e00d      	b.n	8000d98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e008      	b.n	8000d98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d86:	230f      	movs	r3, #15
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e003      	b.n	8000d98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b005      	add	sp, #20
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000108 	.word	0x20000108

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000108 	.word	0x20000108

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000e00:	d828      	bhi.n	8000e54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <__NVIC_SetPriority+0xd4>)
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	33c0      	adds	r3, #192	; 0xc0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	589b      	ldr	r3, [r3, r2]
 8000e12:	1dfa      	adds	r2, r7, #7
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	0011      	movs	r1, r2
 8000e18:	2203      	movs	r2, #3
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	00d2      	lsls	r2, r2, #3
 8000e1e:	21ff      	movs	r1, #255	; 0xff
 8000e20:	4091      	lsls	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	43d2      	mvns	r2, r2
 8000e26:	401a      	ands	r2, r3
 8000e28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	019b      	lsls	r3, r3, #6
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	401a      	ands	r2, r3
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	0018      	movs	r0, r3
 8000e38:	2303      	movs	r3, #3
 8000e3a:	4003      	ands	r3, r0
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e40:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <__NVIC_SetPriority+0xd4>)
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	33c0      	adds	r3, #192	; 0xc0
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e52:	e031      	b.n	8000eb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <__NVIC_SetPriority+0xd8>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	400b      	ands	r3, r1
 8000e60:	3b08      	subs	r3, #8
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3306      	adds	r3, #6
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1dfa      	adds	r2, r7, #7
 8000e70:	7812      	ldrb	r2, [r2, #0]
 8000e72:	0011      	movs	r1, r2
 8000e74:	2203      	movs	r2, #3
 8000e76:	400a      	ands	r2, r1
 8000e78:	00d2      	lsls	r2, r2, #3
 8000e7a:	21ff      	movs	r1, #255	; 0xff
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	401a      	ands	r2, r3
 8000e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0018      	movs	r0, r3
 8000e94:	2303      	movs	r3, #3
 8000e96:	4003      	ands	r3, r0
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <__NVIC_SetPriority+0xd8>)
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	001c      	movs	r4, r3
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	4023      	ands	r3, r4
 8000ea8:	3b08      	subs	r3, #8
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	430a      	orrs	r2, r1
 8000eae:	3306      	adds	r3, #6
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	18c3      	adds	r3, r0, r3
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	045b      	lsls	r3, r3, #17
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d301      	bcc.n	8000ee0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000edc:	2301      	movs	r3, #1
 8000ede:	e010      	b.n	8000f02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <SysTick_Config+0x44>)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee8:	2301      	movs	r3, #1
 8000eea:	425b      	negs	r3, r3
 8000eec:	2103      	movs	r1, #3
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff ff7c 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x44>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x44>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	1c02      	adds	r2, r0, #0
 8000f20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff ffbf 	bl	8000ec8 <SysTick_Config>
 8000f4a:	0003      	movs	r3, r0
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b002      	add	sp, #8
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	e14d      	b.n	8001200 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	000a      	movs	r2, r1
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d100      	bne.n	8000f7c <HAL_GPIO_Init+0x28>
 8000f7a:	e13e      	b.n	80011fa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x40>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d017      	beq.n	8001032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	4013      	ands	r3, r2
 800103a:	2b02      	cmp	r3, #2
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	58d3      	ldr	r3, [r2, r3]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2207      	movs	r2, #7
 8001050:	4013      	ands	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2107      	movs	r1, #7
 800106a:	400b      	ands	r3, r1
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	401a      	ands	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d100      	bne.n	80010c8 <HAL_GPIO_Init+0x174>
 80010c6:	e098      	b.n	80011fa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010c8:	4a53      	ldr	r2, [pc, #332]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3318      	adds	r3, #24
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	589b      	ldr	r3, [r3, r2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	220f      	movs	r2, #15
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	23a0      	movs	r3, #160	; 0xa0
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x1d6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x2c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x1d2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x1ce>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a46      	ldr	r2, [pc, #280]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x1ca>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a45      	ldr	r2, [pc, #276]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x1c6>
 8001116:	2304      	movs	r3, #4
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x1d8>
 800111a:	2305      	movs	r3, #5
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x1d8>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x1d8>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x1d8>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x1d8>
 800112a:	2300      	movs	r3, #0
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	2103      	movs	r1, #3
 8001130:	400a      	ands	r2, r1
 8001132:	00d2      	lsls	r2, r2, #3
 8001134:	4093      	lsls	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800113c:	4936      	ldr	r1, [pc, #216]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3318      	adds	r3, #24
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	035b      	lsls	r3, r3, #13
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	039b      	lsls	r3, r3, #14
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 80011a0:	2384      	movs	r3, #132	; 0x84
 80011a2:	58d3      	ldr	r3, [r2, r3]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43da      	mvns	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c4:	4914      	ldr	r1, [pc, #80]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 80011c6:	2284      	movs	r2, #132	; 0x84
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	58d3      	ldr	r3, [r2, r3]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	025b      	lsls	r3, r3, #9
 80011e6:	4013      	ands	r3, r2
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011f2:	4909      	ldr	r1, [pc, #36]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	40da      	lsrs	r2, r3
 8001208:	1e13      	subs	r3, r2, #0
 800120a:	d000      	beq.n	800120e <HAL_GPIO_Init+0x2ba>
 800120c:	e6aa      	b.n	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b006      	add	sp, #24
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021800 	.word	0x40021800
 800121c:	50000400 	.word	0x50000400
 8001220:	50000800 	.word	0x50000800
 8001224:	50000c00 	.word	0x50000c00
 8001228:	50001000 	.word	0x50001000

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	0008      	movs	r0, r1
 8001236:	0011      	movs	r1, r2
 8001238:	1cbb      	adds	r3, r7, #2
 800123a:	1c02      	adds	r2, r0, #0
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	1c7b      	adds	r3, r7, #1
 8001240:	1c0a      	adds	r2, r1, #0
 8001242:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001244:	1c7b      	adds	r3, r7, #1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124c:	1cbb      	adds	r3, r7, #2
 800124e:	881a      	ldrh	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	1cbb      	adds	r3, r7, #2
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001276:	4013      	ands	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d11f      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	0013      	movs	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	189b      	adds	r3, r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4912      	ldr	r1, [pc, #72]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800129a:	0018      	movs	r0, r3
 800129c:	f7fe ff32 	bl	8000104 <__udivsi3>
 80012a0:	0003      	movs	r3, r0
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a6:	e008      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e001      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e009      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	401a      	ands	r2, r3
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d0ed      	beq.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40007000 	.word	0x40007000
 80012dc:	fffff9ff 	.word	0xfffff9ff
 80012e0:	20000000 	.word	0x20000000
 80012e4:	000f4240 	.word	0x000f4240

080012e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	23e0      	movs	r3, #224	; 0xe0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	4013      	ands	r3, r2
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f000 fb50 	bl	80019b4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	4013      	ands	r3, r2
 800131c:	d100      	bne.n	8001320 <HAL_RCC_OscConfig+0x20>
 800131e:	e07c      	b.n	800141a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001320:	4bc3      	ldr	r3, [pc, #780]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2238      	movs	r2, #56	; 0x38
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132a:	4bc1      	ldr	r3, [pc, #772]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2203      	movs	r2, #3
 8001330:	4013      	ands	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x40>
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d002      	beq.n	8001346 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d10b      	bne.n	800135e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	4bba      	ldr	r3, [pc, #744]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	029b      	lsls	r3, r3, #10
 800134e:	4013      	ands	r3, r2
 8001350:	d062      	beq.n	8001418 <HAL_RCC_OscConfig+0x118>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d15e      	bne.n	8001418 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e32a      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	025b      	lsls	r3, r3, #9
 8001366:	429a      	cmp	r2, r3
 8001368:	d107      	bne.n	800137a <HAL_RCC_OscConfig+0x7a>
 800136a:	4bb1      	ldr	r3, [pc, #708]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4bb0      	ldr	r3, [pc, #704]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0249      	lsls	r1, r1, #9
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e020      	b.n	80013bc <HAL_RCC_OscConfig+0xbc>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	02db      	lsls	r3, r3, #11
 8001382:	429a      	cmp	r2, r3
 8001384:	d10e      	bne.n	80013a4 <HAL_RCC_OscConfig+0xa4>
 8001386:	4baa      	ldr	r3, [pc, #680]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4ba9      	ldr	r3, [pc, #676]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	02c9      	lsls	r1, r1, #11
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	4ba6      	ldr	r3, [pc, #664]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4ba5      	ldr	r3, [pc, #660]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	0249      	lsls	r1, r1, #9
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0xbc>
 80013a4:	4ba2      	ldr	r3, [pc, #648]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4ba1      	ldr	r3, [pc, #644]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013aa:	49a2      	ldr	r1, [pc, #648]	; (8001634 <HAL_RCC_OscConfig+0x334>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	4b9f      	ldr	r3, [pc, #636]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013b6:	49a0      	ldr	r1, [pc, #640]	; (8001638 <HAL_RCC_OscConfig+0x338>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d014      	beq.n	80013ee <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fd08 	bl	8000dd8 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ce:	f7ff fd03 	bl	8000dd8 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e2e9      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e0:	4b93      	ldr	r3, [pc, #588]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0xce>
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fcf3 	bl	8000dd8 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcee 	bl	8000dd8 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e2d4      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140a:	4b89      	ldr	r3, [pc, #548]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0xf8>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	d100      	bne.n	8001426 <HAL_RCC_OscConfig+0x126>
 8001424:	e099      	b.n	800155a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2238      	movs	r2, #56	; 0x38
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001430:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2203      	movs	r2, #3
 8001436:	4013      	ands	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b10      	cmp	r3, #16
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x146>
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d002      	beq.n	800144c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d135      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4013      	ands	r3, r2
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x164>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e2a7      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b72      	ldr	r3, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a74      	ldr	r2, [pc, #464]	; (800163c <HAL_RCC_OscConfig+0x33c>)
 800146a:	4013      	ands	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	021a      	lsls	r2, r3, #8
 8001474:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d112      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <HAL_RCC_OscConfig+0x340>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001494:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0adb      	lsrs	r3, r3, #11
 800149a:	2207      	movs	r2, #7
 800149c:	4013      	ands	r3, r2
 800149e:	4a69      	ldr	r2, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x344>)
 80014a0:	40da      	lsrs	r2, r3
 80014a2:	4b69      	ldr	r3, [pc, #420]	; (8001648 <HAL_RCC_OscConfig+0x348>)
 80014a4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014a6:	4b69      	ldr	r3, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x34c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fc38 	bl	8000d20 <HAL_InitTick>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d051      	beq.n	8001558 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e27d      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d030      	beq.n	8001522 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x340>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0049      	lsls	r1, r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fc79 	bl	8000dd8 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc74 	bl	8000dd8 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e25a      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fe:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4013      	ands	r3, r2
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b49      	ldr	r3, [pc, #292]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_RCC_OscConfig+0x33c>)
 8001510:	4013      	ands	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	021a      	lsls	r2, r3, #8
 800151a:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	e01b      	b.n	800155a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001528:	4949      	ldr	r1, [pc, #292]	; (8001650 <HAL_RCC_OscConfig+0x350>)
 800152a:	400a      	ands	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fc53 	bl	8000dd8 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fc4e 	bl	8000dd8 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e234      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4013      	ands	r3, r2
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x238>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2208      	movs	r2, #8
 8001560:	4013      	ands	r3, r2
 8001562:	d047      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2238      	movs	r2, #56	; 0x38
 800156a:	4013      	ands	r3, r2
 800156c:	2b18      	cmp	r3, #24
 800156e:	d10a      	bne.n	8001586 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d03c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2f4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d138      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e216      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d019      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001590:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fc1d 	bl	8000dd8 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc18 	bl	8000dd8 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1fe      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2a4>
 80015c0:	e018      	b.n	80015f4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80015c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	438a      	bics	r2, r1
 80015cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc03 	bl	8000dd8 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fbfe 	bl	8000dd8 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1e4      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	2202      	movs	r2, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d1f1      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2204      	movs	r2, #4
 80015fa:	4013      	ands	r3, r2
 80015fc:	d100      	bne.n	8001600 <HAL_RCC_OscConfig+0x300>
 80015fe:	e0c7      	b.n	8001790 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001600:	231f      	movs	r3, #31
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2238      	movs	r2, #56	; 0x38
 800160e:	4013      	ands	r3, r2
 8001610:	2b20      	cmp	r3, #32
 8001612:	d11f      	bne.n	8001654 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x320>
 800161e:	e0b7      	b.n	8001790 <HAL_RCC_OscConfig+0x490>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d000      	beq.n	800162a <HAL_RCC_OscConfig+0x32a>
 8001628:	e0b2      	b.n	8001790 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1c2      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	fffeffff 	.word	0xfffeffff
 8001638:	fffbffff 	.word	0xfffbffff
 800163c:	ffff80ff 	.word	0xffff80ff
 8001640:	ffffc7ff 	.word	0xffffc7ff
 8001644:	00f42400 	.word	0x00f42400
 8001648:	20000000 	.word	0x20000000
 800164c:	20000004 	.word	0x20000004
 8001650:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001654:	4bb5      	ldr	r3, [pc, #724]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	055b      	lsls	r3, r3, #21
 800165c:	4013      	ands	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x364>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x366>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d011      	beq.n	800168e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4bb0      	ldr	r3, [pc, #704]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800166c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166e:	4baf      	ldr	r3, [pc, #700]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	0549      	lsls	r1, r1, #21
 8001674:	430a      	orrs	r2, r1
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
 8001678:	4bac      	ldr	r3, [pc, #688]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800167a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	055b      	lsls	r3, r3, #21
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001686:	231f      	movs	r3, #31
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168e:	4ba8      	ldr	r3, [pc, #672]	; (8001930 <HAL_RCC_OscConfig+0x630>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4013      	ands	r3, r2
 8001698:	d11a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169a:	4ba5      	ldr	r3, [pc, #660]	; (8001930 <HAL_RCC_OscConfig+0x630>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4ba4      	ldr	r3, [pc, #656]	; (8001930 <HAL_RCC_OscConfig+0x630>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0049      	lsls	r1, r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb96 	bl	8000dd8 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fb91 	bl	8000dd8 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e177      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	4b9a      	ldr	r3, [pc, #616]	; (8001930 <HAL_RCC_OscConfig+0x630>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3e6>
 80016d8:	4b94      	ldr	r3, [pc, #592]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80016da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016dc:	4b93      	ldr	r3, [pc, #588]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x420>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x408>
 80016ee:	4b8f      	ldr	r3, [pc, #572]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80016f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80016f4:	2104      	movs	r1, #4
 80016f6:	430a      	orrs	r2, r1
 80016f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80016fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	65da      	str	r2, [r3, #92]	; 0x5c
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x420>
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800170a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800170c:	4b87      	ldr	r3, [pc, #540]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800170e:	2101      	movs	r1, #1
 8001710:	438a      	bics	r2, r1
 8001712:	65da      	str	r2, [r3, #92]	; 0x5c
 8001714:	4b85      	ldr	r3, [pc, #532]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001718:	4b84      	ldr	r3, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800171a:	2104      	movs	r1, #4
 800171c:	438a      	bics	r2, r1
 800171e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d014      	beq.n	8001752 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fb56 	bl	8000dd8 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001730:	e009      	b.n	8001746 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb51 	bl	8000dd8 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a7d      	ldr	r2, [pc, #500]	; (8001934 <HAL_RCC_OscConfig+0x634>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e136      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x432>
 8001750:	e013      	b.n	800177a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fb41 	bl	8000dd8 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175a:	e009      	b.n	8001770 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fb3c 	bl	8000dd8 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a73      	ldr	r2, [pc, #460]	; (8001934 <HAL_RCC_OscConfig+0x634>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e121      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	4b6e      	ldr	r3, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2202      	movs	r2, #2
 8001776:	4013      	ands	r3, r2
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800177a:	231f      	movs	r3, #31
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	4b69      	ldr	r3, [pc, #420]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800178a:	496b      	ldr	r1, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x638>)
 800178c:	400a      	ands	r2, r1
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2220      	movs	r2, #32
 8001796:	4013      	ands	r3, r2
 8001798:	d039      	beq.n	800180e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01b      	beq.n	80017da <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a2:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	03c9      	lsls	r1, r1, #15
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fb12 	bl	8000dd8 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ba:	f7ff fb0d 	bl	8000dd8 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0f3      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x4ba>
 80017d8:	e019      	b.n	800180e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80017e0:	4956      	ldr	r1, [pc, #344]	; (800193c <HAL_RCC_OscConfig+0x63c>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff faf7 	bl	8000dd8 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f0:	f7ff faf2 	bl	8000dd8 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0d8      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d100      	bne.n	8001818 <HAL_RCC_OscConfig+0x518>
 8001816:	e0cc      	b.n	80019b2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2238      	movs	r2, #56	; 0x38
 800181e:	4013      	ands	r3, r2
 8001820:	2b10      	cmp	r3, #16
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x526>
 8001824:	e07b      	b.n	800191e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d156      	bne.n	80018dc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001834:	4942      	ldr	r1, [pc, #264]	; (8001940 <HAL_RCC_OscConfig+0x640>)
 8001836:	400a      	ands	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff facd 	bl	8000dd8 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fac8 	bl	8000dd8 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0ae      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001856:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	049b      	lsls	r3, r3, #18
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x644>)
 8001868:	4013      	ands	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	431a      	orrs	r2, r3
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001892:	430a      	orrs	r2, r1
 8001894:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0449      	lsls	r1, r1, #17
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0549      	lsls	r1, r1, #21
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa91 	bl	8000dd8 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fa8c 	bl	8000dd8 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e072      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	049b      	lsls	r3, r3, #18
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x5bc>
 80018da:	e06a      	b.n	80019b2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80018e2:	4917      	ldr	r1, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x640>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fa76 	bl	8000dd8 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff fa71 	bl	8000dd8 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e057      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	049b      	lsls	r3, r3, #18
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001916:	490c      	ldr	r1, [pc, #48]	; (8001948 <HAL_RCC_OscConfig+0x648>)
 8001918:	400a      	ands	r2, r1
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	e049      	b.n	80019b2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d112      	bne.n	800194c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e044      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	00001388 	.word	0x00001388
 8001938:	efffffff 	.word	0xefffffff
 800193c:	ffbfffff 	.word	0xffbfffff
 8001940:	feffffff 	.word	0xfeffffff
 8001944:	11c1808c 	.word	0x11c1808c
 8001948:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x6bc>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2203      	movs	r2, #3
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	429a      	cmp	r2, r3
 800195e:	d126      	bne.n	80019ae <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2270      	movs	r2, #112	; 0x70
 8001964:	401a      	ands	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11f      	bne.n	80019ae <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	23fe      	movs	r3, #254	; 0xfe
 8001972:	01db      	lsls	r3, r3, #7
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d116      	bne.n	80019ae <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	23f8      	movs	r3, #248	; 0xf8
 8001984:	039b      	lsls	r3, r3, #14
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d10e      	bne.n	80019ae <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	23e0      	movs	r3, #224	; 0xe0
 8001994:	051b      	lsls	r3, r3, #20
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	0f5b      	lsrs	r3, r3, #29
 80019a4:	075a      	lsls	r2, r3, #29
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b008      	add	sp, #32
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0e9      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2207      	movs	r2, #7
 80019da:	4013      	ands	r3, r2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d91e      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2207      	movs	r2, #7
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f9f0 	bl	8000dd8 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f9eb 	bl	8000dd8 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a6a      	ldr	r2, [pc, #424]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0ca      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2207      	movs	r2, #7
 8001a18:	4013      	ands	r3, r2
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1ee      	bne.n	80019fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d015      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d006      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	21e0      	movs	r1, #224	; 0xe0
 8001a3c:	01c9      	lsls	r1, r1, #7
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a42:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_RCC_ClockConfig+0x1fc>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d057      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	4013      	ands	r3, r2
 8001a72:	d12b      	bne.n	8001acc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e097      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	049b      	lsls	r3, r3, #18
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d11f      	bne.n	8001acc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e08b      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d113      	bne.n	8001acc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e07f      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d108      	bne.n	8001acc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e074      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e06d      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f97a 	bl	8000dd8 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f7ff f975 	bl	8000dd8 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e054      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2238      	movs	r2, #56	; 0x38
 8001b04:	401a      	ands	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1ec      	bne.n	8001aea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2207      	movs	r2, #7
 8001b16:	4013      	ands	r3, r2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d21e      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4393      	bics	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f952 	bl	8000dd8 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7ff f94d 	bl	8000dd8 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e02c      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2204      	movs	r2, #4
 8001b62:	4013      	ands	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <HAL_RCC_ClockConfig+0x200>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b7a:	f000 f829 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b7e:	0001      	movs	r1, r0
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	220f      	movs	r2, #15
 8001b88:	401a      	ands	r2, r3
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x204>)
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	58d3      	ldr	r3, [r2, r3]
 8001b90:	221f      	movs	r2, #31
 8001b92:	4013      	ands	r3, r2
 8001b94:	000a      	movs	r2, r1
 8001b96:	40da      	lsrs	r2, r3
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x208>)
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x20c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff f8bd 	bl	8000d20 <HAL_InitTick>
 8001ba6:	0003      	movs	r3, r0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	00001388 	.word	0x00001388
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	fffff0ff 	.word	0xfffff0ff
 8001bc0:	ffff8fff 	.word	0xffff8fff
 8001bc4:	08004260 	.word	0x08004260
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2238      	movs	r2, #56	; 0x38
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d10f      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0adb      	lsrs	r3, r3, #11
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	4835      	ldr	r0, [pc, #212]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bf6:	f7fe fa85 	bl	8000104 <__udivsi3>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e05d      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2238      	movs	r2, #56	; 0x38
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e054      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2238      	movs	r2, #56	; 0x38
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d138      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2203      	movs	r2, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	2207      	movs	r2, #7
 8001c30:	4013      	ands	r3, r2
 8001c32:	3301      	adds	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c40:	f7fe fa60 	bl	8000104 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	0019      	movs	r1, r3
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	227f      	movs	r2, #127	; 0x7f
 8001c50:	4013      	ands	r3, r2
 8001c52:	434b      	muls	r3, r1
 8001c54:	617b      	str	r3, [r7, #20]
        break;
 8001c56:	e00d      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	481c      	ldr	r0, [pc, #112]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c5c:	f7fe fa52 	bl	8000104 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	0019      	movs	r1, r3
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	227f      	movs	r2, #127	; 0x7f
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	434b      	muls	r3, r1
 8001c70:	617b      	str	r3, [r7, #20]
        break;
 8001c72:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0f5b      	lsrs	r3, r3, #29
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fa3d 	bl	8000104 <__udivsi3>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	e015      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2238      	movs	r2, #56	; 0x38
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d103      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2238      	movs	r2, #56	; 0x38
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b18      	cmp	r3, #24
 8001cae:	d103      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cb0:	23fa      	movs	r3, #250	; 0xfa
 8001cb2:	01db      	lsls	r3, r3, #7
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e001      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cbc:	693b      	ldr	r3, [r7, #16]
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cec:	f7ff fff2 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf0:	0004      	movs	r4, r0
 8001cf2:	f7ff faf9 	bl	80012e8 <LL_RCC_GetAPB1Prescaler>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	0b1a      	lsrs	r2, r3, #12
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	58d3      	ldr	r3, [r2, r3]
 8001d00:	221f      	movs	r2, #31
 8001d02:	4013      	ands	r3, r2
 8001d04:	40dc      	lsrs	r4, r3
 8001d06:	0023      	movs	r3, r4
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	080042a0 	.word	0x080042a0

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d1c:	2313      	movs	r3, #19
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d24:	2312      	movs	r3, #18
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	4013      	ands	r3, r2
 8001d36:	d100      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d38:	e0ad      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3a:	2011      	movs	r0, #17
 8001d3c:	183b      	adds	r3, r7, r0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	055b      	lsls	r3, r3, #21
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d110      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d52:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	0549      	lsls	r1, r1, #21
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	055b      	lsls	r3, r3, #21
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	0049      	lsls	r1, r1, #1
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d7e:	f7ff f82b 	bl	8000dd8 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d86:	e00b      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d88:	f7ff f826 	bl	8000dd8 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d904      	bls.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d96:	2313      	movs	r3, #19
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	701a      	strb	r2, [r3, #0]
        break;
 8001d9e:	e005      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0ed      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001dac:	2313      	movs	r3, #19
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d15e      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d019      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d014      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0249      	lsls	r1, r1, #9
 8001de6:	430a      	orrs	r2, r1
 8001de8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df0:	491e      	ldr	r1, [pc, #120]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d016      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe ffe8 	bl	8000dd8 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0c:	e00c      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe ffe3 	bl	8000dd8 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d904      	bls.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e1e:	2313      	movs	r3, #19
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2203      	movs	r2, #3
 8001e24:	701a      	strb	r2, [r3, #0]
            break;
 8001e26:	e004      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d0ed      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e32:	2313      	movs	r3, #19
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e50:	e016      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e52:	2312      	movs	r3, #18
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2213      	movs	r2, #19
 8001e58:	18ba      	adds	r2, r7, r2
 8001e5a:	7812      	ldrb	r2, [r2, #0]
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	fffffcff 	.word	0xfffffcff
 8001e6c:	fffeffff 	.word	0xfffeffff
 8001e70:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e74:	2312      	movs	r3, #18
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2213      	movs	r2, #19
 8001e7a:	18ba      	adds	r2, r7, r2
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e80:	2311      	movs	r3, #17
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4bb6      	ldr	r3, [pc, #728]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e8e:	4bb5      	ldr	r3, [pc, #724]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e90:	49b5      	ldr	r1, [pc, #724]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea0:	4bb0      	ldr	r3, [pc, #704]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4bad      	ldr	r3, [pc, #692]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ebe:	4ba9      	ldr	r3, [pc, #676]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4ba5      	ldr	r3, [pc, #660]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001edc:	4ba1      	ldr	r3, [pc, #644]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	2230      	movs	r2, #48	; 0x30
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	4b9e      	ldr	r3, [pc, #632]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001efa:	4b9a      	ldr	r3, [pc, #616]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	4a9b      	ldr	r2, [pc, #620]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	4b96      	ldr	r3, [pc, #600]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	015b      	lsls	r3, r3, #5
 8001f16:	4013      	ands	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001f1a:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d009      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f3a:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	4a8d      	ldr	r2, [pc, #564]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f48:	4b86      	ldr	r3, [pc, #536]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	4a86      	ldr	r2, [pc, #536]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f68:	4b7e      	ldr	r3, [pc, #504]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2220      	movs	r2, #32
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	4a7f      	ldr	r2, [pc, #508]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	4a79      	ldr	r2, [pc, #484]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	01db      	lsls	r3, r3, #7
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fb6:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	0899      	lsrs	r1, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc2:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	05db      	lsls	r3, r3, #23
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fd4:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4b62      	ldr	r3, [pc, #392]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	031b      	lsls	r3, r3, #12
 8001fea:	4013      	ands	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	039b      	lsls	r3, r3, #14
 800200a:	4013      	ands	r3, r2
 800200c:	d016      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800200e:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002014:	4013      	ands	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201e:	430a      	orrs	r2, r1
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	03db      	lsls	r3, r3, #15
 800202a:	429a      	cmp	r2, r3
 800202c:	d106      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800202e:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	0449      	lsls	r1, r1, #17
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	03db      	lsls	r3, r3, #15
 8002044:	4013      	ands	r3, r2
 8002046:	d016      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002058:	430a      	orrs	r2, r1
 800205a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	045b      	lsls	r3, r3, #17
 8002064:	429a      	cmp	r2, r3
 8002066:	d106      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0449      	lsls	r1, r1, #17
 8002072:	430a      	orrs	r2, r1
 8002074:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4013      	ands	r3, r2
 8002080:	d014      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	2203      	movs	r2, #3
 8002088:	4393      	bics	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002092:	430a      	orrs	r2, r1
 8002094:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0249      	lsls	r1, r1, #9
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	019b      	lsls	r3, r3, #6
 80020b4:	4013      	ands	r3, r2
 80020b6:	d014      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	220c      	movs	r2, #12
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d106      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	0249      	lsls	r1, r1, #9
 80020de:	430a      	orrs	r2, r1
 80020e0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	045b      	lsls	r3, r3, #17
 80020ea:	4013      	ands	r3, r2
 80020ec:	d016      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	429a      	cmp	r2, r3
 800210c:	d106      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0449      	lsls	r1, r1, #17
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	4013      	ands	r3, r2
 8002126:	d016      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002138:	430a      	orrs	r2, r1
 800213a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0449      	lsls	r1, r1, #17
 8002152:	430a      	orrs	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002156:	2312      	movs	r3, #18
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781b      	ldrb	r3, [r3, #0]
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	efffffff 	.word	0xefffffff
 800216c:	fffff3ff 	.word	0xfffff3ff
 8002170:	fffffcff 	.word	0xfffffcff
 8002174:	fff3ffff 	.word	0xfff3ffff
 8002178:	ffcfffff 	.word	0xffcfffff
 800217c:	ffffcfff 	.word	0xffffcfff
 8002180:	ffff3fff 	.word	0xffff3fff
 8002184:	ffbfffff 	.word	0xffbfffff
 8002188:	feffffff 	.word	0xfeffffff

0800218c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e04a      	b.n	8002234 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	223d      	movs	r2, #61	; 0x3d
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	223c      	movs	r2, #60	; 0x3c
 80021ae:	2100      	movs	r1, #0
 80021b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7fe fc47 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	223d      	movs	r2, #61	; 0x3d
 80021be:	2102      	movs	r1, #2
 80021c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f000 fbe7 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2248      	movs	r2, #72	; 0x48
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	223e      	movs	r2, #62	; 0x3e
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2241      	movs	r2, #65	; 0x41
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2242      	movs	r2, #66	; 0x42
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2243      	movs	r2, #67	; 0x43
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2244      	movs	r2, #68	; 0x44
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2245      	movs	r2, #69	; 0x45
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2246      	movs	r2, #70	; 0x46
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2247      	movs	r2, #71	; 0x47
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223d      	movs	r2, #61	; 0x3d
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e04a      	b.n	80022e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	223d      	movs	r2, #61	; 0x3d
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223c      	movs	r2, #60	; 0x3c
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f841 	bl	80022ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223d      	movs	r2, #61	; 0x3d
 800226e:	2102      	movs	r1, #2
 8002270:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	0019      	movs	r1, r3
 800227c:	0010      	movs	r0, r2
 800227e:	f000 fb8f 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2248      	movs	r2, #72	; 0x48
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223e      	movs	r2, #62	; 0x3e
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	223f      	movs	r2, #63	; 0x3f
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2242      	movs	r2, #66	; 0x42
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2243      	movs	r2, #67	; 0x43
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2244      	movs	r2, #68	; 0x44
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2245      	movs	r2, #69	; 0x45
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2246      	movs	r2, #70	; 0x46
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2247      	movs	r2, #71	; 0x47
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	223d      	movs	r2, #61	; 0x3d
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <HAL_TIM_PWM_Start+0x22>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	223e      	movs	r2, #62	; 0x3e
 8002310:	5c9b      	ldrb	r3, [r3, r2]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	4193      	sbcs	r3, r2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	e037      	b.n	800238e <HAL_TIM_PWM_Start+0x92>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d108      	bne.n	8002336 <HAL_TIM_PWM_Start+0x3a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	223f      	movs	r2, #63	; 0x3f
 8002328:	5c9b      	ldrb	r3, [r3, r2]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	4193      	sbcs	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e02b      	b.n	800238e <HAL_TIM_PWM_Start+0x92>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d108      	bne.n	800234e <HAL_TIM_PWM_Start+0x52>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	; 0x40
 8002340:	5c9b      	ldrb	r3, [r3, r2]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	4193      	sbcs	r3, r2
 800234a:	b2db      	uxtb	r3, r3
 800234c:	e01f      	b.n	800238e <HAL_TIM_PWM_Start+0x92>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d108      	bne.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2241      	movs	r2, #65	; 0x41
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	4193      	sbcs	r3, r2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e013      	b.n	800238e <HAL_TIM_PWM_Start+0x92>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d108      	bne.n	800237e <HAL_TIM_PWM_Start+0x82>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2242      	movs	r2, #66	; 0x42
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	4193      	sbcs	r3, r2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e007      	b.n	800238e <HAL_TIM_PWM_Start+0x92>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2243      	movs	r2, #67	; 0x43
 8002382:	5c9b      	ldrb	r3, [r3, r2]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	4193      	sbcs	r3, r2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e090      	b.n	80024b8 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	223e      	movs	r2, #62	; 0x3e
 80023a0:	2102      	movs	r1, #2
 80023a2:	5499      	strb	r1, [r3, r2]
 80023a4:	e023      	b.n	80023ee <HAL_TIM_PWM_Start+0xf2>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_PWM_Start+0xba>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	2102      	movs	r1, #2
 80023b2:	5499      	strb	r1, [r3, r2]
 80023b4:	e01b      	b.n	80023ee <HAL_TIM_PWM_Start+0xf2>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_PWM_Start+0xca>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	2102      	movs	r1, #2
 80023c2:	5499      	strb	r1, [r3, r2]
 80023c4:	e013      	b.n	80023ee <HAL_TIM_PWM_Start+0xf2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d104      	bne.n	80023d6 <HAL_TIM_PWM_Start+0xda>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2241      	movs	r2, #65	; 0x41
 80023d0:	2102      	movs	r1, #2
 80023d2:	5499      	strb	r1, [r3, r2]
 80023d4:	e00b      	b.n	80023ee <HAL_TIM_PWM_Start+0xf2>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d104      	bne.n	80023e6 <HAL_TIM_PWM_Start+0xea>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2242      	movs	r2, #66	; 0x42
 80023e0:	2102      	movs	r1, #2
 80023e2:	5499      	strb	r1, [r3, r2]
 80023e4:	e003      	b.n	80023ee <HAL_TIM_PWM_Start+0xf2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2243      	movs	r2, #67	; 0x43
 80023ea:	2102      	movs	r1, #2
 80023ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 feca 	bl	8003190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <HAL_TIM_PWM_Start+0x1c4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_TIM_PWM_Start+0x128>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_TIM_PWM_Start+0x1c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_TIM_PWM_Start+0x128>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <HAL_TIM_PWM_Start+0x1cc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_TIM_PWM_Start+0x128>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_TIM_PWM_Start+0x1d0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_TIM_PWM_Start+0x12c>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_TIM_PWM_Start+0x12e>
 8002428:	2300      	movs	r3, #0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	0209      	lsls	r1, r1, #8
 800243c:	430a      	orrs	r2, r1
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_TIM_PWM_Start+0x1c4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d014      	beq.n	8002474 <HAL_TIM_PWM_Start+0x178>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	429a      	cmp	r2, r3
 8002454:	d00e      	beq.n	8002474 <HAL_TIM_PWM_Start+0x178>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_TIM_PWM_Start+0x1d4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_TIM_PWM_Start+0x178>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_TIM_PWM_Start+0x1d8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_PWM_Start+0x178>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_TIM_PWM_Start+0x1c8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d116      	bne.n	80024a2 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_TIM_PWM_Start+0x1dc>)
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b06      	cmp	r3, #6
 8002484:	d016      	beq.n	80024b4 <HAL_TIM_PWM_Start+0x1b8>
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	025b      	lsls	r3, r3, #9
 800248c:	429a      	cmp	r2, r3
 800248e:	d011      	beq.n	80024b4 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a0:	e008      	b.n	80024b4 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e000      	b.n	80024b6 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40014000 	.word	0x40014000
 80024c8:	40014400 	.word	0x40014400
 80024cc:	40014800 	.word	0x40014800
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	00010007 	.word	0x00010007

080024dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fe4e 	bl	8003190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <HAL_TIM_PWM_Stop+0xfc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00e      	beq.n	800251c <HAL_TIM_PWM_Stop+0x40>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a36      	ldr	r2, [pc, #216]	; (80025dc <HAL_TIM_PWM_Stop+0x100>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_TIM_PWM_Stop+0x40>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <HAL_TIM_PWM_Stop+0x104>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_TIM_PWM_Stop+0x40>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <HAL_TIM_PWM_Stop+0x108>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_TIM_PWM_Stop+0x44>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_TIM_PWM_Stop+0x46>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d013      	beq.n	800254e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <HAL_TIM_PWM_Stop+0x10c>)
 800252e:	4013      	ands	r3, r2
 8002530:	d10d      	bne.n	800254e <HAL_TIM_PWM_Stop+0x72>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <HAL_TIM_PWM_Stop+0x110>)
 800253a:	4013      	ands	r3, r2
 800253c:	d107      	bne.n	800254e <HAL_TIM_PWM_Stop+0x72>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4929      	ldr	r1, [pc, #164]	; (80025f0 <HAL_TIM_PWM_Stop+0x114>)
 800254a:	400a      	ands	r2, r1
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_TIM_PWM_Stop+0x10c>)
 8002556:	4013      	ands	r3, r2
 8002558:	d10d      	bne.n	8002576 <HAL_TIM_PWM_Stop+0x9a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_TIM_PWM_Stop+0x110>)
 8002562:	4013      	ands	r3, r2
 8002564:	d107      	bne.n	8002576 <HAL_TIM_PWM_Stop+0x9a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	438a      	bics	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Stop+0xaa>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	223e      	movs	r2, #62	; 0x3e
 8002580:	2101      	movs	r1, #1
 8002582:	5499      	strb	r1, [r3, r2]
 8002584:	e023      	b.n	80025ce <HAL_TIM_PWM_Stop+0xf2>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Stop+0xba>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	223f      	movs	r2, #63	; 0x3f
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]
 8002594:	e01b      	b.n	80025ce <HAL_TIM_PWM_Stop+0xf2>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Stop+0xca>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	2101      	movs	r1, #1
 80025a2:	5499      	strb	r1, [r3, r2]
 80025a4:	e013      	b.n	80025ce <HAL_TIM_PWM_Stop+0xf2>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d104      	bne.n	80025b6 <HAL_TIM_PWM_Stop+0xda>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2241      	movs	r2, #65	; 0x41
 80025b0:	2101      	movs	r1, #1
 80025b2:	5499      	strb	r1, [r3, r2]
 80025b4:	e00b      	b.n	80025ce <HAL_TIM_PWM_Stop+0xf2>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d104      	bne.n	80025c6 <HAL_TIM_PWM_Stop+0xea>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2242      	movs	r2, #66	; 0x42
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]
 80025c4:	e003      	b.n	80025ce <HAL_TIM_PWM_Stop+0xf2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2243      	movs	r2, #67	; 0x43
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800
 80025e8:	00001111 	.word	0x00001111
 80025ec:	00000444 	.word	0x00000444
 80025f0:	ffff7fff 	.word	0xffff7fff

080025f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2317      	movs	r3, #23
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	223c      	movs	r2, #60	; 0x3c
 800260c:	5c9b      	ldrb	r3, [r3, r2]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002612:	2302      	movs	r3, #2
 8002614:	e0e5      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	223c      	movs	r2, #60	; 0x3c
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b14      	cmp	r3, #20
 8002622:	d900      	bls.n	8002626 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002624:	e0d1      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	009a      	lsls	r2, r3, #2
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800262c:	18d3      	adds	r3, r2, r3
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	0011      	movs	r1, r2
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fa48 	bl	8002ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2108      	movs	r1, #8
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2104      	movs	r1, #4
 800265c:	438a      	bics	r2, r1
 800265e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6999      	ldr	r1, [r3, #24]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	619a      	str	r2, [r3, #24]
      break;
 8002672:	e0af      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	0011      	movs	r1, r2
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fab1 	bl	8002be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0109      	lsls	r1, r1, #4
 8002690:	430a      	orrs	r2, r1
 8002692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4954      	ldr	r1, [pc, #336]	; (80027f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6999      	ldr	r1, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	021a      	lsls	r2, r3, #8
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	619a      	str	r2, [r3, #24]
      break;
 80026b8:	e08c      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fb12 	bl	8002cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2108      	movs	r1, #8
 80026d4:	430a      	orrs	r2, r1
 80026d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2104      	movs	r1, #4
 80026e4:	438a      	bics	r2, r1
 80026e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69d9      	ldr	r1, [r3, #28]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	61da      	str	r2, [r3, #28]
      break;
 80026fa:	e06b      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fb79 	bl	8002dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0109      	lsls	r1, r1, #4
 8002718:	430a      	orrs	r2, r1
 800271a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4932      	ldr	r1, [pc, #200]	; (80027f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002728:	400a      	ands	r2, r1
 800272a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69d9      	ldr	r1, [r3, #28]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	021a      	lsls	r2, r3, #8
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
      break;
 8002740:	e048      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	0011      	movs	r1, r2
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fbc0 	bl	8002ed0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2108      	movs	r1, #8
 800275c:	430a      	orrs	r2, r1
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2104      	movs	r1, #4
 800276c:	438a      	bics	r2, r1
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002782:	e027      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fbff 	bl	8002f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0109      	lsls	r1, r1, #4
 80027a0:	430a      	orrs	r2, r1
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4910      	ldr	r1, [pc, #64]	; (80027f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	021a      	lsls	r2, r3, #8
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027c8:	e004      	b.n	80027d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
      break;
 80027d2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	223c      	movs	r2, #60	; 0x3c
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]

  return status;
 80027dc:	2317      	movs	r3, #23
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b006      	add	sp, #24
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	080042c0 	.word	0x080042c0
 80027f0:	fffffbff 	.word	0xfffffbff

080027f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	230f      	movs	r3, #15
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223c      	movs	r2, #60	; 0x3c
 800280a:	5c9b      	ldrb	r3, [r3, r2]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_TIM_ConfigClockSource+0x20>
 8002810:	2302      	movs	r3, #2
 8002812:	e0bc      	b.n	800298e <HAL_TIM_ConfigClockSource+0x19a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	223c      	movs	r2, #60	; 0x3c
 8002818:	2101      	movs	r1, #1
 800281a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	223d      	movs	r2, #61	; 0x3d
 8002820:	2102      	movs	r1, #2
 8002822:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4a5a      	ldr	r2, [pc, #360]	; (8002998 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4a59      	ldr	r2, [pc, #356]	; (800299c <HAL_TIM_ConfigClockSource+0x1a8>)
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0192      	lsls	r2, r2, #6
 800284c:	4293      	cmp	r3, r2
 800284e:	d040      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xde>
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	0192      	lsls	r2, r2, #6
 8002854:	4293      	cmp	r3, r2
 8002856:	d900      	bls.n	800285a <HAL_TIM_ConfigClockSource+0x66>
 8002858:	e088      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	0152      	lsls	r2, r2, #5
 800285e:	4293      	cmp	r3, r2
 8002860:	d100      	bne.n	8002864 <HAL_TIM_ConfigClockSource+0x70>
 8002862:	e088      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x182>
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	0152      	lsls	r2, r2, #5
 8002868:	4293      	cmp	r3, r2
 800286a:	d900      	bls.n	800286e <HAL_TIM_ConfigClockSource+0x7a>
 800286c:	e07e      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 800286e:	2b70      	cmp	r3, #112	; 0x70
 8002870:	d018      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0xb0>
 8002872:	d900      	bls.n	8002876 <HAL_TIM_ConfigClockSource+0x82>
 8002874:	e07a      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 8002876:	2b60      	cmp	r3, #96	; 0x60
 8002878:	d04f      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x126>
 800287a:	d900      	bls.n	800287e <HAL_TIM_ConfigClockSource+0x8a>
 800287c:	e076      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 800287e:	2b50      	cmp	r3, #80	; 0x50
 8002880:	d03b      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x106>
 8002882:	d900      	bls.n	8002886 <HAL_TIM_ConfigClockSource+0x92>
 8002884:	e072      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d057      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x146>
 800288a:	d900      	bls.n	800288e <HAL_TIM_ConfigClockSource+0x9a>
 800288c:	e06e      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 800288e:	2b30      	cmp	r3, #48	; 0x30
 8002890:	d063      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x166>
 8002892:	d86b      	bhi.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 8002894:	2b20      	cmp	r3, #32
 8002896:	d060      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x166>
 8002898:	d868      	bhi.n	800296c <HAL_TIM_ConfigClockSource+0x178>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d05d      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x166>
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d05b      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x166>
 80028a2:	e063      	b.n	800296c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	f000 fc4c 	bl	8003150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2277      	movs	r2, #119	; 0x77
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
      break;
 80028d0:	e052      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	f000 fc35 	bl	8003150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	01c9      	lsls	r1, r1, #7
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
      break;
 80028f8:	e03e      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	001a      	movs	r2, r3
 8002908:	f000 fba6 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2150      	movs	r1, #80	; 0x50
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fc00 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 8002918:	e02e      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002926:	001a      	movs	r2, r3
 8002928:	f000 fbc4 	bl	80030b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2160      	movs	r1, #96	; 0x60
 8002932:	0018      	movs	r0, r3
 8002934:	f000 fbf0 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 8002938:	e01e      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	001a      	movs	r2, r3
 8002948:	f000 fb86 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2140      	movs	r1, #64	; 0x40
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fbe0 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 8002958:	e00e      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0019      	movs	r1, r3
 8002964:	0010      	movs	r0, r2
 8002966:	f000 fbd7 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 800296a:	e005      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800296c:	230f      	movs	r3, #15
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
      break;
 8002974:	e000      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002976:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223d      	movs	r2, #61	; 0x3d
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	223c      	movs	r2, #60	; 0x3c
 8002984:	2100      	movs	r1, #0
 8002986:	5499      	strb	r1, [r3, r2]

  return status;
 8002988:	230f      	movs	r3, #15
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b004      	add	sp, #16
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	ffceff88 	.word	0xffceff88
 800299c:	ffff00ff 	.word	0xffff00ff

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3f      	ldr	r2, [pc, #252]	; (8002ab0 <TIM_Base_SetConfig+0x110>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00c      	beq.n	80029d2 <TIM_Base_SetConfig+0x32>
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	05db      	lsls	r3, r3, #23
 80029be:	429a      	cmp	r2, r3
 80029c0:	d007      	beq.n	80029d2 <TIM_Base_SetConfig+0x32>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <TIM_Base_SetConfig+0x114>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_Base_SetConfig+0x32>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <TIM_Base_SetConfig+0x118>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d108      	bne.n	80029e4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2270      	movs	r2, #112	; 0x70
 80029d6:	4393      	bics	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <TIM_Base_SetConfig+0x110>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01c      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	05db      	lsls	r3, r3, #23
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d017      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2e      	ldr	r2, [pc, #184]	; (8002ab4 <TIM_Base_SetConfig+0x114>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2d      	ldr	r2, [pc, #180]	; (8002ab8 <TIM_Base_SetConfig+0x118>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00f      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <TIM_Base_SetConfig+0x11c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <TIM_Base_SetConfig+0x120>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <TIM_Base_SetConfig+0x124>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x86>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a29      	ldr	r2, [pc, #164]	; (8002ac8 <TIM_Base_SetConfig+0x128>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a28      	ldr	r2, [pc, #160]	; (8002acc <TIM_Base_SetConfig+0x12c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	001a      	movs	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <TIM_Base_SetConfig+0x110>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0xde>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <TIM_Base_SetConfig+0x120>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0xde>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <TIM_Base_SetConfig+0x124>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0xde>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <TIM_Base_SetConfig+0x128>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d103      	bne.n	8002a86 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	611a      	str	r2, [r3, #16]
  }
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40002000 	.word	0x40002000
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800
 8002acc:	fffffcff 	.word	0xfffffcff

08002ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	001a      	movs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a32      	ldr	r2, [pc, #200]	; (8002bc8 <TIM_OC1_SetConfig+0xf8>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2203      	movs	r2, #3
 8002b06:	4393      	bics	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2202      	movs	r2, #2
 8002b18:	4393      	bics	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a28      	ldr	r2, [pc, #160]	; (8002bcc <TIM_OC1_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <TIM_OC1_SetConfig+0x76>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <TIM_OC1_SetConfig+0x100>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <TIM_OC1_SetConfig+0x76>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <TIM_OC1_SetConfig+0x104>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_OC1_SetConfig+0x76>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <TIM_OC1_SetConfig+0x108>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <TIM_OC1_SetConfig+0xfc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00b      	beq.n	8002b80 <TIM_OC1_SetConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <TIM_OC1_SetConfig+0x100>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <TIM_OC1_SetConfig+0xb0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <TIM_OC1_SetConfig+0x104>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <TIM_OC1_SetConfig+0xb0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <TIM_OC1_SetConfig+0x108>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <TIM_OC1_SetConfig+0x10c>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <TIM_OC1_SetConfig+0x110>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b006      	add	sp, #24
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	fffeff8f 	.word	0xfffeff8f
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	40014800 	.word	0x40014800
 8002bdc:	fffffeff 	.word	0xfffffeff
 8002be0:	fffffdff 	.word	0xfffffdff

08002be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <TIM_OC2_SetConfig+0xe8>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a2d      	ldr	r2, [pc, #180]	; (8002cd0 <TIM_OC2_SetConfig+0xec>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4393      	bics	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <TIM_OC2_SetConfig+0xf0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2240      	movs	r2, #64	; 0x40
 8002c5e:	4393      	bics	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <TIM_OC2_SetConfig+0xf0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_OC2_SetConfig+0x9e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <TIM_OC2_SetConfig+0xf4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <TIM_OC2_SetConfig+0x9e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <TIM_OC2_SetConfig+0xf8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_OC2_SetConfig+0x9e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <TIM_OC2_SetConfig+0xfc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d113      	bne.n	8002caa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <TIM_OC2_SetConfig+0x100>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <TIM_OC2_SetConfig+0x104>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	feff8fff 	.word	0xfeff8fff
 8002cd0:	fffffcff 	.word	0xfffffcff
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800
 8002ce4:	fffffbff 	.word	0xfffffbff
 8002ce8:	fffff7ff 	.word	0xfffff7ff

08002cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <TIM_OC3_SetConfig+0xe4>)
 8002d02:	401a      	ands	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <TIM_OC3_SetConfig+0xe8>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	4393      	bics	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <TIM_OC3_SetConfig+0xec>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <TIM_OC3_SetConfig+0xf0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10d      	bne.n	8002d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <TIM_OC3_SetConfig+0xf4>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <TIM_OC3_SetConfig+0xf8>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <TIM_OC3_SetConfig+0xf0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_OC3_SetConfig+0x9a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <TIM_OC3_SetConfig+0xfc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_OC3_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <TIM_OC3_SetConfig+0x100>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_OC3_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <TIM_OC3_SetConfig+0x104>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d113      	bne.n	8002dae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <TIM_OC3_SetConfig+0x108>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <TIM_OC3_SetConfig+0x10c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b006      	add	sp, #24
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	fffffeff 	.word	0xfffffeff
 8002dd4:	fffeff8f 	.word	0xfffeff8f
 8002dd8:	fffffdff 	.word	0xfffffdff
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	fffff7ff 	.word	0xfffff7ff
 8002de4:	fffffbff 	.word	0xfffffbff
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400
 8002df0:	40014800 	.word	0x40014800
 8002df4:	ffffefff 	.word	0xffffefff
 8002df8:	ffffdfff 	.word	0xffffdfff

08002dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <TIM_OC4_SetConfig+0xb0>)
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <TIM_OC4_SetConfig+0xb4>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <TIM_OC4_SetConfig+0xb8>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <TIM_OC4_SetConfig+0xbc>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	031b      	lsls	r3, r3, #12
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <TIM_OC4_SetConfig+0xc0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_OC4_SetConfig+0x78>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <TIM_OC4_SetConfig+0xc4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_OC4_SetConfig+0x78>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <TIM_OC4_SetConfig+0xc8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_OC4_SetConfig+0x78>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <TIM_OC4_SetConfig+0xcc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <TIM_OC4_SetConfig+0xd0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b006      	add	sp, #24
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	ffffefff 	.word	0xffffefff
 8002eb0:	feff8fff 	.word	0xfeff8fff
 8002eb4:	fffffcff 	.word	0xfffffcff
 8002eb8:	ffffdfff 	.word	0xffffdfff
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40014800 	.word	0x40014800
 8002ecc:	ffffbfff 	.word	0xffffbfff

08002ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <TIM_OC5_SetConfig+0xa4>)
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <TIM_OC5_SetConfig+0xa8>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <TIM_OC5_SetConfig+0xac>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <TIM_OC5_SetConfig+0xb0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_OC5_SetConfig+0x6e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <TIM_OC5_SetConfig+0xb4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_OC5_SetConfig+0x6e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <TIM_OC5_SetConfig+0xb8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_OC5_SetConfig+0x6e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <TIM_OC5_SetConfig+0xbc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d109      	bne.n	8002f52 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <TIM_OC5_SetConfig+0xa4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	621a      	str	r2, [r3, #32]
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b006      	add	sp, #24
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	fffeffff 	.word	0xfffeffff
 8002f78:	fffeff8f 	.word	0xfffeff8f
 8002f7c:	fffdffff 	.word	0xfffdffff
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40014800 	.word	0x40014800

08002f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <TIM_OC6_SetConfig+0xa8>)
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a20      	ldr	r2, [pc, #128]	; (800303c <TIM_OC6_SetConfig+0xac>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <TIM_OC6_SetConfig+0xb0>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	051b      	lsls	r3, r3, #20
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <TIM_OC6_SetConfig+0xb4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_OC6_SetConfig+0x70>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <TIM_OC6_SetConfig+0xb8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_OC6_SetConfig+0x70>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <TIM_OC6_SetConfig+0xbc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC6_SetConfig+0x70>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <TIM_OC6_SetConfig+0xc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4a14      	ldr	r2, [pc, #80]	; (8003054 <TIM_OC6_SetConfig+0xc4>)
 8003004:	4013      	ands	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b006      	add	sp, #24
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	ffefffff 	.word	0xffefffff
 800303c:	feff8fff 	.word	0xfeff8fff
 8003040:	ffdfffff 	.word	0xffdfffff
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40014000 	.word	0x40014000
 800304c:	40014400 	.word	0x40014400
 8003050:	40014800 	.word	0x40014800
 8003054:	fffbffff 	.word	0xfffbffff

08003058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	2201      	movs	r2, #1
 8003070:	4393      	bics	r3, r2
 8003072:	001a      	movs	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	22f0      	movs	r2, #240	; 0xf0
 8003082:	4393      	bics	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	220a      	movs	r2, #10
 8003094:	4393      	bics	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b006      	add	sp, #24
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	2210      	movs	r2, #16
 80030cc:	4393      	bics	r3, r2
 80030ce:	001a      	movs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <TIM_TI2_ConfigInputStage+0x60>)
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	031b      	lsls	r3, r3, #12
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	22a0      	movs	r2, #160	; 0xa0
 80030f0:	4393      	bics	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	621a      	str	r2, [r3, #32]
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b006      	add	sp, #24
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	ffff0fff 	.word	0xffff0fff

08003118 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <TIM_ITRx_SetConfig+0x34>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	2207      	movs	r2, #7
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	ffcfff8f 	.word	0xffcfff8f

08003150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <TIM_ETR_SetConfig+0x3c>)
 8003168:	4013      	ands	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	431a      	orrs	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4313      	orrs	r3, r2
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b006      	add	sp, #24
 800318a:	bd80      	pop	{r7, pc}
 800318c:	ffff00ff 	.word	0xffff00ff

08003190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	221f      	movs	r2, #31
 80031a0:	4013      	ands	r3, r2
 80031a2:	2201      	movs	r2, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	0013      	movs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	43d2      	mvns	r2, r2
 80031b2:	401a      	ands	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1a      	ldr	r2, [r3, #32]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	211f      	movs	r1, #31
 80031c0:	400b      	ands	r3, r1
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4099      	lsls	r1, r3
 80031c6:	000b      	movs	r3, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	621a      	str	r2, [r3, #32]
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223c      	movs	r2, #60	; 0x3c
 80031e6:	5c9b      	ldrb	r3, [r3, r2]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e05a      	b.n	80032a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	223c      	movs	r2, #60	; 0x3c
 80031f4:	2101      	movs	r1, #1
 80031f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	223d      	movs	r2, #61	; 0x3d
 80031fc:	2102      	movs	r1, #2
 80031fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d108      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800321e:	4013      	ands	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2270      	movs	r2, #112	; 0x70
 8003230:	4393      	bics	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d014      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	05db      	lsls	r3, r3, #23
 8003258:	429a      	cmp	r2, r3
 800325a:	d00e      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10c      	bne.n	8003294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	4393      	bics	r3, r2
 8003280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4313      	orrs	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	223d      	movs	r2, #61	; 0x3d
 8003298:	2101      	movs	r1, #1
 800329a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	223c      	movs	r2, #60	; 0x3c
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	ff0fffff 	.word	0xff0fffff
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40014000 	.word	0x40014000

080032c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223c      	movs	r2, #60	; 0x3c
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e06f      	b.n	80033c0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	223c      	movs	r2, #60	; 0x3c
 80032e4:	2101      	movs	r1, #1
 80032e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	4393      	bics	r3, r2
 80032ee:	001a      	movs	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80032fc:	401a      	ands	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a30      	ldr	r2, [pc, #192]	; (80033cc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800330a:	401a      	ands	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a2e      	ldr	r2, [pc, #184]	; (80033d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003318:	401a      	ands	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003326:	401a      	ands	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003334:	401a      	ands	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003342:	401a      	ands	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003350:	401a      	ands	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003360:	401a      	ands	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d11c      	bne.n	80033ae <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003378:	401a      	ands	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	051b      	lsls	r3, r3, #20
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003388:	401a      	ands	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003396:	401a      	ands	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80033a4:	401a      	ands	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223c      	movs	r2, #60	; 0x3c
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	fffffcff 	.word	0xfffffcff
 80033cc:	fffffbff 	.word	0xfffffbff
 80033d0:	fffff7ff 	.word	0xfffff7ff
 80033d4:	ffffefff 	.word	0xffffefff
 80033d8:	ffffdfff 	.word	0xffffdfff
 80033dc:	ffffbfff 	.word	0xffffbfff
 80033e0:	fff0ffff 	.word	0xfff0ffff
 80033e4:	efffffff 	.word	0xefffffff
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	ff0fffff 	.word	0xff0fffff
 80033f0:	feffffff 	.word	0xfeffffff
 80033f4:	fdffffff 	.word	0xfdffffff
 80033f8:	dfffffff 	.word	0xdfffffff

080033fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e046      	b.n	800349c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2288      	movs	r2, #136	; 0x88
 8003412:	589b      	ldr	r3, [r3, r2]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2284      	movs	r2, #132	; 0x84
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0018      	movs	r0, r3
 8003424:	f7fd fbd2 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2288      	movs	r2, #136	; 0x88
 800342c:	2124      	movs	r1, #36	; 0x24
 800342e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 fb82 	bl	8003b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 f828 	bl	80034a8 <UART_SetConfig>
 8003458:	0003      	movs	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e01c      	b.n	800349c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	490d      	ldr	r1, [pc, #52]	; (80034a4 <HAL_UART_Init+0xa8>)
 800346e:	400a      	ands	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	212a      	movs	r1, #42	; 0x2a
 800347e:	438a      	bics	r2, r1
 8003480:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 fc11 	bl	8003cbc <UART_CheckIdleState>
 800349a:	0003      	movs	r3, r0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	ffffb7ff 	.word	0xffffb7ff

080034a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b090      	sub	sp, #64	; 0x40
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b0:	231a      	movs	r3, #26
 80034b2:	2220      	movs	r2, #32
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	19db      	adds	r3, r3, r7
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4ac1      	ldr	r2, [pc, #772]	; (80037e0 <UART_SetConfig+0x338>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4abc      	ldr	r2, [pc, #752]	; (80037e4 <UART_SetConfig+0x33c>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0018      	movs	r0, r3
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	0003      	movs	r3, r0
 8003500:	430b      	orrs	r3, r1
 8003502:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4ab6      	ldr	r2, [pc, #728]	; (80037e8 <UART_SetConfig+0x340>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <UART_SetConfig+0x80>
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4ab4      	ldr	r2, [pc, #720]	; (80037ec <UART_SetConfig+0x344>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003524:	4313      	orrs	r3, r2
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4ab0      	ldr	r2, [pc, #704]	; (80037f0 <UART_SetConfig+0x348>)
 8003530:	4013      	ands	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	430b      	orrs	r3, r1
 800353c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	220f      	movs	r2, #15
 8003546:	4393      	bics	r3, r2
 8003548:	0018      	movs	r0, r3
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	0003      	movs	r3, r0
 8003554:	430b      	orrs	r3, r1
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4aa5      	ldr	r2, [pc, #660]	; (80037f4 <UART_SetConfig+0x34c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d131      	bne.n	80035c6 <UART_SetConfig+0x11e>
 8003562:	4ba5      	ldr	r3, [pc, #660]	; (80037f8 <UART_SetConfig+0x350>)
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	2203      	movs	r2, #3
 8003568:	4013      	ands	r3, r2
 800356a:	2b03      	cmp	r3, #3
 800356c:	d01d      	beq.n	80035aa <UART_SetConfig+0x102>
 800356e:	d823      	bhi.n	80035b8 <UART_SetConfig+0x110>
 8003570:	2b02      	cmp	r3, #2
 8003572:	d00c      	beq.n	800358e <UART_SetConfig+0xe6>
 8003574:	d820      	bhi.n	80035b8 <UART_SetConfig+0x110>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <UART_SetConfig+0xd8>
 800357a:	2b01      	cmp	r3, #1
 800357c:	d00e      	beq.n	800359c <UART_SetConfig+0xf4>
 800357e:	e01b      	b.n	80035b8 <UART_SetConfig+0x110>
 8003580:	231b      	movs	r3, #27
 8003582:	2220      	movs	r2, #32
 8003584:	189b      	adds	r3, r3, r2
 8003586:	19db      	adds	r3, r3, r7
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e154      	b.n	8003838 <UART_SetConfig+0x390>
 800358e:	231b      	movs	r3, #27
 8003590:	2220      	movs	r2, #32
 8003592:	189b      	adds	r3, r3, r2
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e14d      	b.n	8003838 <UART_SetConfig+0x390>
 800359c:	231b      	movs	r3, #27
 800359e:	2220      	movs	r2, #32
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	19db      	adds	r3, r3, r7
 80035a4:	2204      	movs	r2, #4
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e146      	b.n	8003838 <UART_SetConfig+0x390>
 80035aa:	231b      	movs	r3, #27
 80035ac:	2220      	movs	r2, #32
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	19db      	adds	r3, r3, r7
 80035b2:	2208      	movs	r2, #8
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e13f      	b.n	8003838 <UART_SetConfig+0x390>
 80035b8:	231b      	movs	r3, #27
 80035ba:	2220      	movs	r2, #32
 80035bc:	189b      	adds	r3, r3, r2
 80035be:	19db      	adds	r3, r3, r7
 80035c0:	2210      	movs	r2, #16
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e138      	b.n	8003838 <UART_SetConfig+0x390>
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a8c      	ldr	r2, [pc, #560]	; (80037fc <UART_SetConfig+0x354>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d131      	bne.n	8003634 <UART_SetConfig+0x18c>
 80035d0:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <UART_SetConfig+0x350>)
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	220c      	movs	r2, #12
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	d01d      	beq.n	8003618 <UART_SetConfig+0x170>
 80035dc:	d823      	bhi.n	8003626 <UART_SetConfig+0x17e>
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d00c      	beq.n	80035fc <UART_SetConfig+0x154>
 80035e2:	d820      	bhi.n	8003626 <UART_SetConfig+0x17e>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <UART_SetConfig+0x146>
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d00e      	beq.n	800360a <UART_SetConfig+0x162>
 80035ec:	e01b      	b.n	8003626 <UART_SetConfig+0x17e>
 80035ee:	231b      	movs	r3, #27
 80035f0:	2220      	movs	r2, #32
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	19db      	adds	r3, r3, r7
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e11d      	b.n	8003838 <UART_SetConfig+0x390>
 80035fc:	231b      	movs	r3, #27
 80035fe:	2220      	movs	r2, #32
 8003600:	189b      	adds	r3, r3, r2
 8003602:	19db      	adds	r3, r3, r7
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e116      	b.n	8003838 <UART_SetConfig+0x390>
 800360a:	231b      	movs	r3, #27
 800360c:	2220      	movs	r2, #32
 800360e:	189b      	adds	r3, r3, r2
 8003610:	19db      	adds	r3, r3, r7
 8003612:	2204      	movs	r2, #4
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e10f      	b.n	8003838 <UART_SetConfig+0x390>
 8003618:	231b      	movs	r3, #27
 800361a:	2220      	movs	r2, #32
 800361c:	189b      	adds	r3, r3, r2
 800361e:	19db      	adds	r3, r3, r7
 8003620:	2208      	movs	r2, #8
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e108      	b.n	8003838 <UART_SetConfig+0x390>
 8003626:	231b      	movs	r3, #27
 8003628:	2220      	movs	r2, #32
 800362a:	189b      	adds	r3, r3, r2
 800362c:	19db      	adds	r3, r3, r7
 800362e:	2210      	movs	r2, #16
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e101      	b.n	8003838 <UART_SetConfig+0x390>
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a71      	ldr	r2, [pc, #452]	; (8003800 <UART_SetConfig+0x358>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d131      	bne.n	80036a2 <UART_SetConfig+0x1fa>
 800363e:	4b6e      	ldr	r3, [pc, #440]	; (80037f8 <UART_SetConfig+0x350>)
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	2230      	movs	r2, #48	; 0x30
 8003644:	4013      	ands	r3, r2
 8003646:	2b30      	cmp	r3, #48	; 0x30
 8003648:	d01d      	beq.n	8003686 <UART_SetConfig+0x1de>
 800364a:	d823      	bhi.n	8003694 <UART_SetConfig+0x1ec>
 800364c:	2b20      	cmp	r3, #32
 800364e:	d00c      	beq.n	800366a <UART_SetConfig+0x1c2>
 8003650:	d820      	bhi.n	8003694 <UART_SetConfig+0x1ec>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <UART_SetConfig+0x1b4>
 8003656:	2b10      	cmp	r3, #16
 8003658:	d00e      	beq.n	8003678 <UART_SetConfig+0x1d0>
 800365a:	e01b      	b.n	8003694 <UART_SetConfig+0x1ec>
 800365c:	231b      	movs	r3, #27
 800365e:	2220      	movs	r2, #32
 8003660:	189b      	adds	r3, r3, r2
 8003662:	19db      	adds	r3, r3, r7
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e0e6      	b.n	8003838 <UART_SetConfig+0x390>
 800366a:	231b      	movs	r3, #27
 800366c:	2220      	movs	r2, #32
 800366e:	189b      	adds	r3, r3, r2
 8003670:	19db      	adds	r3, r3, r7
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e0df      	b.n	8003838 <UART_SetConfig+0x390>
 8003678:	231b      	movs	r3, #27
 800367a:	2220      	movs	r2, #32
 800367c:	189b      	adds	r3, r3, r2
 800367e:	19db      	adds	r3, r3, r7
 8003680:	2204      	movs	r2, #4
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e0d8      	b.n	8003838 <UART_SetConfig+0x390>
 8003686:	231b      	movs	r3, #27
 8003688:	2220      	movs	r2, #32
 800368a:	189b      	adds	r3, r3, r2
 800368c:	19db      	adds	r3, r3, r7
 800368e:	2208      	movs	r2, #8
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e0d1      	b.n	8003838 <UART_SetConfig+0x390>
 8003694:	231b      	movs	r3, #27
 8003696:	2220      	movs	r2, #32
 8003698:	189b      	adds	r3, r3, r2
 800369a:	19db      	adds	r3, r3, r7
 800369c:	2210      	movs	r2, #16
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e0ca      	b.n	8003838 <UART_SetConfig+0x390>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a57      	ldr	r2, [pc, #348]	; (8003804 <UART_SetConfig+0x35c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d106      	bne.n	80036ba <UART_SetConfig+0x212>
 80036ac:	231b      	movs	r3, #27
 80036ae:	2220      	movs	r2, #32
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	19db      	adds	r3, r3, r7
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e0be      	b.n	8003838 <UART_SetConfig+0x390>
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <UART_SetConfig+0x360>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d106      	bne.n	80036d2 <UART_SetConfig+0x22a>
 80036c4:	231b      	movs	r3, #27
 80036c6:	2220      	movs	r2, #32
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e0b2      	b.n	8003838 <UART_SetConfig+0x390>
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4d      	ldr	r2, [pc, #308]	; (800380c <UART_SetConfig+0x364>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d106      	bne.n	80036ea <UART_SetConfig+0x242>
 80036dc:	231b      	movs	r3, #27
 80036de:	2220      	movs	r2, #32
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	19db      	adds	r3, r3, r7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e0a6      	b.n	8003838 <UART_SetConfig+0x390>
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3e      	ldr	r2, [pc, #248]	; (80037e8 <UART_SetConfig+0x340>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d13e      	bne.n	8003772 <UART_SetConfig+0x2ca>
 80036f4:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <UART_SetConfig+0x350>)
 80036f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f8:	23c0      	movs	r3, #192	; 0xc0
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	22c0      	movs	r2, #192	; 0xc0
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <UART_SetConfig+0x2ae>
 8003706:	22c0      	movs	r2, #192	; 0xc0
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	4293      	cmp	r3, r2
 800370c:	d82a      	bhi.n	8003764 <UART_SetConfig+0x2bc>
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	4293      	cmp	r3, r2
 8003714:	d011      	beq.n	800373a <UART_SetConfig+0x292>
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	4293      	cmp	r3, r2
 800371c:	d822      	bhi.n	8003764 <UART_SetConfig+0x2bc>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <UART_SetConfig+0x284>
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <UART_SetConfig+0x2a0>
 800372a:	e01b      	b.n	8003764 <UART_SetConfig+0x2bc>
 800372c:	231b      	movs	r3, #27
 800372e:	2220      	movs	r2, #32
 8003730:	189b      	adds	r3, r3, r2
 8003732:	19db      	adds	r3, r3, r7
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e07e      	b.n	8003838 <UART_SetConfig+0x390>
 800373a:	231b      	movs	r3, #27
 800373c:	2220      	movs	r2, #32
 800373e:	189b      	adds	r3, r3, r2
 8003740:	19db      	adds	r3, r3, r7
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e077      	b.n	8003838 <UART_SetConfig+0x390>
 8003748:	231b      	movs	r3, #27
 800374a:	2220      	movs	r2, #32
 800374c:	189b      	adds	r3, r3, r2
 800374e:	19db      	adds	r3, r3, r7
 8003750:	2204      	movs	r2, #4
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e070      	b.n	8003838 <UART_SetConfig+0x390>
 8003756:	231b      	movs	r3, #27
 8003758:	2220      	movs	r2, #32
 800375a:	189b      	adds	r3, r3, r2
 800375c:	19db      	adds	r3, r3, r7
 800375e:	2208      	movs	r2, #8
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e069      	b.n	8003838 <UART_SetConfig+0x390>
 8003764:	231b      	movs	r3, #27
 8003766:	2220      	movs	r2, #32
 8003768:	189b      	adds	r3, r3, r2
 800376a:	19db      	adds	r3, r3, r7
 800376c:	2210      	movs	r2, #16
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e062      	b.n	8003838 <UART_SetConfig+0x390>
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <UART_SetConfig+0x344>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d157      	bne.n	800382c <UART_SetConfig+0x384>
 800377c:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <UART_SetConfig+0x350>)
 800377e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4013      	ands	r3, r2
 8003786:	22c0      	movs	r2, #192	; 0xc0
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	4293      	cmp	r3, r2
 800378c:	d040      	beq.n	8003810 <UART_SetConfig+0x368>
 800378e:	22c0      	movs	r2, #192	; 0xc0
 8003790:	0092      	lsls	r2, r2, #2
 8003792:	4293      	cmp	r3, r2
 8003794:	d843      	bhi.n	800381e <UART_SetConfig+0x376>
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4293      	cmp	r3, r2
 800379c:	d011      	beq.n	80037c2 <UART_SetConfig+0x31a>
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d83b      	bhi.n	800381e <UART_SetConfig+0x376>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <UART_SetConfig+0x30c>
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	0052      	lsls	r2, r2, #1
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <UART_SetConfig+0x328>
 80037b2:	e034      	b.n	800381e <UART_SetConfig+0x376>
 80037b4:	231b      	movs	r3, #27
 80037b6:	2220      	movs	r2, #32
 80037b8:	189b      	adds	r3, r3, r2
 80037ba:	19db      	adds	r3, r3, r7
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e03a      	b.n	8003838 <UART_SetConfig+0x390>
 80037c2:	231b      	movs	r3, #27
 80037c4:	2220      	movs	r2, #32
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	19db      	adds	r3, r3, r7
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e033      	b.n	8003838 <UART_SetConfig+0x390>
 80037d0:	231b      	movs	r3, #27
 80037d2:	2220      	movs	r2, #32
 80037d4:	189b      	adds	r3, r3, r2
 80037d6:	19db      	adds	r3, r3, r7
 80037d8:	2204      	movs	r2, #4
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e02c      	b.n	8003838 <UART_SetConfig+0x390>
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	cfff69f3 	.word	0xcfff69f3
 80037e4:	ffffcfff 	.word	0xffffcfff
 80037e8:	40008000 	.word	0x40008000
 80037ec:	40008400 	.word	0x40008400
 80037f0:	11fff4ff 	.word	0x11fff4ff
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	40013c00 	.word	0x40013c00
 8003810:	231b      	movs	r3, #27
 8003812:	2220      	movs	r2, #32
 8003814:	189b      	adds	r3, r3, r2
 8003816:	19db      	adds	r3, r3, r7
 8003818:	2208      	movs	r2, #8
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e00c      	b.n	8003838 <UART_SetConfig+0x390>
 800381e:	231b      	movs	r3, #27
 8003820:	2220      	movs	r2, #32
 8003822:	189b      	adds	r3, r3, r2
 8003824:	19db      	adds	r3, r3, r7
 8003826:	2210      	movs	r2, #16
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e005      	b.n	8003838 <UART_SetConfig+0x390>
 800382c:	231b      	movs	r3, #27
 800382e:	2220      	movs	r2, #32
 8003830:	189b      	adds	r3, r3, r2
 8003832:	19db      	adds	r3, r3, r7
 8003834:	2210      	movs	r2, #16
 8003836:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4ac1      	ldr	r2, [pc, #772]	; (8003b44 <UART_SetConfig+0x69c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d005      	beq.n	800384e <UART_SetConfig+0x3a6>
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4ac0      	ldr	r2, [pc, #768]	; (8003b48 <UART_SetConfig+0x6a0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d000      	beq.n	800384e <UART_SetConfig+0x3a6>
 800384c:	e093      	b.n	8003976 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800384e:	231b      	movs	r3, #27
 8003850:	2220      	movs	r2, #32
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d015      	beq.n	8003888 <UART_SetConfig+0x3e0>
 800385c:	dc18      	bgt.n	8003890 <UART_SetConfig+0x3e8>
 800385e:	2b04      	cmp	r3, #4
 8003860:	d00d      	beq.n	800387e <UART_SetConfig+0x3d6>
 8003862:	dc15      	bgt.n	8003890 <UART_SetConfig+0x3e8>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <UART_SetConfig+0x3c6>
 8003868:	2b02      	cmp	r3, #2
 800386a:	d005      	beq.n	8003878 <UART_SetConfig+0x3d0>
 800386c:	e010      	b.n	8003890 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386e:	f7fe fa3b 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8003872:	0003      	movs	r3, r0
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003876:	e014      	b.n	80038a2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003878:	4bb4      	ldr	r3, [pc, #720]	; (8003b4c <UART_SetConfig+0x6a4>)
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800387c:	e011      	b.n	80038a2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387e:	f7fe f9a7 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8003882:	0003      	movs	r3, r0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003886:	e00c      	b.n	80038a2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800388e:	e008      	b.n	80038a2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003894:	231a      	movs	r3, #26
 8003896:	2220      	movs	r2, #32
 8003898:	189b      	adds	r3, r3, r2
 800389a:	19db      	adds	r3, r3, r7
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
        break;
 80038a0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d100      	bne.n	80038aa <UART_SetConfig+0x402>
 80038a8:	e135      	b.n	8003b16 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ae:	4ba8      	ldr	r3, [pc, #672]	; (8003b50 <UART_SetConfig+0x6a8>)
 80038b0:	0052      	lsls	r2, r2, #1
 80038b2:	5ad3      	ldrh	r3, [r2, r3]
 80038b4:	0019      	movs	r1, r3
 80038b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038b8:	f7fc fc24 	bl	8000104 <__udivsi3>
 80038bc:	0003      	movs	r3, r0
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	0013      	movs	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	189b      	adds	r3, r3, r2
 80038ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d305      	bcc.n	80038dc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d8:	429a      	cmp	r2, r3
 80038da:	d906      	bls.n	80038ea <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80038dc:	231a      	movs	r3, #26
 80038de:	2220      	movs	r2, #32
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	19db      	adds	r3, r3, r7
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e044      	b.n	8003974 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f6:	4b96      	ldr	r3, [pc, #600]	; (8003b50 <UART_SetConfig+0x6a8>)
 80038f8:	0052      	lsls	r2, r2, #1
 80038fa:	5ad3      	ldrh	r3, [r2, r3]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	69b8      	ldr	r0, [r7, #24]
 8003908:	69f9      	ldr	r1, [r7, #28]
 800390a:	f7fc fd71 	bl	80003f0 <__aeabi_uldivmod>
 800390e:	0002      	movs	r2, r0
 8003910:	000b      	movs	r3, r1
 8003912:	0e11      	lsrs	r1, r2, #24
 8003914:	021d      	lsls	r5, r3, #8
 8003916:	430d      	orrs	r5, r1
 8003918:	0214      	lsls	r4, r2, #8
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68b8      	ldr	r0, [r7, #8]
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	1900      	adds	r0, r0, r4
 800392c:	4169      	adcs	r1, r5
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f7fc fd58 	bl	80003f0 <__aeabi_uldivmod>
 8003940:	0002      	movs	r2, r0
 8003942:	000b      	movs	r3, r1
 8003944:	0013      	movs	r3, r2
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394a:	23c0      	movs	r3, #192	; 0xc0
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	429a      	cmp	r2, r3
 8003950:	d309      	bcc.n	8003966 <UART_SetConfig+0x4be>
 8003952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	035b      	lsls	r3, r3, #13
 8003958:	429a      	cmp	r2, r3
 800395a:	d204      	bcs.n	8003966 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	e006      	b.n	8003974 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003966:	231a      	movs	r3, #26
 8003968:	2220      	movs	r2, #32
 800396a:	189b      	adds	r3, r3, r2
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003972:	e0d0      	b.n	8003b16 <UART_SetConfig+0x66e>
 8003974:	e0cf      	b.n	8003b16 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	429a      	cmp	r2, r3
 8003980:	d000      	beq.n	8003984 <UART_SetConfig+0x4dc>
 8003982:	e070      	b.n	8003a66 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003984:	231b      	movs	r3, #27
 8003986:	2220      	movs	r2, #32
 8003988:	189b      	adds	r3, r3, r2
 800398a:	19db      	adds	r3, r3, r7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d015      	beq.n	80039be <UART_SetConfig+0x516>
 8003992:	dc18      	bgt.n	80039c6 <UART_SetConfig+0x51e>
 8003994:	2b04      	cmp	r3, #4
 8003996:	d00d      	beq.n	80039b4 <UART_SetConfig+0x50c>
 8003998:	dc15      	bgt.n	80039c6 <UART_SetConfig+0x51e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <UART_SetConfig+0x4fc>
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d005      	beq.n	80039ae <UART_SetConfig+0x506>
 80039a2:	e010      	b.n	80039c6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7fe f9a0 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 80039a8:	0003      	movs	r3, r0
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039ac:	e014      	b.n	80039d8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ae:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <UART_SetConfig+0x6a4>)
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039b2:	e011      	b.n	80039d8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b4:	f7fe f90c 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 80039b8:	0003      	movs	r3, r0
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039bc:	e00c      	b.n	80039d8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039c4:	e008      	b.n	80039d8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80039ca:	231a      	movs	r3, #26
 80039cc:	2220      	movs	r2, #32
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	19db      	adds	r3, r3, r7
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
        break;
 80039d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d100      	bne.n	80039e0 <UART_SetConfig+0x538>
 80039de:	e09a      	b.n	8003b16 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e4:	4b5a      	ldr	r3, [pc, #360]	; (8003b50 <UART_SetConfig+0x6a8>)
 80039e6:	0052      	lsls	r2, r2, #1
 80039e8:	5ad3      	ldrh	r3, [r2, r3]
 80039ea:	0019      	movs	r1, r3
 80039ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ee:	f7fc fb89 	bl	8000104 <__udivsi3>
 80039f2:	0003      	movs	r3, r0
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	18d2      	adds	r2, r2, r3
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0019      	movs	r1, r3
 8003a04:	0010      	movs	r0, r2
 8003a06:	f7fc fb7d 	bl	8000104 <__udivsi3>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d921      	bls.n	8003a58 <UART_SetConfig+0x5b0>
 8003a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	025b      	lsls	r3, r3, #9
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d21c      	bcs.n	8003a58 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	200e      	movs	r0, #14
 8003a24:	2420      	movs	r4, #32
 8003a26:	1903      	adds	r3, r0, r4
 8003a28:	19db      	adds	r3, r3, r7
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2207      	movs	r2, #7
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b299      	uxth	r1, r3
 8003a3c:	1903      	adds	r3, r0, r4
 8003a3e:	19db      	adds	r3, r3, r7
 8003a40:	1902      	adds	r2, r0, r4
 8003a42:	19d2      	adds	r2, r2, r7
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1902      	adds	r2, r0, r4
 8003a50:	19d2      	adds	r2, r2, r7
 8003a52:	8812      	ldrh	r2, [r2, #0]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	e05e      	b.n	8003b16 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003a58:	231a      	movs	r3, #26
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	189b      	adds	r3, r3, r2
 8003a5e:	19db      	adds	r3, r3, r7
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e057      	b.n	8003b16 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a66:	231b      	movs	r3, #27
 8003a68:	2220      	movs	r2, #32
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	19db      	adds	r3, r3, r7
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d015      	beq.n	8003aa0 <UART_SetConfig+0x5f8>
 8003a74:	dc18      	bgt.n	8003aa8 <UART_SetConfig+0x600>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d00d      	beq.n	8003a96 <UART_SetConfig+0x5ee>
 8003a7a:	dc15      	bgt.n	8003aa8 <UART_SetConfig+0x600>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <UART_SetConfig+0x5de>
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d005      	beq.n	8003a90 <UART_SetConfig+0x5e8>
 8003a84:	e010      	b.n	8003aa8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a86:	f7fe f92f 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a8e:	e014      	b.n	8003aba <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a90:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <UART_SetConfig+0x6a4>)
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a94:	e011      	b.n	8003aba <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a96:	f7fe f89b 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a9e:	e00c      	b.n	8003aba <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aa6:	e008      	b.n	8003aba <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003aac:	231a      	movs	r3, #26
 8003aae:	2220      	movs	r2, #32
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
        break;
 8003ab8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02a      	beq.n	8003b16 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <UART_SetConfig+0x6a8>)
 8003ac6:	0052      	lsls	r2, r2, #1
 8003ac8:	5ad3      	ldrh	r3, [r2, r3]
 8003aca:	0019      	movs	r1, r3
 8003acc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ace:	f7fc fb19 	bl	8000104 <__udivsi3>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	18d2      	adds	r2, r2, r3
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	0010      	movs	r0, r2
 8003ae6:	f7fc fb0d 	bl	8000104 <__udivsi3>
 8003aea:	0003      	movs	r3, r0
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b0f      	cmp	r3, #15
 8003af2:	d90a      	bls.n	8003b0a <UART_SetConfig+0x662>
 8003af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	025b      	lsls	r3, r3, #9
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d205      	bcs.n	8003b0a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	e005      	b.n	8003b16 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0a:	231a      	movs	r3, #26
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	226a      	movs	r2, #106	; 0x6a
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2268      	movs	r2, #104	; 0x68
 8003b22:	2101      	movs	r1, #1
 8003b24:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2200      	movs	r2, #0
 8003b2a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	2200      	movs	r2, #0
 8003b30:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b32:	231a      	movs	r3, #26
 8003b34:	2220      	movs	r2, #32
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	781b      	ldrb	r3, [r3, #0]
}
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b010      	add	sp, #64	; 0x40
 8003b42:	bdb0      	pop	{r4, r5, r7, pc}
 8003b44:	40008000 	.word	0x40008000
 8003b48:	40008400 	.word	0x40008400
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	08004314 	.word	0x08004314

08003b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2208      	movs	r2, #8
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <UART_AdvFeatureConfig+0x144>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	2201      	movs	r2, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a43      	ldr	r2, [pc, #268]	; (8003c9c <UART_AdvFeatureConfig+0x148>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a3b      	ldr	r2, [pc, #236]	; (8003ca0 <UART_AdvFeatureConfig+0x14c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <UART_AdvFeatureConfig+0x150>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2210      	movs	r2, #16
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <UART_AdvFeatureConfig+0x154>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4a25      	ldr	r2, [pc, #148]	; (8003cac <UART_AdvFeatureConfig+0x158>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <UART_AdvFeatureConfig+0x15c>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	035b      	lsls	r3, r3, #13
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10b      	bne.n	8003c6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <UART_AdvFeatureConfig+0x160>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	4013      	ands	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <UART_AdvFeatureConfig+0x164>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b002      	add	sp, #8
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	ffff7fff 	.word	0xffff7fff
 8003c9c:	fffdffff 	.word	0xfffdffff
 8003ca0:	fffeffff 	.word	0xfffeffff
 8003ca4:	fffbffff 	.word	0xfffbffff
 8003ca8:	ffffefff 	.word	0xffffefff
 8003cac:	ffffdfff 	.word	0xffffdfff
 8003cb0:	ffefffff 	.word	0xffefffff
 8003cb4:	ff9fffff 	.word	0xff9fffff
 8003cb8:	fff7ffff 	.word	0xfff7ffff

08003cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b092      	sub	sp, #72	; 0x48
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2290      	movs	r2, #144	; 0x90
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ccc:	f7fd f884 	bl	8000dd8 <HAL_GetTick>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2208      	movs	r2, #8
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d12d      	bne.n	8003d3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	0391      	lsls	r1, r2, #14
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <UART_CheckIdleState+0x14c>)
 8003cec:	9200      	str	r2, [sp, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f000 f88e 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d022      	beq.n	8003d3e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d02:	2301      	movs	r3, #1
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2288      	movs	r2, #136	; 0x88
 8003d2e:	2120      	movs	r1, #32
 8003d30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2284      	movs	r2, #132	; 0x84
 8003d36:	2100      	movs	r1, #0
 8003d38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e060      	b.n	8003e00 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2204      	movs	r2, #4
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d146      	bne.n	8003dda <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	03d1      	lsls	r1, r2, #15
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <UART_CheckIdleState+0x14c>)
 8003d56:	9200      	str	r2, [sp, #0]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f000 f859 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d03b      	beq.n	8003dda <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d62:	f3ef 8310 	mrs	r3, PRIMASK
 8003d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d68:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4922      	ldr	r1, [pc, #136]	; (8003e0c <UART_CheckIdleState+0x150>)
 8003d84:	400a      	ands	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d94:	f3ef 8310 	mrs	r3, PRIMASK
 8003d98:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	438a      	bics	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	228c      	movs	r2, #140	; 0x8c
 8003dca:	2120      	movs	r1, #32
 8003dcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2284      	movs	r2, #132	; 0x84
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e012      	b.n	8003e00 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2288      	movs	r2, #136	; 0x88
 8003dde:	2120      	movs	r1, #32
 8003de0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	228c      	movs	r2, #140	; 0x8c
 8003de6:	2120      	movs	r1, #32
 8003de8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2284      	movs	r2, #132	; 0x84
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b010      	add	sp, #64	; 0x40
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	01ffffff 	.word	0x01ffffff
 8003e0c:	fffffedf 	.word	0xfffffedf

08003e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e20:	e051      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3301      	adds	r3, #1
 8003e26:	d04e      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e28:	f7fc ffd6 	bl	8000dd8 <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e051      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d038      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d035      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2208      	movs	r2, #8
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d111      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 f83c 	bl	8003ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2290      	movs	r2, #144	; 0x90
 8003e7c:	2108      	movs	r1, #8
 8003e7e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2284      	movs	r2, #132	; 0x84
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e02c      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	401a      	ands	r2, r3
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d112      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 f81f 	bl	8003ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2290      	movs	r2, #144	; 0x90
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2284      	movs	r2, #132	; 0x84
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	425a      	negs	r2, r3
 8003ed6:	4153      	adcs	r3, r2
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	001a      	movs	r2, r3
 8003edc:	1dfb      	adds	r3, r7, #7
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d09e      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b004      	add	sp, #16
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08e      	sub	sp, #56	; 0x38
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8003efc:	617b      	str	r3, [r7, #20]
  return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
 8003f02:	2301      	movs	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f383 8810 	msr	PRIMASK, r3
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4926      	ldr	r1, [pc, #152]	; (8003fb4 <UART_EndRxTransfer+0xc4>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2e:	623b      	str	r3, [r7, #32]
  return(result);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
 8003f34:	2301      	movs	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	491b      	ldr	r1, [pc, #108]	; (8003fb8 <UART_EndRxTransfer+0xc8>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d118      	bne.n	8003f96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f64:	f3ef 8310 	mrs	r3, PRIMASK
 8003f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	2301      	movs	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2110      	movs	r1, #16
 8003f86:	438a      	bics	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	228c      	movs	r2, #140	; 0x8c
 8003f9a:	2120      	movs	r1, #32
 8003f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b00e      	add	sp, #56	; 0x38
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	fffffedf 	.word	0xfffffedf
 8003fb8:	effffffe 	.word	0xeffffffe

08003fbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2284      	movs	r2, #132	; 0x84
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e027      	b.n	8004022 <HAL_UARTEx_DisableFifoMode+0x66>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2284      	movs	r2, #132	; 0x84
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2288      	movs	r2, #136	; 0x88
 8003fde:	2124      	movs	r1, #36	; 0x24
 8003fe0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	; (800402c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2288      	movs	r2, #136	; 0x88
 8004014:	2120      	movs	r1, #32
 8004016:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2284      	movs	r2, #132	; 0x84
 800401c:	2100      	movs	r1, #0
 800401e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	dfffffff 	.word	0xdfffffff

08004030 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2284      	movs	r2, #132	; 0x84
 800403e:	5c9b      	ldrb	r3, [r3, r2]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e02e      	b.n	80040a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2284      	movs	r2, #132	; 0x84
 800404c:	2101      	movs	r1, #1
 800404e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2288      	movs	r2, #136	; 0x88
 8004054:	2124      	movs	r1, #36	; 0x24
 8004056:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	438a      	bics	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	08d9      	lsrs	r1, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 f854 	bl	8004134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2288      	movs	r2, #136	; 0x88
 8004098:	2120      	movs	r1, #32
 800409a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2284      	movs	r2, #132	; 0x84
 80040a0:	2100      	movs	r1, #0
 80040a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2284      	movs	r2, #132	; 0x84
 80040be:	5c9b      	ldrb	r3, [r3, r2]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e02f      	b.n	8004128 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2284      	movs	r2, #132	; 0x84
 80040cc:	2101      	movs	r1, #1
 80040ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2288      	movs	r2, #136	; 0x88
 80040d4:	2124      	movs	r1, #36	; 0x24
 80040d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	0019      	movs	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f000 f813 	bl	8004134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2288      	movs	r2, #136	; 0x88
 800411a:	2120      	movs	r1, #32
 800411c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2284      	movs	r2, #132	; 0x84
 8004122:	2100      	movs	r1, #0
 8004124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b004      	add	sp, #16
 800412e:	bd80      	pop	{r7, pc}
 8004130:	f1ffffff 	.word	0xf1ffffff

08004134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	226a      	movs	r2, #106	; 0x6a
 8004148:	2101      	movs	r1, #1
 800414a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2268      	movs	r2, #104	; 0x68
 8004150:	2101      	movs	r1, #1
 8004152:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004154:	e043      	b.n	80041de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004156:	260f      	movs	r6, #15
 8004158:	19bb      	adds	r3, r7, r6
 800415a:	2208      	movs	r2, #8
 800415c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800415e:	200e      	movs	r0, #14
 8004160:	183b      	adds	r3, r7, r0
 8004162:	2208      	movs	r2, #8
 8004164:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	0e5b      	lsrs	r3, r3, #25
 800416e:	b2da      	uxtb	r2, r3
 8004170:	240d      	movs	r4, #13
 8004172:	193b      	adds	r3, r7, r4
 8004174:	2107      	movs	r1, #7
 8004176:	400a      	ands	r2, r1
 8004178:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	0f5b      	lsrs	r3, r3, #29
 8004182:	b2da      	uxtb	r2, r3
 8004184:	250c      	movs	r5, #12
 8004186:	197b      	adds	r3, r7, r5
 8004188:	2107      	movs	r1, #7
 800418a:	400a      	ands	r2, r1
 800418c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800418e:	183b      	adds	r3, r7, r0
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	197a      	adds	r2, r7, r5
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	4914      	ldr	r1, [pc, #80]	; (80041e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004198:	5c8a      	ldrb	r2, [r1, r2]
 800419a:	435a      	muls	r2, r3
 800419c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800419e:	197b      	adds	r3, r7, r5
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <UARTEx_SetNbDataToProcess+0xb8>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041a6:	0019      	movs	r1, r3
 80041a8:	f7fc f836 	bl	8000218 <__divsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	b299      	uxth	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	226a      	movs	r2, #106	; 0x6a
 80041b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041b6:	19bb      	adds	r3, r7, r6
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	193a      	adds	r2, r7, r4
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	490a      	ldr	r1, [pc, #40]	; (80041e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80041c0:	5c8a      	ldrb	r2, [r1, r2]
 80041c2:	435a      	muls	r2, r3
 80041c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <UARTEx_SetNbDataToProcess+0xb8>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041ce:	0019      	movs	r1, r3
 80041d0:	f7fc f822 	bl	8000218 <__divsi3>
 80041d4:	0003      	movs	r3, r0
 80041d6:	b299      	uxth	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2268      	movs	r2, #104	; 0x68
 80041dc:	5299      	strh	r1, [r3, r2]
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b005      	add	sp, #20
 80041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	0800432c 	.word	0x0800432c
 80041ec:	08004334 	.word	0x08004334

080041f0 <memset>:
 80041f0:	0003      	movs	r3, r0
 80041f2:	1882      	adds	r2, r0, r2
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	7019      	strb	r1, [r3, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2600      	movs	r6, #0
 8004204:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x38>)
 8004206:	4d0d      	ldr	r5, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	2600      	movs	r6, #0
 8004212:	f000 f819 	bl	8004248 <_init>
 8004216:	4c0a      	ldr	r4, [pc, #40]	; (8004240 <__libc_init_array+0x40>)
 8004218:	4d0a      	ldr	r5, [pc, #40]	; (8004244 <__libc_init_array+0x44>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	00b3      	lsls	r3, r6, #2
 8004226:	58eb      	ldr	r3, [r5, r3]
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	00b3      	lsls	r3, r6, #2
 8004230:	58eb      	ldr	r3, [r5, r3]
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	08004344 	.word	0x08004344
 800423c:	08004344 	.word	0x08004344
 8004240:	08004348 	.word	0x08004348
 8004244:	08004344 	.word	0x08004344

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
