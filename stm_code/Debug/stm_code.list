
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f0  080048f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080048f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08004954  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004954  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112a3  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000286b  00000000  00000000  0003136a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfe  00000000  00000000  00034b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001da9b  00000000  00000000  00035736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d34  00000000  00000000  000531d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbeac  00000000  00000000  00066f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039b8  00000000  00000000  00122db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012676c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047cc 	.word	0x080047cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080047cc 	.word	0x080047cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8d8 	bl	8000604 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8d3 	bl	8000604 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzsi2>:
 80005c8:	211c      	movs	r1, #28
 80005ca:	2301      	movs	r3, #1
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	4298      	cmp	r0, r3
 80005d0:	d301      	bcc.n	80005d6 <__clzsi2+0xe>
 80005d2:	0c00      	lsrs	r0, r0, #16
 80005d4:	3910      	subs	r1, #16
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	4298      	cmp	r0, r3
 80005da:	d301      	bcc.n	80005e0 <__clzsi2+0x18>
 80005dc:	0a00      	lsrs	r0, r0, #8
 80005de:	3908      	subs	r1, #8
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0x22>
 80005e6:	0900      	lsrs	r0, r0, #4
 80005e8:	3904      	subs	r1, #4
 80005ea:	a202      	add	r2, pc, #8	; (adr r2, 80005f4 <__clzsi2+0x2c>)
 80005ec:	5c10      	ldrb	r0, [r2, r0]
 80005ee:	1840      	adds	r0, r0, r1
 80005f0:	4770      	bx	lr
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	02020304 	.word	0x02020304
 80005f8:	01010101 	.word	0x01010101
	...

08000604 <__clzdi2>:
 8000604:	b510      	push	{r4, lr}
 8000606:	2900      	cmp	r1, #0
 8000608:	d103      	bne.n	8000612 <__clzdi2+0xe>
 800060a:	f7ff ffdd 	bl	80005c8 <__clzsi2>
 800060e:	3020      	adds	r0, #32
 8000610:	e002      	b.n	8000618 <__clzdi2+0x14>
 8000612:	0008      	movs	r0, r1
 8000614:	f7ff ffd8 	bl	80005c8 <__clzsi2>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <MC74HCT595A_init>:
// Will point to our light patterns. A byte is an 8-bit BINARY variable to match the 8 lights
uint8_t * registerPatterns;

void clearRegisters();
numbers_t segments[10];
void MC74HCT595A_init(){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
    registerPatterns = malloc(REGISTERS * sizeof(uint8_t));
 8000622:	2002      	movs	r0, #2
 8000624:	f003 ffce 	bl	80045c4 <malloc>
 8000628:	0003      	movs	r3, r0
 800062a:	001a      	movs	r2, r3
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MC74HCT595A_init+0x100>)
 800062e:	601a      	str	r2, [r3, #0]
    registerPatterns[0] = 5;
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <MC74HCT595A_init+0x100>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2205      	movs	r2, #5
 8000636:	701a      	strb	r2, [r3, #0]
    registerPatterns[1] = 6;
 8000638:	4b38      	ldr	r3, [pc, #224]	; (800071c <MC74HCT595A_init+0x100>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	2206      	movs	r2, #6
 8000640:	701a      	strb	r2, [r3, #0]
    for(size_t i = 0; i < 10; i++){
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	e061      	b.n	800070c <MC74HCT595A_init+0xf0>
        segments[i].number = i;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <MC74HCT595A_init+0x104>)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	0052      	lsls	r2, r2, #1
 8000652:	54d1      	strb	r1, [r2, r3]
        switch (i){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b09      	cmp	r3, #9
 8000658:	d855      	bhi.n	8000706 <MC74HCT595A_init+0xea>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	009a      	lsls	r2, r3, #2
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MC74HCT595A_init+0x108>)
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	469f      	mov	pc, r3
        case 0:
            segments[i].segments = 255 & (1 << SEG_G);
 8000666:	4a2e      	ldr	r2, [pc, #184]	; (8000720 <MC74HCT595A_init+0x104>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	18d3      	adds	r3, r2, r3
 800066e:	3301      	adds	r3, #1
 8000670:	2202      	movs	r2, #2
 8000672:	701a      	strb	r2, [r3, #0]
            break;
 8000674:	e047      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 1:
            segments[i].segments =255 & ~((1 << SEG_B) | (1 << SEG_C));
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <MC74HCT595A_init+0x104>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	3301      	adds	r3, #1
 8000680:	229f      	movs	r2, #159	; 0x9f
 8000682:	701a      	strb	r2, [r3, #0]
            break;
 8000684:	e03f      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 2:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_E) | (1 << SEG_D));
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <MC74HCT595A_init+0x104>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	3301      	adds	r3, #1
 8000690:	2225      	movs	r2, #37	; 0x25
 8000692:	701a      	strb	r2, [r3, #0]
            break;
 8000694:	e037      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 3:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D));
 8000696:	4a22      	ldr	r2, [pc, #136]	; (8000720 <MC74HCT595A_init+0x104>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	18d3      	adds	r3, r2, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	220d      	movs	r2, #13
 80006a2:	701a      	strb	r2, [r3, #0]
            break;
 80006a4:	e02f      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 4:
            segments[i].segments = 255 & ~ ((1 << SEG_F) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C));
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MC74HCT595A_init+0x104>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	3301      	adds	r3, #1
 80006b0:	2299      	movs	r2, #153	; 0x99
 80006b2:	701a      	strb	r2, [r3, #0]
            break;
 80006b4:	e027      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 5:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_F) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D));
 80006b6:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <MC74HCT595A_init+0x104>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	18d3      	adds	r3, r2, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	2249      	movs	r2, #73	; 0x49
 80006c2:	701a      	strb	r2, [r3, #0]
            break;
 80006c4:	e01f      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 6:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_F) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D) | (1 << SEG_E));
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <MC74HCT595A_init+0x104>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	18d3      	adds	r3, r2, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	2241      	movs	r2, #65	; 0x41
 80006d2:	701a      	strb	r2, [r3, #0]
            break;
 80006d4:	e017      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 7:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_C));
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MC74HCT595A_init+0x104>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	3301      	adds	r3, #1
 80006e0:	221f      	movs	r2, #31
 80006e2:	701a      	strb	r2, [r3, #0]
            break;
 80006e4:	e00f      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 8:
            segments[i].segments = 0;
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <MC74HCT595A_init+0x104>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
            break;
 80006f4:	e007      	b.n	8000706 <MC74HCT595A_init+0xea>
        case 9:
            segments[i].segments = 255 & ~ ((1 << SEG_A) | (1 << SEG_B) | (1 << SEG_G) | (1 << SEG_C) | (1 << SEG_D) | (1 << SEG_F));
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <MC74HCT595A_init+0x104>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	3301      	adds	r3, #1
 8000700:	2209      	movs	r2, #9
 8000702:	701a      	strb	r2, [r3, #0]
            break;
 8000704:	46c0      	nop			; (mov r8, r8)
    for(size_t i = 0; i < 10; i++){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d99a      	bls.n	8000648 <MC74HCT595A_init+0x2c>
        }
    }
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000078 	.word	0x20000078
 8000720:	2000007c 	.word	0x2000007c
 8000724:	080047e4 	.word	0x080047e4

08000728 <calc_segments>:
            else
                *pattern &= ~(1 << q); 
        }
    }
}
uint8_t calc_segments(uint8_t data){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]
    uint8_t result = 0;
 8000734:	200f      	movs	r0, #15
 8000736:	183b      	adds	r3, r7, r0
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
    result = segments[data].segments;
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	183b      	adds	r3, r7, r0
 8000742:	4906      	ldr	r1, [pc, #24]	; (800075c <calc_segments+0x34>)
 8000744:	0052      	lsls	r2, r2, #1
 8000746:	188a      	adds	r2, r1, r2
 8000748:	3201      	adds	r2, #1
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	701a      	strb	r2, [r3, #0]
    return result;
 800074e:	183b      	adds	r3, r7, r0
 8000750:	781b      	ldrb	r3, [r3, #0]
}
 8000752:	0018      	movs	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	b004      	add	sp, #16
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	2000007c 	.word	0x2000007c

08000760 <MC74HCT595A_shiftOut>:
void MC74HCT595A_shiftOut(uint16_t data){
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	801a      	strh	r2, [r3, #0]
	//clock PA8
	//LATch PB5
	//data pa9
    uint8_t temp; 
    uint16_t segm = 0;
 800076c:	230e      	movs	r3, #14
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
 
    uint16_t printofka;
    for(int i = 0;i<4;i++){
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e080      	b.n	800087c <MC74HCT595A_shiftOut+0x11c>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <MC74HCT595A_shiftOut+0x130>)
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	0018      	movs	r0, r3
 8000782:	f000 ffae 	bl	80016e2 <HAL_GPIO_WritePin>
       temp  = calc_segments(data%10);
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	210a      	movs	r1, #10
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fd3f 	bl	8000210 <__aeabi_uidivmod>
 8000792:	000b      	movs	r3, r1
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	250d      	movs	r5, #13
 800079a:	197c      	adds	r4, r7, r5
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff ffc3 	bl	8000728 <calc_segments>
 80007a2:	0003      	movs	r3, r0
 80007a4:	7023      	strb	r3, [r4, #0]
       data = data/10;
 80007a6:	1dbc      	adds	r4, r7, #6
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	210a      	movs	r1, #10
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fca8 	bl	8000104 <__udivsi3>
 80007b4:	0003      	movs	r3, r0
 80007b6:	8023      	strh	r3, [r4, #0]
		segm = (1 << SEG_4+i);
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	330c      	adds	r3, #12
 80007bc:	2201      	movs	r2, #1
 80007be:	409a      	lsls	r2, r3
 80007c0:	240e      	movs	r4, #14
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	801a      	strh	r2, [r3, #0]
       printofka = segm | temp;
 80007c6:	197b      	adds	r3, r7, r5
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b299      	uxth	r1, r3
 80007cc:	200a      	movs	r0, #10
 80007ce:	183b      	adds	r3, r7, r0
 80007d0:	193a      	adds	r2, r7, r4
 80007d2:	8812      	ldrh	r2, [r2, #0]
 80007d4:	430a      	orrs	r2, r1
 80007d6:	801a      	strh	r2, [r3, #0]
       printofka |= 0b1;
 80007d8:	183b      	adds	r3, r7, r0
 80007da:	183a      	adds	r2, r7, r0
 80007dc:	8812      	ldrh	r2, [r2, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	430a      	orrs	r2, r1
 80007e2:	801a      	strh	r2, [r3, #0]
        for(int j = 0;j<16;j++){
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e03c      	b.n	8000864 <MC74HCT595A_shiftOut+0x104>
            if(printofka & (1 << j)){
 80007ea:	230a      	movs	r3, #10
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	411a      	asrs	r2, r3
 80007f4:	0013      	movs	r3, r2
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	d018      	beq.n	800082e <MC74HCT595A_shiftOut+0xce>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	009a      	lsls	r2, r3, #2
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f000 ff88 	bl	800171c <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	005a      	lsls	r2, r3, #1
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f000 ff80 	bl	800171c <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	009a      	lsls	r2, r3, #2
 8000820:	23a0      	movs	r3, #160	; 0xa0
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 ff78 	bl	800171c <HAL_GPIO_TogglePin>
 800082c:	e00f      	b.n	800084e <MC74HCT595A_shiftOut+0xee>
            }
            else{
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	005a      	lsls	r2, r3, #1
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 ff6f 	bl	800171c <HAL_GPIO_TogglePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	0099      	lsls	r1, r3, #2
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2200      	movs	r2, #0
 8000848:	0018      	movs	r0, r3
 800084a:	f000 ff4a 	bl	80016e2 <HAL_GPIO_WritePin>
            }
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	005a      	lsls	r2, r3, #1
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f000 ff5f 	bl	800171c <HAL_GPIO_TogglePin>
        for(int j = 0;j<16;j++){
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	3301      	adds	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	2b0f      	cmp	r3, #15
 8000868:	ddbf      	ble.n	80007ea <MC74HCT595A_shiftOut+0x8a>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MC74HCT595A_shiftOut+0x130>)
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	0018      	movs	r0, r3
 8000872:	f000 ff36 	bl	80016e2 <HAL_GPIO_WritePin>
    for(int i = 0;i<4;i++){
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2b03      	cmp	r3, #3
 8000880:	dc00      	bgt.n	8000884 <MC74HCT595A_shiftOut+0x124>
 8000882:	e77a      	b.n	800077a <MC74HCT595A_shiftOut+0x1a>
	}
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bdb0      	pop	{r4, r5, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	50000400 	.word	0x50000400

08000894 <writeToRegisters>:

void writeToRegisters(uint16_t freq) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	801a      	strh	r2, [r3, #0]

  // Lock the registers to ready them to be written
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <writeToRegisters+0x38>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 ff1b 	bl	80016e2 <HAL_GPIO_WritePin>
    MC74HCT595A_shiftOut(freq);
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff55 	bl	8000760 <MC74HCT595A_shiftOut>
  // Go through each of our stored patterns and write them back to the registers in order
  
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <writeToRegisters+0x38>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	2120      	movs	r1, #32
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 ff10 	bl	80016e2 <HAL_GPIO_WritePin>
  // Unlock the registers
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	50000400 	.word	0x50000400

080008d0 <buzzer_freq>:
	TIM1->CCR2 = arr/amp;//1150;  //duty cycle
	TIM1->ARR = arr;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

}
void buzzer_freq(int freq) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	int arr = 1000000/freq;   //ARR diveder
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <buzzer_freq+0x3c>)
 80008dc:	f7ff fc9c 	bl	8000218 <__divsi3>
 80008e0:	0003      	movs	r3, r0
 80008e2:	60fb      	str	r3, [r7, #12]
//	TIM1->CCR1 = 1000;
	TIM1->CCR2 = arr/2;//1150;  //duty cycle
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da00      	bge.n	80008ec <buzzer_freq+0x1c>
 80008ea:	3301      	adds	r3, #1
 80008ec:	105b      	asrs	r3, r3, #1
 80008ee:	001a      	movs	r2, r3
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <buzzer_freq+0x40>)
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->ARR = arr;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <buzzer_freq+0x40>)
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <buzzer_freq+0x44>)
 80008fc:	2104      	movs	r1, #4
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 ff72 	bl	80027e8 <HAL_TIM_PWM_Start>

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b004      	add	sp, #16
 800090a:	bd80      	pop	{r7, pc}
 800090c:	000f4240 	.word	0x000f4240
 8000910:	40012c00 	.word	0x40012c00
 8000914:	20000094 	.word	0x20000094

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	2414      	movs	r4, #20
 8000920:	193b      	adds	r3, r7, r4
 8000922:	0018      	movs	r0, r3
 8000924:	2314      	movs	r3, #20
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f003 ff09 	bl	8004740 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000934:	2104      	movs	r1, #4
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <MX_GPIO_Init+0x150>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2204      	movs	r2, #4
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <MX_GPIO_Init+0x150>)
 800094c:	2120      	movs	r1, #32
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2220      	movs	r2, #32
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000964:	2101      	movs	r1, #1
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <MX_GPIO_Init+0x150>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2201      	movs	r2, #1
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b3c      	ldr	r3, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097a:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <MX_GPIO_Init+0x150>)
 800097c:	2102      	movs	r1, #2
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2202      	movs	r2, #2
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_8|DataOut_Pin, GPIO_PIN_RESET);
 800098e:	23c8      	movs	r3, #200	; 0xc8
 8000990:	0099      	lsls	r1, r3, #2
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2200      	movs	r2, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fea2 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800099e:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x154>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fe9c 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2212      	movs	r2, #18
 80009ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2201      	movs	r2, #1
 80009ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	193a      	adds	r2, r7, r4
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fd03 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2220      	movs	r2, #32
 80009ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2201      	movs	r2, #1
 80009d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2202      	movs	r2, #2
 80009e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009e2:	193a      	adds	r2, r7, r4
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fcf0 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2201      	movs	r2, #1
 8000a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <MX_GPIO_Init+0x154>)
 8000a06:	0019      	movs	r1, r3
 8000a08:	0010      	movs	r0, r2
 8000a0a:	f000 fce1 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|DataOut_Pin;
 8000a0e:	0021      	movs	r1, r4
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	22c0      	movs	r2, #192	; 0xc0
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	000c      	movs	r4, r1
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	193a      	adds	r2, r7, r4
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fccb 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2220      	movs	r2, #32
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x154>)
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0010      	movs	r0, r2
 8000a5c:	f000 fcb8 	bl	80013d0 <HAL_GPIO_Init>

}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b00b      	add	sp, #44	; 0x2c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	50000400 	.word	0x50000400

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fb71 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f891 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f7ff ff4b 	bl	8000918 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a82:	f000 fa93 	bl	8000fac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a86:	f000 f951 	bl	8000d2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MC74HCT595A_init();
 8000a8a:	f7ff fdc7 	bl	800061c <MC74HCT595A_init>
//  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
//  uint8_t Rx_data[100] = {0};  //  creating a buffer of 10 bytes
//  uint8_t Tx_data[100] = {0};
//  	  bool start_read = false;
//   buzzer_stop();
    uint16_t freq = 0;
 8000a8e:	1dbb      	adds	r3, r7, #6
 8000a90:	2200      	movs	r2, #0
 8000a92:	801a      	strh	r2, [r3, #0]
    bool button_pressed = false;
 8000a94:	1d7b      	adds	r3, r7, #5
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if(freq>=10000)
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	4a3e      	ldr	r2, [pc, #248]	; (8000b98 <main+0x128>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d904      	bls.n	8000aae <main+0x3e>
        writeToRegisters(9999);
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <main+0x128>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fef4 	bl	8000894 <writeToRegisters>
 8000aac:	e004      	b.n	8000ab8 <main+0x48>
    else
        writeToRegisters(freq);
 8000aae:	1dbb      	adds	r3, r7, #6
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff feee 	bl	8000894 <writeToRegisters>
    if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){
 8000ab8:	23a0      	movs	r3, #160	; 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2102      	movs	r1, #2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fdf2 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d119      	bne.n	8000afc <main+0x8c>
        if(freq<10000 && !button_pressed)
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <main+0x128>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d80b      	bhi.n	8000aea <main+0x7a>
 8000ad2:	1d7b      	adds	r3, r7, #5
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4053      	eors	r3, r2
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d004      	beq.n	8000aea <main+0x7a>
            freq+=100;
 8000ae0:	1dbb      	adds	r3, r7, #6
 8000ae2:	1dba      	adds	r2, r7, #6
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	3264      	adds	r2, #100	; 0x64
 8000ae8:	801a      	strh	r2, [r3, #0]
        button_pressed = true;
 8000aea:	1d7b      	adds	r3, r7, #5
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
         buzzer_freq(freq);
 8000af0:	1dbb      	adds	r3, r7, #6
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff feeb 	bl	80008d0 <buzzer_freq>
 8000afa:	e030      	b.n	8000b5e <main+0xee>
	}else if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)){
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	2110      	movs	r1, #16
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fdd0 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d118      	bne.n	8000b3e <main+0xce>
        if(freq>0 && !button_pressed)
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00b      	beq.n	8000b2c <main+0xbc>
 8000b14:	1d7b      	adds	r3, r7, #5
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4053      	eors	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d004      	beq.n	8000b2c <main+0xbc>
            freq-=100;
 8000b22:	1dbb      	adds	r3, r7, #6
 8000b24:	1dba      	adds	r2, r7, #6
 8000b26:	8812      	ldrh	r2, [r2, #0]
 8000b28:	3a64      	subs	r2, #100	; 0x64
 8000b2a:	801a      	strh	r2, [r3, #0]
		button_pressed = true;
 8000b2c:	1d7b      	adds	r3, r7, #5
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
         buzzer_freq(freq);
 8000b32:	1dbb      	adds	r3, r7, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff feca 	bl	80008d0 <buzzer_freq>
 8000b3c:	e00f      	b.n	8000b5e <main+0xee>
	}else if(!HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <main+0x12c>)
 8000b40:	2102      	movs	r1, #2
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fdb0 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d105      	bne.n	8000b58 <main+0xe8>
   
         buzzer_freq(1000);
 8000b4c:	23fa      	movs	r3, #250	; 0xfa
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff febd 	bl	80008d0 <buzzer_freq>
 8000b56:	e002      	b.n	8000b5e <main+0xee>
	}else{
		buzzer_freq(0);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff feb9 	bl	80008d0 <buzzer_freq>
	}
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) && HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4) && HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2102      	movs	r1, #2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fd9f 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d095      	beq.n	8000a9a <main+0x2a>
 8000b6e:	23a0      	movs	r3, #160	; 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	2110      	movs	r1, #16
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fd97 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d08d      	beq.n	8000a9a <main+0x2a>
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <main+0x12c>)
 8000b80:	2102      	movs	r1, #2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fd90 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d100      	bne.n	8000b8e <main+0x11e>
 8000b8c:	e785      	b.n	8000a9a <main+0x2a>
        button_pressed = false;
 8000b8e:	1d7b      	adds	r3, r7, #5
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
    if(freq>=10000)
 8000b94:	e781      	b.n	8000a9a <main+0x2a>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	0000270f 	.word	0x0000270f
 8000b9c:	50000400 	.word	0x50000400

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b095      	sub	sp, #84	; 0x54
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	2414      	movs	r4, #20
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	233c      	movs	r3, #60	; 0x3c
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f003 fdc5 	bl	8004740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2310      	movs	r3, #16
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f003 fdbe 	bl	8004740 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fdc3 	bl	8001754 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2240      	movs	r2, #64	; 0x40
 8000be6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fdfb 	bl	80017ec <HAL_RCC_OscConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bfa:	f000 f819 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2100      	movs	r1, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 f946 	bl	8001eac <HAL_RCC_ClockConfig>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c24:	f000 f804 	bl	8000c30 <Error_Handler>
  }
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b015      	add	sp, #84	; 0x54
 8000c2e:	bd90      	pop	{r4, r7, pc}

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2201      	movs	r2, #1
 8000c54:	4013      	ands	r3, r2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	0549      	lsls	r1, r1, #21
 8000c64:	430a      	orrs	r2, r1
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_MspInit+0x44>)
 8000c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	055b      	lsls	r3, r3, #21
 8000c70:	4013      	ands	r3, r2
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40021000 	.word	0x40021000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 fac2 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f003 fd46 	bl	8004774 <__errno>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	18d2      	adds	r2, r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20024000 	.word	0x20024000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	20000090 	.word	0x20000090
 8000d1c:	200002c0 	.word	0x200002c0

08000d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09c      	sub	sp, #112	; 0x70
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	2360      	movs	r3, #96	; 0x60
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	0018      	movs	r0, r3
 8000d38:	2310      	movs	r3, #16
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f003 fcff 	bl	8004740 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d42:	2354      	movs	r3, #84	; 0x54
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	0018      	movs	r0, r3
 8000d48:	230c      	movs	r3, #12
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f003 fcf7 	bl	8004740 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	2338      	movs	r3, #56	; 0x38
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	231c      	movs	r3, #28
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f003 fcef 	bl	8004740 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	2334      	movs	r3, #52	; 0x34
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 fce8 	bl	8004740 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d72:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <MX_TIM1_Init+0x190>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000d76:	4b50      	ldr	r3, [pc, #320]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d78:	220f      	movs	r2, #15
 8000d7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d84:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <MX_TIM1_Init+0x194>)
 8000d86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f001 fc6b 	bl	8002678 <HAL_TIM_Base_Init>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000da6:	f7ff ff43 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	2160      	movs	r1, #96	; 0x60
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	0152      	lsls	r2, r2, #5
 8000db2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db4:	187a      	adds	r2, r7, r1
 8000db6:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 ff04 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000dc4:	f7ff ff34 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 fcac 	bl	8002728 <HAL_TIM_PWM_Init>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000dd4:	f7ff ff2c 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2154      	movs	r1, #84	; 0x54
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dec:	187a      	adds	r2, r7, r1
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f002 fbda 	bl	80035ac <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000dfc:	f7ff ff18 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2138      	movs	r1, #56	; 0x38
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2260      	movs	r2, #96	; 0x60
 8000e06:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fdc8 	bl	80029c8 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000e3c:	f7ff fef8 	bl	8000c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0192      	lsls	r2, r2, #6
 8000e64:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	0492      	lsls	r2, r2, #18
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e92:	1d3a      	adds	r2, r7, #4
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 fbfd 	bl	8003698 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000ea2:	f7ff fec5 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <MX_TIM1_Init+0x18c>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 f841 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b01c      	add	sp, #112	; 0x70
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000094 	.word	0x20000094
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	00002710 	.word	0x00002710

08000ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b097      	sub	sp, #92	; 0x5c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	240c      	movs	r4, #12
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	234c      	movs	r3, #76	; 0x4c
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f003 fc32 	bl	8004740 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <HAL_TIM_Base_MspInit+0x64>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d11c      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0392      	lsls	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 f982 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000f00:	f7ff fe96 	bl	8000c30 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x68>)
 8000f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_TIM_Base_MspInit+0x68>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	0109      	lsls	r1, r1, #4
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_TIM_Base_MspInit+0x68>)
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b017      	add	sp, #92	; 0x5c
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	240c      	movs	r4, #12
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2314      	movs	r3, #20
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f003 fbfc 	bl	8004740 <memset>
  if(timHandle->Instance==TIM1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_TIM_MspPostInit+0x70>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d121      	bne.n	8000f96 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_TIM_MspPostInit+0x74>)
 8000f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_TIM_MspPostInit+0x74>)
 8000f58:	2102      	movs	r1, #2
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_TIM_MspPostInit+0x74>)
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f6a:	0021      	movs	r1, r4
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2208      	movs	r2, #8
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_TIM_MspPostInit+0x78>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f000 fa1d 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b009      	add	sp, #36	; 0x24
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40012c00 	.word	0x40012c00
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	50000400 	.word	0x50000400

08000fac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <MX_USART2_UART_Init+0x98>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fb8:	22e1      	movs	r2, #225	; 0xe1
 8000fba:	0252      	lsls	r2, r2, #9
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f002 fbea 	bl	80037d0 <HAL_UART_Init>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001000:	f7ff fe16 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f003 f9fb 	bl	8004404 <HAL_UARTEx_SetTxFifoThreshold>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001012:	f7ff fe0d 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_USART2_UART_Init+0x94>)
 8001018:	2100      	movs	r1, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f003 fa32 	bl	8004484 <HAL_UARTEx_SetRxFifoThreshold>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001024:	f7ff fe04 	bl	8000c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x94>)
 800102a:	0018      	movs	r0, r3
 800102c:	f003 f9b0 	bl	8004390 <HAL_UARTEx_DisableFifoMode>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001034:	f7ff fdfc 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	200000e0 	.word	0x200000e0
 8001044:	40004400 	.word	0x40004400

08001048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b09d      	sub	sp, #116	; 0x74
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	235c      	movs	r3, #92	; 0x5c
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	0018      	movs	r0, r3
 8001056:	2314      	movs	r3, #20
 8001058:	001a      	movs	r2, r3
 800105a:	2100      	movs	r1, #0
 800105c:	f003 fb70 	bl	8004740 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	2410      	movs	r4, #16
 8001062:	193b      	adds	r3, r7, r4
 8001064:	0018      	movs	r0, r3
 8001066:	234c      	movs	r3, #76	; 0x4c
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f003 fb68 	bl	8004740 <memset>
  if(uartHandle->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_UART_MspInit+0xb8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d13e      	bne.n	80010f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2202      	movs	r2, #2
 800107e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001080:	193b      	adds	r3, r7, r4
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	193b      	adds	r3, r7, r4
 8001088:	0018      	movs	r0, r3
 800108a:	f001 f8b9 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001092:	f7ff fdcd 	bl	8000c30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_UART_MspInit+0xbc>)
 8001098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_UART_MspInit+0xbc>)
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0289      	lsls	r1, r1, #10
 80010a0:	430a      	orrs	r2, r1
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xbc>)
 80010a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	029b      	lsls	r3, r3, #10
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_UART_MspInit+0xbc>)
 80010b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_UART_MspInit+0xbc>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0xbc>)
 80010c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010ca:	215c      	movs	r1, #92	; 0x5c
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2202      	movs	r2, #2
 80010d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2201      	movs	r2, #1
 80010e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	187a      	adds	r2, r7, r1
 80010ec:	23a0      	movs	r3, #160	; 0xa0
 80010ee:	05db      	lsls	r3, r3, #23
 80010f0:	0011      	movs	r1, r2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 f96c 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b01d      	add	sp, #116	; 0x74
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	40004400 	.word	0x40004400
 8001104:	40021000 	.word	0x40021000

08001108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800110c:	f7ff fe08 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001136:	f003 fb23 	bl	8004780 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800113a:	f7ff fc99 	bl	8000a70 <main>

0800113e <LoopForever>:

LoopForever:
  b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800114c:	080048f8 	.word	0x080048f8
  ldr r2, =_sbss
 8001150:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001154:	200002c0 	.word	0x200002c0

08001158 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_COMP_IRQHandler>
	...

0800115c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x3c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Init+0x3c>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	0049      	lsls	r1, r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f810 	bl	800119c <HAL_InitTick>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d003      	beq.n	8001188 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e001      	b.n	800118c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fd58 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_InitTick+0x88>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02b      	beq.n	800120c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_InitTick+0x8c>)
 80011b6:	681c      	ldr	r4, [r3, #0]
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_InitTick+0x88>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	0019      	movs	r1, r3
 80011be:	23fa      	movs	r3, #250	; 0xfa
 80011c0:	0098      	lsls	r0, r3, #2
 80011c2:	f7fe ff9f 	bl	8000104 <__udivsi3>
 80011c6:	0003      	movs	r3, r0
 80011c8:	0019      	movs	r1, r3
 80011ca:	0020      	movs	r0, r4
 80011cc:	f7fe ff9a 	bl	8000104 <__udivsi3>
 80011d0:	0003      	movs	r3, r0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 f8ef 	bl	80013b6 <HAL_SYSTICK_Config>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d112      	bne.n	8001202 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d80a      	bhi.n	80011f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	2301      	movs	r3, #1
 80011e6:	425b      	negs	r3, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f8ce 	bl	800138c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_InitTick+0x90>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e00d      	b.n	8001214 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e008      	b.n	8001214 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001202:	230f      	movs	r3, #15
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e003      	b.n	8001214 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001214:	230f      	movs	r3, #15
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	781b      	ldrb	r3, [r3, #0]
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b005      	add	sp, #20
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	20000008 	.word	0x20000008
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	20000008 	.word	0x20000008
 8001250:	20000174 	.word	0x20000174

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000174 	.word	0x20000174

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b7f      	cmp	r3, #127	; 0x7f
 800127c:	d828      	bhi.n	80012d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127e:	4a2f      	ldr	r2, [pc, #188]	; (800133c <__NVIC_SetPriority+0xd4>)
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	33c0      	adds	r3, #192	; 0xc0
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	589b      	ldr	r3, [r3, r2]
 800128e:	1dfa      	adds	r2, r7, #7
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	0011      	movs	r1, r2
 8001294:	2203      	movs	r2, #3
 8001296:	400a      	ands	r2, r1
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	21ff      	movs	r1, #255	; 0xff
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	401a      	ands	r2, r3
 80012a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	401a      	ands	r2, r3
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	2303      	movs	r3, #3
 80012b6:	4003      	ands	r3, r0
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	481f      	ldr	r0, [pc, #124]	; (800133c <__NVIC_SetPriority+0xd4>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	430a      	orrs	r2, r1
 80012c8:	33c0      	adds	r3, #192	; 0xc0
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ce:	e031      	b.n	8001334 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <__NVIC_SetPriority+0xd8>)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0019      	movs	r1, r3
 80012d8:	230f      	movs	r3, #15
 80012da:	400b      	ands	r3, r1
 80012dc:	3b08      	subs	r3, #8
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3306      	adds	r3, #6
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	18d3      	adds	r3, r2, r3
 80012e6:	3304      	adds	r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1dfa      	adds	r2, r7, #7
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	0011      	movs	r1, r2
 80012f0:	2203      	movs	r2, #3
 80012f2:	400a      	ands	r2, r1
 80012f4:	00d2      	lsls	r2, r2, #3
 80012f6:	21ff      	movs	r1, #255	; 0xff
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	401a      	ands	r2, r3
 8001300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	401a      	ands	r2, r3
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	0018      	movs	r0, r3
 8001310:	2303      	movs	r3, #3
 8001312:	4003      	ands	r3, r0
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <__NVIC_SetPriority+0xd8>)
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	001c      	movs	r4, r3
 8001320:	230f      	movs	r3, #15
 8001322:	4023      	ands	r3, r4
 8001324:	3b08      	subs	r3, #8
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	430a      	orrs	r2, r1
 800132a:	3306      	adds	r3, #6
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	18c3      	adds	r3, r0, r3
 8001330:	3304      	adds	r3, #4
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b003      	add	sp, #12
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	045b      	lsls	r3, r3, #17
 8001354:	429a      	cmp	r2, r3
 8001356:	d301      	bcc.n	800135c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001358:	2301      	movs	r3, #1
 800135a:	e010      	b.n	800137e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <SysTick_Config+0x44>)
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	3a01      	subs	r2, #1
 8001362:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001364:	2301      	movs	r3, #1
 8001366:	425b      	negs	r3, r3
 8001368:	2103      	movs	r1, #3
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff ff7c 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x44>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x44>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	210f      	movs	r1, #15
 8001398:	187b      	adds	r3, r7, r1
 800139a:	1c02      	adds	r2, r0, #0
 800139c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	0011      	movs	r1, r2
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b004      	add	sp, #16
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ffbf 	bl	8001344 <SysTick_Config>
 80013c6:	0003      	movs	r3, r0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e14d      	b.n	800167c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <HAL_GPIO_Init+0x28>
 80013f6:	e13e      	b.n	8001676 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	43da      	mvns	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	2201      	movs	r2, #1
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	4013      	ands	r3, r2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	58d3      	ldr	r3, [r2, r3]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2207      	movs	r2, #7
 80014cc:	4013      	ands	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2107      	movs	r1, #7
 80014e6:	400b      	ands	r3, r1
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	401a      	ands	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x174>
 8001542:	e098      	b.n	8001676 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3318      	adds	r3, #24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	589b      	ldr	r3, [r3, r2]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	220f      	movs	r2, #15
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	23a0      	movs	r3, #160	; 0xa0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	429a      	cmp	r2, r3
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x1d6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_GPIO_Init+0x2c8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x1d2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a47      	ldr	r2, [pc, #284]	; (800169c <HAL_GPIO_Init+0x2cc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x1ce>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a46      	ldr	r2, [pc, #280]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x1ca>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <HAL_GPIO_Init+0x2d4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x1c6>
 8001592:	2304      	movs	r3, #4
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x1d8>
 8001596:	2305      	movs	r3, #5
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x1d8>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x1d8>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x1d8>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x1d8>
 80015a6:	2300      	movs	r3, #0
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	2103      	movs	r1, #3
 80015ac:	400a      	ands	r2, r1
 80015ae:	00d2      	lsls	r2, r2, #3
 80015b0:	4093      	lsls	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015b8:	4936      	ldr	r1, [pc, #216]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3318      	adds	r3, #24
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	035b      	lsls	r3, r3, #13
 80015de:	4013      	ands	r3, r2
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43da      	mvns	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	039b      	lsls	r3, r3, #14
 8001608:	4013      	ands	r3, r2
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 800161c:	2384      	movs	r3, #132	; 0x84
 800161e:	58d3      	ldr	r3, [r2, r3]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001640:	4914      	ldr	r1, [pc, #80]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 8001642:	2284      	movs	r2, #132	; 0x84
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	58d3      	ldr	r3, [r2, r3]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43da      	mvns	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	4013      	ands	r3, r2
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166e:	4909      	ldr	r1, [pc, #36]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	40da      	lsrs	r2, r3
 8001684:	1e13      	subs	r3, r2, #0
 8001686:	d000      	beq.n	800168a <HAL_GPIO_Init+0x2ba>
 8001688:	e6aa      	b.n	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b006      	add	sp, #24
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021800 	.word	0x40021800
 8001698:	50000400 	.word	0x50000400
 800169c:	50000800 	.word	0x50000800
 80016a0:	50000c00 	.word	0x50000c00
 80016a4:	50001000 	.word	0x50001000

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	000a      	movs	r2, r1
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	1cba      	adds	r2, r7, #2
 80016bc:	8812      	ldrh	r2, [r2, #0]
 80016be:	4013      	ands	r3, r2
 80016c0:	d004      	beq.n	80016cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80016c2:	230f      	movs	r3, #15
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80016d4:	230f      	movs	r3, #15
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	781b      	ldrb	r3, [r3, #0]
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	0008      	movs	r0, r1
 80016ec:	0011      	movs	r1, r2
 80016ee:	1cbb      	adds	r3, r7, #2
 80016f0:	1c02      	adds	r2, r0, #0
 80016f2:	801a      	strh	r2, [r3, #0]
 80016f4:	1c7b      	adds	r3, r7, #1
 80016f6:	1c0a      	adds	r2, r1, #0
 80016f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fa:	1c7b      	adds	r3, r7, #1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	1cbb      	adds	r3, r7, #2
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800170a:	e003      	b.n	8001714 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170c:	1cbb      	adds	r3, r7, #2
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	000a      	movs	r2, r1
 8001726:	1cbb      	adds	r3, r7, #2
 8001728:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001730:	1cbb      	adds	r3, r7, #2
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	1cb9      	adds	r1, r7, #2
 8001740:	8809      	ldrh	r1, [r1, #0]
 8001742:	400b      	ands	r3, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d11f      	bne.n	80017b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	0013      	movs	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	189b      	adds	r3, r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4912      	ldr	r1, [pc, #72]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fcbc 	bl	8000104 <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001792:	e008      	b.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b01      	subs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e001      	b.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e009      	b.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	401a      	ands	r2, r3
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d0ed      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b004      	add	sp, #16
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40007000 	.word	0x40007000
 80017c8:	fffff9ff 	.word	0xfffff9ff
 80017cc:	20000000 	.word	0x20000000
 80017d0:	000f4240 	.word	0x000f4240

080017d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	23e0      	movs	r3, #224	; 0xe0
 80017de:	01db      	lsls	r3, r3, #7
 80017e0:	4013      	ands	r3, r2
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f000 fb50 	bl	8001ea0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d100      	bne.n	800180c <HAL_RCC_OscConfig+0x20>
 800180a:	e07c      	b.n	8001906 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180c:	4bc3      	ldr	r3, [pc, #780]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2238      	movs	r2, #56	; 0x38
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001816:	4bc1      	ldr	r3, [pc, #772]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2203      	movs	r2, #3
 800181c:	4013      	ands	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x40>
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d002      	beq.n	8001832 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4bba      	ldr	r3, [pc, #744]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d062      	beq.n	8001904 <HAL_RCC_OscConfig+0x118>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d15e      	bne.n	8001904 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e32a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	429a      	cmp	r2, r3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_OscConfig+0x7a>
 8001856:	4bb1      	ldr	r3, [pc, #708]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4bb0      	ldr	r3, [pc, #704]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0249      	lsls	r1, r1, #9
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e020      	b.n	80018a8 <HAL_RCC_OscConfig+0xbc>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	23a0      	movs	r3, #160	; 0xa0
 800186c:	02db      	lsls	r3, r3, #11
 800186e:	429a      	cmp	r2, r3
 8001870:	d10e      	bne.n	8001890 <HAL_RCC_OscConfig+0xa4>
 8001872:	4baa      	ldr	r3, [pc, #680]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4ba9      	ldr	r3, [pc, #676]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	02c9      	lsls	r1, r1, #11
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	4ba6      	ldr	r3, [pc, #664]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4ba5      	ldr	r3, [pc, #660]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0249      	lsls	r1, r1, #9
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xbc>
 8001890:	4ba2      	ldr	r3, [pc, #648]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4ba1      	ldr	r3, [pc, #644]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001896:	49a2      	ldr	r1, [pc, #648]	; (8001b20 <HAL_RCC_OscConfig+0x334>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	4b9f      	ldr	r3, [pc, #636]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b9e      	ldr	r3, [pc, #632]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80018a2:	49a0      	ldr	r1, [pc, #640]	; (8001b24 <HAL_RCC_OscConfig+0x338>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d014      	beq.n	80018da <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fcd0 	bl	8001254 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff fccb 	bl	8001254 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e2e9      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018cc:	4b93      	ldr	r3, [pc, #588]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0xce>
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fcbb 	bl	8001254 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fcb6 	bl	8001254 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2d4      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f6:	4b89      	ldr	r3, [pc, #548]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0xf8>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x126>
 8001910:	e099      	b.n	8001a46 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001912:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2238      	movs	r2, #56	; 0x38
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800191c:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2203      	movs	r2, #3
 8001922:	4013      	ands	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b10      	cmp	r3, #16
 800192a:	d102      	bne.n	8001932 <HAL_RCC_OscConfig+0x146>
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d002      	beq.n	8001938 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d135      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	4b78      	ldr	r3, [pc, #480]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4013      	ands	r3, r2
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x164>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e2a7      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b72      	ldr	r3, [pc, #456]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a74      	ldr	r2, [pc, #464]	; (8001b28 <HAL_RCC_OscConfig+0x33c>)
 8001956:	4013      	ands	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	021a      	lsls	r2, r3, #8
 8001960:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001962:	430a      	orrs	r2, r1
 8001964:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d112      	bne.n	8001992 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800196c:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6e      	ldr	r2, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x340>)
 8001972:	4013      	ands	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0adb      	lsrs	r3, r3, #11
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	4a69      	ldr	r2, [pc, #420]	; (8001b30 <HAL_RCC_OscConfig+0x344>)
 800198c:	40da      	lsrs	r2, r3
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HAL_RCC_OscConfig+0x348>)
 8001990:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x34c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fc00 	bl	800119c <HAL_InitTick>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d051      	beq.n	8001a44 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e27d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d030      	beq.n	8001a0e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ac:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5e      	ldr	r2, [pc, #376]	; (8001b2c <HAL_RCC_OscConfig+0x340>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0049      	lsls	r1, r1, #1
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fc41 	bl	8001254 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc3c 	bl	8001254 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e25a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <HAL_RCC_OscConfig+0x33c>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	0019      	movs	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	021a      	lsls	r2, r3, #8
 8001a06:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	e01b      	b.n	8001a46 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a14:	4949      	ldr	r1, [pc, #292]	; (8001b3c <HAL_RCC_OscConfig+0x350>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fc1b 	bl	8001254 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc16 	bl	8001254 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e234      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x238>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d047      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2238      	movs	r2, #56	; 0x38
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	d10a      	bne.n	8001a72 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d03c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2f4>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d138      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e216      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d019      	beq.n	8001aae <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fbe5 	bl	8001254 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff fbe0 	bl	8001254 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1fe      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d0f1      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2a4>
 8001aac:	e018      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fbcb 	bl	8001254 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fbc6 	bl	8001254 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1e4      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1f1      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d100      	bne.n	8001aec <HAL_RCC_OscConfig+0x300>
 8001aea:	e0c7      	b.n	8001c7c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aec:	231f      	movs	r3, #31
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2238      	movs	r2, #56	; 0x38
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d11f      	bne.n	8001b40 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x330>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d100      	bne.n	8001b0c <HAL_RCC_OscConfig+0x320>
 8001b0a:	e0b7      	b.n	8001c7c <HAL_RCC_OscConfig+0x490>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d000      	beq.n	8001b16 <HAL_RCC_OscConfig+0x32a>
 8001b14:	e0b2      	b.n	8001c7c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1c2      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	fffeffff 	.word	0xfffeffff
 8001b24:	fffbffff 	.word	0xfffbffff
 8001b28:	ffff80ff 	.word	0xffff80ff
 8001b2c:	ffffc7ff 	.word	0xffffc7ff
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b40:	4bb5      	ldr	r3, [pc, #724]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	055b      	lsls	r3, r3, #21
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x364>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x366>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d011      	beq.n	8001b7a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4bb0      	ldr	r3, [pc, #704]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5a:	4baf      	ldr	r3, [pc, #700]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	430a      	orrs	r2, r1
 8001b62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b64:	4bac      	ldr	r3, [pc, #688]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	055b      	lsls	r3, r3, #21
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b72:	231f      	movs	r3, #31
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7a:	4ba8      	ldr	r3, [pc, #672]	; (8001e1c <HAL_RCC_OscConfig+0x630>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	d11a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b86:	4ba5      	ldr	r3, [pc, #660]	; (8001e1c <HAL_RCC_OscConfig+0x630>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4ba4      	ldr	r3, [pc, #656]	; (8001e1c <HAL_RCC_OscConfig+0x630>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0049      	lsls	r1, r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb5e 	bl	8001254 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff fb59 	bl	8001254 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e177      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4b9a      	ldr	r3, [pc, #616]	; (8001e1c <HAL_RCC_OscConfig+0x630>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3e6>
 8001bc4:	4b94      	ldr	r3, [pc, #592]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001bc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc8:	4b93      	ldr	r3, [pc, #588]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x420>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x408>
 8001bda:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001bdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bde:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001be0:	2104      	movs	r1, #4
 8001be2:	430a      	orrs	r2, r1
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be6:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bea:	4b8b      	ldr	r3, [pc, #556]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0x420>
 8001bf4:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001bf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bf8:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c00:	4b85      	ldr	r3, [pc, #532]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c04:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c06:	2104      	movs	r1, #4
 8001c08:	438a      	bics	r2, r1
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d014      	beq.n	8001c3e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb1e 	bl	8001254 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fb19 	bl	8001254 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a7d      	ldr	r2, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x634>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e136      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c32:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x432>
 8001c3c:	e013      	b.n	8001c66 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fb09 	bl	8001254 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c46:	e009      	b.n	8001c5c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb04 	bl	8001254 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x634>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e121      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	4b6e      	ldr	r3, [pc, #440]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c66:	231f      	movs	r3, #31
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c76:	496b      	ldr	r1, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x638>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	d039      	beq.n	8001cfa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c8e:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	03c9      	lsls	r1, r1, #15
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fada 	bl	8001254 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca6:	f7ff fad5 	bl	8001254 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0f3      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cb8:	4b57      	ldr	r3, [pc, #348]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4ba>
 8001cc4:	e019      	b.n	8001cfa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc6:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001ccc:	4956      	ldr	r1, [pc, #344]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fabf 	bl	8001254 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cdc:	f7ff faba 	bl	8001254 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0d8      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cee:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d100      	bne.n	8001d04 <HAL_RCC_OscConfig+0x518>
 8001d02:	e0cc      	b.n	8001e9e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2238      	movs	r2, #56	; 0x38
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x526>
 8001d10:	e07b      	b.n	8001e0a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d156      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d20:	4942      	ldr	r1, [pc, #264]	; (8001e2c <HAL_RCC_OscConfig+0x640>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff fa95 	bl	8001254 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff fa90 	bl	8001254 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0ae      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	049b      	lsls	r3, r3, #18
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x644>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0449      	lsls	r1, r1, #17
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0549      	lsls	r1, r1, #21
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fa59 	bl	8001254 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff fa54 	bl	8001254 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e072      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	049b      	lsls	r3, r3, #18
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5bc>
 8001dc6:	e06a      	b.n	8001e9e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001dce:	4917      	ldr	r1, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x640>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fa3e 	bl	8001254 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff fa39 	bl	8001254 <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e057      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	049b      	lsls	r3, r3, #18
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001e02:	490c      	ldr	r1, [pc, #48]	; (8001e34 <HAL_RCC_OscConfig+0x648>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	e049      	b.n	8001e9e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d112      	bne.n	8001e38 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e044      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	00001388 	.word	0x00001388
 8001e24:	efffffff 	.word	0xefffffff
 8001e28:	ffbfffff 	.word	0xffbfffff
 8001e2c:	feffffff 	.word	0xfeffffff
 8001e30:	11c1808c 	.word	0x11c1808c
 8001e34:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_RCC_OscConfig+0x6bc>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2203      	movs	r2, #3
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d126      	bne.n	8001e9a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2270      	movs	r2, #112	; 0x70
 8001e50:	401a      	ands	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d11f      	bne.n	8001e9a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	23fe      	movs	r3, #254	; 0xfe
 8001e5e:	01db      	lsls	r3, r3, #7
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d116      	bne.n	8001e9a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	23f8      	movs	r3, #248	; 0xf8
 8001e70:	039b      	lsls	r3, r3, #14
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10e      	bne.n	8001e9a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	23e0      	movs	r3, #224	; 0xe0
 8001e80:	051b      	lsls	r3, r3, #20
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0f5b      	lsrs	r3, r3, #29
 8001e90:	075a      	lsls	r2, r3, #29
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b008      	add	sp, #32
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0e9      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d91e      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f9b8 	bl	8001254 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7ff f9b3 	bl	8001254 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	; (80020a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0ca      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001efe:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2207      	movs	r2, #7
 8001f04:	4013      	ands	r3, r2
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d006      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f20:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	21e0      	movs	r1, #224	; 0xe0
 8001f28:	01c9      	lsls	r1, r1, #7
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d057      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d12b      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e097      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	049b      	lsls	r3, r3, #18
 8001f74:	4013      	ands	r3, r2
 8001f76:	d11f      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e08b      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d113      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e07f      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e074      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e06d      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f942 	bl	8001254 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd4:	e009      	b.n	8001fea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd6:	f7ff f93d 	bl	8001254 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e054      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2238      	movs	r2, #56	; 0x38
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1ec      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d21e      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2207      	movs	r2, #7
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800201c:	f7ff f91a 	bl	8001254 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002024:	e009      	b.n	800203a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f7ff f915 	bl	8001254 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e02c      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2207      	movs	r2, #7
 8002040:	4013      	ands	r3, r2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_RCC_ClockConfig+0x200>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002066:	f000 f829 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800206a:	0001      	movs	r1, r0
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	220f      	movs	r2, #15
 8002074:	401a      	ands	r2, r3
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_RCC_ClockConfig+0x204>)
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	58d3      	ldr	r3, [r2, r3]
 800207c:	221f      	movs	r2, #31
 800207e:	4013      	ands	r3, r2
 8002080:	000a      	movs	r2, r1
 8002082:	40da      	lsrs	r2, r3
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x208>)
 8002086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x20c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff f885 	bl	800119c <HAL_InitTick>
 8002092:	0003      	movs	r3, r0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b004      	add	sp, #16
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	00001388 	.word	0x00001388
 80020a4:	40021000 	.word	0x40021000
 80020a8:	fffff0ff 	.word	0xfffff0ff
 80020ac:	ffff8fff 	.word	0xffff8fff
 80020b0:	0800480c 	.word	0x0800480c
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c2:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2238      	movs	r2, #56	; 0x38
 80020c8:	4013      	ands	r3, r2
 80020ca:	d10f      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020cc:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0adb      	lsrs	r3, r3, #11
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	2201      	movs	r2, #1
 80020d8:	409a      	lsls	r2, r3
 80020da:	0013      	movs	r3, r2
 80020dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	4835      	ldr	r0, [pc, #212]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020e2:	f7fe f80f 	bl	8000104 <__udivsi3>
 80020e6:	0003      	movs	r3, r0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e05d      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2238      	movs	r2, #56	; 0x38
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f8:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCC_GetSysClockFreq+0x100>)
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e054      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2238      	movs	r2, #56	; 0x38
 8002104:	4013      	ands	r3, r2
 8002106:	2b10      	cmp	r3, #16
 8002108:	d138      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2203      	movs	r2, #3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	2207      	movs	r2, #7
 800211c:	4013      	ands	r3, r2
 800211e:	3301      	adds	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	4824      	ldr	r0, [pc, #144]	; (80021bc <HAL_RCC_GetSysClockFreq+0x100>)
 800212c:	f7fd ffea 	bl	8000104 <__udivsi3>
 8002130:	0003      	movs	r3, r0
 8002132:	0019      	movs	r1, r3
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	227f      	movs	r2, #127	; 0x7f
 800213c:	4013      	ands	r3, r2
 800213e:	434b      	muls	r3, r1
 8002140:	617b      	str	r3, [r7, #20]
        break;
 8002142:	e00d      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	481c      	ldr	r0, [pc, #112]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002148:	f7fd ffdc 	bl	8000104 <__udivsi3>
 800214c:	0003      	movs	r3, r0
 800214e:	0019      	movs	r1, r3
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	227f      	movs	r2, #127	; 0x7f
 8002158:	4013      	ands	r3, r2
 800215a:	434b      	muls	r3, r1
 800215c:	617b      	str	r3, [r7, #20]
        break;
 800215e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0f5b      	lsrs	r3, r3, #29
 8002166:	2207      	movs	r2, #7
 8002168:	4013      	ands	r3, r2
 800216a:	3301      	adds	r3, #1
 800216c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f7fd ffc7 	bl	8000104 <__udivsi3>
 8002176:	0003      	movs	r3, r0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e015      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2238      	movs	r2, #56	; 0x38
 8002182:	4013      	ands	r3, r2
 8002184:	2b20      	cmp	r3, #32
 8002186:	d103      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2238      	movs	r2, #56	; 0x38
 8002196:	4013      	ands	r3, r2
 8002198:	2b18      	cmp	r3, #24
 800219a:	d103      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800219c:	23fa      	movs	r3, #250	; 0xfa
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e001      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021a8:	693b      	ldr	r3, [r7, #16]
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b006      	add	sp, #24
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	40021000 	.word	0x40021000
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200

080021c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021d8:	f7ff fff2 	bl	80021c0 <HAL_RCC_GetHCLKFreq>
 80021dc:	0004      	movs	r4, r0
 80021de:	f7ff faf9 	bl	80017d4 <LL_RCC_GetAPB1Prescaler>
 80021e2:	0003      	movs	r3, r0
 80021e4:	0b1a      	lsrs	r2, r3, #12
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	58d3      	ldr	r3, [r2, r3]
 80021ec:	221f      	movs	r2, #31
 80021ee:	4013      	ands	r3, r2
 80021f0:	40dc      	lsrs	r4, r3
 80021f2:	0023      	movs	r3, r4
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bdb0      	pop	{r4, r5, r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	0800484c 	.word	0x0800484c

08002200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002208:	2313      	movs	r3, #19
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002210:	2312      	movs	r3, #18
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002224:	e0ad      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2011      	movs	r0, #17
 8002228:	183b      	adds	r3, r7, r0
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	4013      	ands	r3, r2
 8002238:	d110      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800223c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0549      	lsls	r1, r1, #21
 8002244:	430a      	orrs	r2, r1
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800224a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	055b      	lsls	r3, r3, #21
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002256:	183b      	adds	r3, r7, r0
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	0049      	lsls	r1, r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800226a:	f7fe fff3 	bl	8001254 <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002272:	e00b      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe ffee 	bl	8001254 <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d904      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002282:	2313      	movs	r3, #19
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2203      	movs	r2, #3
 8002288:	701a      	strb	r2, [r3, #0]
        break;
 800228a:	e005      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4013      	ands	r3, r2
 8002296:	d0ed      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002298:	2313      	movs	r3, #19
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d15e      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022a6:	23c0      	movs	r3, #192	; 0xc0
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d019      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d014      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	4a24      	ldr	r2, [pc, #144]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0249      	lsls	r1, r1, #9
 80022d2:	430a      	orrs	r2, r1
 80022d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022dc:	491e      	ldr	r1, [pc, #120]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80022de:	400a      	ands	r2, r1
 80022e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d016      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe ffb0 	bl	8001254 <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f8:	e00c      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe ffab 	bl	8001254 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d904      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800230a:	2313      	movs	r3, #19
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2203      	movs	r2, #3
 8002310:	701a      	strb	r2, [r3, #0]
            break;
 8002312:	e004      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d0ed      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800231e:	2313      	movs	r3, #19
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002338:	430a      	orrs	r2, r1
 800233a:	65da      	str	r2, [r3, #92]	; 0x5c
 800233c:	e016      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800233e:	2312      	movs	r3, #18
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2213      	movs	r2, #19
 8002344:	18ba      	adds	r2, r7, r2
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e00f      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
 8002354:	fffffcff 	.word	0xfffffcff
 8002358:	fffeffff 	.word	0xfffeffff
 800235c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002360:	2312      	movs	r3, #18
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2213      	movs	r2, #19
 8002366:	18ba      	adds	r2, r7, r2
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800236c:	2311      	movs	r3, #17
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4bb6      	ldr	r3, [pc, #728]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800237a:	4bb5      	ldr	r3, [pc, #724]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800237c:	49b5      	ldr	r1, [pc, #724]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800237e:	400a      	ands	r2, r1
 8002380:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2201      	movs	r2, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238c:	4bb0      	ldr	r3, [pc, #704]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	2203      	movs	r2, #3
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4bad      	ldr	r3, [pc, #692]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239c:	430a      	orrs	r2, r1
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023aa:	4ba9      	ldr	r3, [pc, #676]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	220c      	movs	r2, #12
 80023b0:	4393      	bics	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4ba5      	ldr	r3, [pc, #660]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c8:	4ba1      	ldr	r3, [pc, #644]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	2230      	movs	r2, #48	; 0x30
 80023ce:	4393      	bics	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b9e      	ldr	r3, [pc, #632]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2210      	movs	r2, #16
 80023e2:	4013      	ands	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e6:	4b9a      	ldr	r3, [pc, #616]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	4a9b      	ldr	r2, [pc, #620]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	4b96      	ldr	r3, [pc, #600]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	4013      	ands	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	4a94      	ldr	r2, [pc, #592]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	4b8e      	ldr	r3, [pc, #568]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002416:	430a      	orrs	r2, r1
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002426:	4b8a      	ldr	r3, [pc, #552]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	4a8d      	ldr	r2, [pc, #564]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002434:	4b86      	ldr	r3, [pc, #536]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002436:	430a      	orrs	r2, r1
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4013      	ands	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002446:	4b82      	ldr	r3, [pc, #520]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	4a86      	ldr	r2, [pc, #536]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4b7e      	ldr	r3, [pc, #504]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002456:	430a      	orrs	r2, r1
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2220      	movs	r2, #32
 8002460:	4013      	ands	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002464:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	4a7f      	ldr	r2, [pc, #508]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	4b77      	ldr	r3, [pc, #476]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002474:	430a      	orrs	r2, r1
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2240      	movs	r2, #64	; 0x40
 800247e:	4013      	ands	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	4a79      	ldr	r2, [pc, #484]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002492:	430a      	orrs	r2, r1
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	01db      	lsls	r3, r3, #7
 800249e:	4013      	ands	r3, r2
 80024a0:	d015      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a2:	4b6b      	ldr	r3, [pc, #428]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	0899      	lsrs	r1, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	4b68      	ldr	r3, [pc, #416]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	05db      	lsls	r3, r3, #23
 80024bc:	429a      	cmp	r2, r3
 80024be:	d106      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024c0:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	0249      	lsls	r1, r1, #9
 80024ca:	430a      	orrs	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	031b      	lsls	r3, r3, #12
 80024d6:	4013      	ands	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024da:	4b5d      	ldr	r3, [pc, #372]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	4393      	bics	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	039b      	lsls	r3, r3, #14
 80024f6:	4013      	ands	r3, r2
 80024f8:	d016      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024fa:	4b55      	ldr	r3, [pc, #340]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	4a5c      	ldr	r2, [pc, #368]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002500:	4013      	ands	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002508:	4b51      	ldr	r3, [pc, #324]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250a:	430a      	orrs	r2, r1
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	03db      	lsls	r3, r3, #15
 8002516:	429a      	cmp	r2, r3
 8002518:	d106      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800251a:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	0449      	lsls	r1, r1, #17
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	03db      	lsls	r3, r3, #15
 8002530:	4013      	ands	r3, r2
 8002532:	d016      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800253a:	4013      	ands	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002542:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002544:	430a      	orrs	r2, r1
 8002546:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	045b      	lsls	r3, r3, #17
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002554:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	0449      	lsls	r1, r1, #17
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4013      	ands	r3, r2
 800256c:	d014      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	2203      	movs	r2, #3
 8002574:	4393      	bics	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1a      	ldr	r2, [r3, #32]
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257e:	430a      	orrs	r2, r1
 8002580:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d106      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0249      	lsls	r1, r1, #9
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	019b      	lsls	r3, r3, #6
 80025a0:	4013      	ands	r3, r2
 80025a2:	d014      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	220c      	movs	r2, #12
 80025aa:	4393      	bics	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d106      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025c0:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	0249      	lsls	r1, r1, #9
 80025ca:	430a      	orrs	r2, r1
 80025cc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	045b      	lsls	r3, r3, #17
 80025d6:	4013      	ands	r3, r2
 80025d8:	d016      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4a22      	ldr	r2, [pc, #136]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d106      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0449      	lsls	r1, r1, #17
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	049b      	lsls	r3, r3, #18
 8002610:	4013      	ands	r3, r2
 8002612:	d016      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a10      	ldr	r2, [pc, #64]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002624:	430a      	orrs	r2, r1
 8002626:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	0449      	lsls	r1, r1, #17
 800263e:	430a      	orrs	r2, r1
 8002640:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002642:	2312      	movs	r3, #18
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	781b      	ldrb	r3, [r3, #0]
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b006      	add	sp, #24
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	efffffff 	.word	0xefffffff
 8002658:	fffff3ff 	.word	0xfffff3ff
 800265c:	fffffcff 	.word	0xfffffcff
 8002660:	fff3ffff 	.word	0xfff3ffff
 8002664:	ffcfffff 	.word	0xffcfffff
 8002668:	ffffcfff 	.word	0xffffcfff
 800266c:	ffff3fff 	.word	0xffff3fff
 8002670:	ffbfffff 	.word	0xffbfffff
 8002674:	feffffff 	.word	0xfeffffff

08002678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e04a      	b.n	8002720 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	223d      	movs	r2, #61	; 0x3d
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223c      	movs	r2, #60	; 0x3c
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7fe fc0f 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223d      	movs	r2, #61	; 0x3d
 80026aa:	2102      	movs	r1, #2
 80026ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	0019      	movs	r1, r3
 80026b8:	0010      	movs	r0, r2
 80026ba:	f000 fb5b 	bl	8002d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2248      	movs	r2, #72	; 0x48
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	223e      	movs	r2, #62	; 0x3e
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223f      	movs	r2, #63	; 0x3f
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2240      	movs	r2, #64	; 0x40
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2241      	movs	r2, #65	; 0x41
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2242      	movs	r2, #66	; 0x42
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2243      	movs	r2, #67	; 0x43
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2244      	movs	r2, #68	; 0x44
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2245      	movs	r2, #69	; 0x45
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2246      	movs	r2, #70	; 0x46
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2247      	movs	r2, #71	; 0x47
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	223d      	movs	r2, #61	; 0x3d
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e04a      	b.n	80027d0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223d      	movs	r2, #61	; 0x3d
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223c      	movs	r2, #60	; 0x3c
 800274a:	2100      	movs	r1, #0
 800274c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f841 	bl	80027d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223d      	movs	r2, #61	; 0x3d
 800275a:	2102      	movs	r1, #2
 800275c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	0019      	movs	r1, r3
 8002768:	0010      	movs	r0, r2
 800276a:	f000 fb03 	bl	8002d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2248      	movs	r2, #72	; 0x48
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223e      	movs	r2, #62	; 0x3e
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223f      	movs	r2, #63	; 0x3f
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2240      	movs	r2, #64	; 0x40
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2241      	movs	r2, #65	; 0x41
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2242      	movs	r2, #66	; 0x42
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2243      	movs	r2, #67	; 0x43
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2244      	movs	r2, #68	; 0x44
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2245      	movs	r2, #69	; 0x45
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2246      	movs	r2, #70	; 0x46
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2247      	movs	r2, #71	; 0x47
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223d      	movs	r2, #61	; 0x3d
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <HAL_TIM_PWM_Start+0x22>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223e      	movs	r2, #62	; 0x3e
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	4193      	sbcs	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e037      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d108      	bne.n	8002822 <HAL_TIM_PWM_Start+0x3a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	4193      	sbcs	r3, r2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e02b      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d108      	bne.n	800283a <HAL_TIM_PWM_Start+0x52>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	5c9b      	ldrb	r3, [r3, r2]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	4193      	sbcs	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	e01f      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d108      	bne.n	8002852 <HAL_TIM_PWM_Start+0x6a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2241      	movs	r2, #65	; 0x41
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	4193      	sbcs	r3, r2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e013      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b10      	cmp	r3, #16
 8002856:	d108      	bne.n	800286a <HAL_TIM_PWM_Start+0x82>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2242      	movs	r2, #66	; 0x42
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	4193      	sbcs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e007      	b.n	800287a <HAL_TIM_PWM_Start+0x92>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2243      	movs	r2, #67	; 0x43
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	4193      	sbcs	r3, r2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e090      	b.n	80029a4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start+0xaa>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223e      	movs	r2, #62	; 0x3e
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]
 8002890:	e023      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0xba>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	2102      	movs	r1, #2
 800289e:	5499      	strb	r1, [r3, r2]
 80028a0:	e01b      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0xca>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	2102      	movs	r1, #2
 80028ae:	5499      	strb	r1, [r3, r2]
 80028b0:	e013      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0xda>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2241      	movs	r2, #65	; 0x41
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]
 80028c0:	e00b      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0xea>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2242      	movs	r2, #66	; 0x42
 80028cc:	2102      	movs	r1, #2
 80028ce:	5499      	strb	r1, [r3, r2]
 80028d0:	e003      	b.n	80028da <HAL_TIM_PWM_Start+0xf2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2243      	movs	r2, #67	; 0x43
 80028d6:	2102      	movs	r1, #2
 80028d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fe3e 	bl	8003564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <HAL_TIM_PWM_Start+0x1c4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00e      	beq.n	8002910 <HAL_TIM_PWM_Start+0x128>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_TIM_PWM_Start+0x1c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_TIM_PWM_Start+0x128>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <HAL_TIM_PWM_Start+0x1cc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_TIM_PWM_Start+0x128>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_TIM_PWM_Start+0x1d0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_TIM_PWM_Start+0x12c>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_TIM_PWM_Start+0x12e>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0209      	lsls	r1, r1, #8
 8002928:	430a      	orrs	r2, r1
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_TIM_PWM_Start+0x1c4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d014      	beq.n	8002960 <HAL_TIM_PWM_Start+0x178>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	05db      	lsls	r3, r3, #23
 800293e:	429a      	cmp	r2, r3
 8002940:	d00e      	beq.n	8002960 <HAL_TIM_PWM_Start+0x178>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_TIM_PWM_Start+0x1d4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_TIM_PWM_Start+0x178>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_TIM_PWM_Start+0x1d8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_PWM_Start+0x178>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <HAL_TIM_PWM_Start+0x1c8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d116      	bne.n	800298e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_TIM_PWM_Start+0x1dc>)
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d016      	beq.n	80029a0 <HAL_TIM_PWM_Start+0x1b8>
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	025b      	lsls	r3, r3, #9
 8002978:	429a      	cmp	r2, r3
 800297a:	d011      	beq.n	80029a0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	e008      	b.n	80029a0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e000      	b.n	80029a2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	00010007 	.word	0x00010007

080029c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d4:	2317      	movs	r3, #23
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	223c      	movs	r2, #60	; 0x3c
 80029e0:	5c9b      	ldrb	r3, [r3, r2]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0e5      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	223c      	movs	r2, #60	; 0x3c
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b14      	cmp	r3, #20
 80029f6:	d900      	bls.n	80029fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80029f8:	e0d1      	b.n	8002b9e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	009a      	lsls	r2, r3, #2
 80029fe:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fa48 	bl	8002ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2108      	movs	r1, #8
 8002a20:	430a      	orrs	r2, r1
 8002a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2104      	movs	r1, #4
 8002a30:	438a      	bics	r2, r1
 8002a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6999      	ldr	r1, [r3, #24]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	619a      	str	r2, [r3, #24]
      break;
 8002a46:	e0af      	b.n	8002ba8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 fab1 	bl	8002fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	0109      	lsls	r1, r1, #4
 8002a64:	430a      	orrs	r2, r1
 8002a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4954      	ldr	r1, [pc, #336]	; (8002bc4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	021a      	lsls	r2, r3, #8
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	619a      	str	r2, [r3, #24]
      break;
 8002a8c:	e08c      	b.n	8002ba8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	0011      	movs	r1, r2
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fb12 	bl	80030c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	438a      	bics	r2, r1
 8002aba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69d9      	ldr	r1, [r3, #28]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	61da      	str	r2, [r3, #28]
      break;
 8002ace:	e06b      	b.n	8002ba8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fb79 	bl	80031d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	0109      	lsls	r1, r1, #4
 8002aec:	430a      	orrs	r2, r1
 8002aee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4932      	ldr	r1, [pc, #200]	; (8002bc4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69d9      	ldr	r1, [r3, #28]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	021a      	lsls	r2, r3, #8
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
      break;
 8002b14:	e048      	b.n	8002ba8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 fbc0 	bl	80032a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2108      	movs	r1, #8
 8002b30:	430a      	orrs	r2, r1
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2104      	movs	r1, #4
 8002b40:	438a      	bics	r2, r1
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b56:	e027      	b.n	8002ba8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	0011      	movs	r1, r2
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fbff 	bl	8003364 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	0109      	lsls	r1, r1, #4
 8002b74:	430a      	orrs	r2, r1
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4910      	ldr	r1, [pc, #64]	; (8002bc4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	021a      	lsls	r2, r3, #8
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b9c:	e004      	b.n	8002ba8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002b9e:	2317      	movs	r3, #23
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
      break;
 8002ba6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	223c      	movs	r2, #60	; 0x3c
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

  return status;
 8002bb0:	2317      	movs	r3, #23
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	0800486c 	.word	0x0800486c
 8002bc4:	fffffbff 	.word	0xfffffbff

08002bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	230f      	movs	r3, #15
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223c      	movs	r2, #60	; 0x3c
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_ConfigClockSource+0x20>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0bc      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x19a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	223c      	movs	r2, #60	; 0x3c
 8002bec:	2101      	movs	r1, #1
 8002bee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	223d      	movs	r2, #61	; 0x3d
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a5a      	ldr	r2, [pc, #360]	; (8002d6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4a59      	ldr	r2, [pc, #356]	; (8002d70 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0192      	lsls	r2, r2, #6
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d040      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0xde>
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	0192      	lsls	r2, r2, #6
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d900      	bls.n	8002c2e <HAL_TIM_ConfigClockSource+0x66>
 8002c2c:	e088      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	0152      	lsls	r2, r2, #5
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d100      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x70>
 8002c36:	e088      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x182>
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0152      	lsls	r2, r2, #5
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d900      	bls.n	8002c42 <HAL_TIM_ConfigClockSource+0x7a>
 8002c40:	e07e      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c42:	2b70      	cmp	r3, #112	; 0x70
 8002c44:	d018      	beq.n	8002c78 <HAL_TIM_ConfigClockSource+0xb0>
 8002c46:	d900      	bls.n	8002c4a <HAL_TIM_ConfigClockSource+0x82>
 8002c48:	e07a      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c4a:	2b60      	cmp	r3, #96	; 0x60
 8002c4c:	d04f      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x126>
 8002c4e:	d900      	bls.n	8002c52 <HAL_TIM_ConfigClockSource+0x8a>
 8002c50:	e076      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c52:	2b50      	cmp	r3, #80	; 0x50
 8002c54:	d03b      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x106>
 8002c56:	d900      	bls.n	8002c5a <HAL_TIM_ConfigClockSource+0x92>
 8002c58:	e072      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d057      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x146>
 8002c5e:	d900      	bls.n	8002c62 <HAL_TIM_ConfigClockSource+0x9a>
 8002c60:	e06e      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c62:	2b30      	cmp	r3, #48	; 0x30
 8002c64:	d063      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x166>
 8002c66:	d86b      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d060      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x166>
 8002c6c:	d868      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d05d      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x166>
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d05b      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x166>
 8002c76:	e063      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	f000 fc4c 	bl	8003524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2277      	movs	r2, #119	; 0x77
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
      break;
 8002ca4:	e052      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb6:	f000 fc35 	bl	8003524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	01c9      	lsls	r1, r1, #7
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
      break;
 8002ccc:	e03e      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cda:	001a      	movs	r2, r3
 8002cdc:	f000 fba6 	bl	800342c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2150      	movs	r1, #80	; 0x50
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 fc00 	bl	80034ec <TIM_ITRx_SetConfig>
      break;
 8002cec:	e02e      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	f000 fbc4 	bl	8003488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2160      	movs	r1, #96	; 0x60
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fbf0 	bl	80034ec <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e01e      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	f000 fb86 	bl	800342c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2140      	movs	r1, #64	; 0x40
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fbe0 	bl	80034ec <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e00e      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f000 fbd7 	bl	80034ec <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e005      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e000      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d4a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	223d      	movs	r2, #61	; 0x3d
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223c      	movs	r2, #60	; 0x3c
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	ffceff88 	.word	0xffceff88
 8002d70:	ffff00ff 	.word	0xffff00ff

08002d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3f      	ldr	r2, [pc, #252]	; (8002e84 <TIM_Base_SetConfig+0x110>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00c      	beq.n	8002da6 <TIM_Base_SetConfig+0x32>
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d007      	beq.n	8002da6 <TIM_Base_SetConfig+0x32>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <TIM_Base_SetConfig+0x114>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_Base_SetConfig+0x32>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <TIM_Base_SetConfig+0x118>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2270      	movs	r2, #112	; 0x70
 8002daa:	4393      	bics	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <TIM_Base_SetConfig+0x110>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d01c      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	05db      	lsls	r3, r3, #23
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d017      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <TIM_Base_SetConfig+0x114>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <TIM_Base_SetConfig+0x118>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00f      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <TIM_Base_SetConfig+0x11c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <TIM_Base_SetConfig+0x120>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <TIM_Base_SetConfig+0x124>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x86>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0x128>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0x12c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	4393      	bics	r3, r2
 8002e12:	001a      	movs	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <TIM_Base_SetConfig+0x110>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0xde>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <TIM_Base_SetConfig+0x120>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0xde>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <TIM_Base_SetConfig+0x124>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0xde>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <TIM_Base_SetConfig+0x128>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d103      	bne.n	8002e5a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d106      	bne.n	8002e7a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2201      	movs	r2, #1
 8002e72:	4393      	bics	r3, r2
 8002e74:	001a      	movs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	611a      	str	r2, [r3, #16]
  }
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b004      	add	sp, #16
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000800 	.word	0x40000800
 8002e90:	40002000 	.word	0x40002000
 8002e94:	40014000 	.word	0x40014000
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800
 8002ea0:	fffffcff 	.word	0xfffffcff

08002ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4393      	bics	r3, r2
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <TIM_OC1_SetConfig+0xf8>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	4393      	bics	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2202      	movs	r2, #2
 8002eec:	4393      	bics	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <TIM_OC1_SetConfig+0xfc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <TIM_OC1_SetConfig+0x76>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <TIM_OC1_SetConfig+0x100>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_OC1_SetConfig+0x76>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <TIM_OC1_SetConfig+0x104>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_OC1_SetConfig+0x76>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a25      	ldr	r2, [pc, #148]	; (8002fac <TIM_OC1_SetConfig+0x108>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10c      	bne.n	8002f34 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	4393      	bics	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4393      	bics	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <TIM_OC1_SetConfig+0xfc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <TIM_OC1_SetConfig+0xb0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <TIM_OC1_SetConfig+0x100>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_OC1_SetConfig+0xb0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <TIM_OC1_SetConfig+0x104>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_OC1_SetConfig+0xb0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <TIM_OC1_SetConfig+0x108>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <TIM_OC1_SetConfig+0x10c>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <TIM_OC1_SetConfig+0x110>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	fffeff8f 	.word	0xfffeff8f
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800
 8002fb0:	fffffeff 	.word	0xfffffeff
 8002fb4:	fffffdff 	.word	0xfffffdff

08002fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	2210      	movs	r2, #16
 8002fce:	4393      	bics	r3, r2
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a2e      	ldr	r2, [pc, #184]	; (80030a0 <TIM_OC2_SetConfig+0xe8>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <TIM_OC2_SetConfig+0xec>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2220      	movs	r2, #32
 8003002:	4393      	bics	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <TIM_OC2_SetConfig+0xf0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2280      	movs	r2, #128	; 0x80
 800301e:	4393      	bics	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	4393      	bics	r3, r2
 8003034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <TIM_OC2_SetConfig+0xf0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <TIM_OC2_SetConfig+0x9e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <TIM_OC2_SetConfig+0xf4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <TIM_OC2_SetConfig+0x9e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <TIM_OC2_SetConfig+0xf8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_OC2_SetConfig+0x9e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <TIM_OC2_SetConfig+0xfc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d113      	bne.n	800307e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <TIM_OC2_SetConfig+0x100>)
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <TIM_OC2_SetConfig+0x104>)
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b006      	add	sp, #24
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	feff8fff 	.word	0xfeff8fff
 80030a4:	fffffcff 	.word	0xfffffcff
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800
 80030b8:	fffffbff 	.word	0xfffffbff
 80030bc:	fffff7ff 	.word	0xfffff7ff

080030c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <TIM_OC3_SetConfig+0xe4>)
 80030d6:	401a      	ands	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <TIM_OC3_SetConfig+0xe8>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2203      	movs	r2, #3
 80030f4:	4393      	bics	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	4a29      	ldr	r2, [pc, #164]	; (80031ac <TIM_OC3_SetConfig+0xec>)
 8003106:	4013      	ands	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <TIM_OC3_SetConfig+0xf0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10d      	bne.n	800313a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <TIM_OC3_SetConfig+0xf4>)
 8003122:	4013      	ands	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <TIM_OC3_SetConfig+0xf8>)
 8003136:	4013      	ands	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <TIM_OC3_SetConfig+0xf0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00b      	beq.n	800315a <TIM_OC3_SetConfig+0x9a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <TIM_OC3_SetConfig+0xfc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <TIM_OC3_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <TIM_OC3_SetConfig+0x100>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_OC3_SetConfig+0x9a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <TIM_OC3_SetConfig+0x104>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d113      	bne.n	8003182 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <TIM_OC3_SetConfig+0x108>)
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <TIM_OC3_SetConfig+0x10c>)
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b006      	add	sp, #24
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	fffffeff 	.word	0xfffffeff
 80031a8:	fffeff8f 	.word	0xfffeff8f
 80031ac:	fffffdff 	.word	0xfffffdff
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	fffff7ff 	.word	0xfffff7ff
 80031b8:	fffffbff 	.word	0xfffffbff
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40014400 	.word	0x40014400
 80031c4:	40014800 	.word	0x40014800
 80031c8:	ffffefff 	.word	0xffffefff
 80031cc:	ffffdfff 	.word	0xffffdfff

080031d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a26      	ldr	r2, [pc, #152]	; (8003280 <TIM_OC4_SetConfig+0xb0>)
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <TIM_OC4_SetConfig+0xb4>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <TIM_OC4_SetConfig+0xb8>)
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4a1d      	ldr	r2, [pc, #116]	; (800328c <TIM_OC4_SetConfig+0xbc>)
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	031b      	lsls	r3, r3, #12
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <TIM_OC4_SetConfig+0xc0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_OC4_SetConfig+0x78>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <TIM_OC4_SetConfig+0xc4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_OC4_SetConfig+0x78>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <TIM_OC4_SetConfig+0xc8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_OC4_SetConfig+0x78>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a16      	ldr	r2, [pc, #88]	; (800329c <TIM_OC4_SetConfig+0xcc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d109      	bne.n	800325c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <TIM_OC4_SetConfig+0xd0>)
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	019b      	lsls	r3, r3, #6
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b006      	add	sp, #24
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	ffffefff 	.word	0xffffefff
 8003284:	feff8fff 	.word	0xfeff8fff
 8003288:	fffffcff 	.word	0xfffffcff
 800328c:	ffffdfff 	.word	0xffffdfff
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40014000 	.word	0x40014000
 8003298:	40014400 	.word	0x40014400
 800329c:	40014800 	.word	0x40014800
 80032a0:	ffffbfff 	.word	0xffffbfff

080032a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a23      	ldr	r2, [pc, #140]	; (8003348 <TIM_OC5_SetConfig+0xa4>)
 80032ba:	401a      	ands	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a1f      	ldr	r2, [pc, #124]	; (800334c <TIM_OC5_SetConfig+0xa8>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <TIM_OC5_SetConfig+0xac>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <TIM_OC5_SetConfig+0xb0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_OC5_SetConfig+0x6e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <TIM_OC5_SetConfig+0xb4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_OC5_SetConfig+0x6e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a15      	ldr	r2, [pc, #84]	; (800335c <TIM_OC5_SetConfig+0xb8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_OC5_SetConfig+0x6e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <TIM_OC5_SetConfig+0xbc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d109      	bne.n	8003326 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <TIM_OC5_SetConfig+0xa4>)
 8003316:	4013      	ands	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	621a      	str	r2, [r3, #32]
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	fffeffff 	.word	0xfffeffff
 800334c:	fffeff8f 	.word	0xfffeff8f
 8003350:	fffdffff 	.word	0xfffdffff
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800

08003364 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <TIM_OC6_SetConfig+0xa8>)
 800337a:	401a      	ands	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a20      	ldr	r2, [pc, #128]	; (8003410 <TIM_OC6_SetConfig+0xac>)
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <TIM_OC6_SetConfig+0xb0>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	051b      	lsls	r3, r3, #20
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <TIM_OC6_SetConfig+0xb4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <TIM_OC6_SetConfig+0x70>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <TIM_OC6_SetConfig+0xb8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_OC6_SetConfig+0x70>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <TIM_OC6_SetConfig+0xbc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_OC6_SetConfig+0x70>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a15      	ldr	r2, [pc, #84]	; (8003424 <TIM_OC6_SetConfig+0xc0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d109      	bne.n	80033e8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4a14      	ldr	r2, [pc, #80]	; (8003428 <TIM_OC6_SetConfig+0xc4>)
 80033d8:	4013      	ands	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	b006      	add	sp, #24
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	ffefffff 	.word	0xffefffff
 8003410:	feff8fff 	.word	0xfeff8fff
 8003414:	ffdfffff 	.word	0xffdfffff
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800
 8003428:	fffbffff 	.word	0xfffbffff

0800342c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	2201      	movs	r2, #1
 8003444:	4393      	bics	r3, r2
 8003446:	001a      	movs	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	22f0      	movs	r2, #240	; 0xf0
 8003456:	4393      	bics	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	220a      	movs	r2, #10
 8003468:	4393      	bics	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b006      	add	sp, #24
 8003486:	bd80      	pop	{r7, pc}

08003488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	2210      	movs	r2, #16
 80034a0:	4393      	bics	r3, r2
 80034a2:	001a      	movs	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <TIM_TI2_ConfigInputStage+0x60>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	031b      	lsls	r3, r3, #12
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	22a0      	movs	r2, #160	; 0xa0
 80034c4:	4393      	bics	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b006      	add	sp, #24
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	ffff0fff 	.word	0xffff0fff

080034ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <TIM_ITRx_SetConfig+0x34>)
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	2207      	movs	r2, #7
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	ffcfff8f 	.word	0xffcfff8f

08003524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <TIM_ETR_SetConfig+0x3c>)
 800353c:	4013      	ands	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	021a      	lsls	r2, r3, #8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	431a      	orrs	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b006      	add	sp, #24
 800355e:	bd80      	pop	{r7, pc}
 8003560:	ffff00ff 	.word	0xffff00ff

08003564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	221f      	movs	r2, #31
 8003574:	4013      	ands	r3, r2
 8003576:	2201      	movs	r2, #1
 8003578:	409a      	lsls	r2, r3
 800357a:	0013      	movs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	43d2      	mvns	r2, r2
 8003586:	401a      	ands	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	211f      	movs	r1, #31
 8003594:	400b      	ands	r3, r1
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4099      	lsls	r1, r3
 800359a:	000b      	movs	r3, r1
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b006      	add	sp, #24
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	223c      	movs	r2, #60	; 0x3c
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e05a      	b.n	800367a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	223c      	movs	r2, #60	; 0x3c
 80035c8:	2101      	movs	r1, #1
 80035ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	223d      	movs	r2, #61	; 0x3d
 80035d0:	2102      	movs	r1, #2
 80035d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2270      	movs	r2, #112	; 0x70
 8003604:	4393      	bics	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d014      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	05db      	lsls	r3, r3, #23
 800362c:	429a      	cmp	r2, r3
 800362e:	d00e      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a14      	ldr	r2, [pc, #80]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10c      	bne.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	4393      	bics	r3, r2
 8003654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	223d      	movs	r2, #61	; 0x3d
 800366c:	2101      	movs	r1, #1
 800366e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	223c      	movs	r2, #60	; 0x3c
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	40012c00 	.word	0x40012c00
 8003688:	ff0fffff 	.word	0xff0fffff
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40014000 	.word	0x40014000

08003698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223c      	movs	r2, #60	; 0x3c
 80036aa:	5c9b      	ldrb	r3, [r3, r2]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e06f      	b.n	8003794 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	223c      	movs	r2, #60	; 0x3c
 80036b8:	2101      	movs	r1, #1
 80036ba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	22ff      	movs	r2, #255	; 0xff
 80036c0:	4393      	bics	r3, r2
 80036c2:	001a      	movs	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a33      	ldr	r2, [pc, #204]	; (800379c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80036d0:	401a      	ands	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a30      	ldr	r2, [pc, #192]	; (80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80036de:	401a      	ands	r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a2e      	ldr	r2, [pc, #184]	; (80037a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80036ec:	401a      	ands	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a2b      	ldr	r2, [pc, #172]	; (80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80036fa:	401a      	ands	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003708:	401a      	ands	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003716:	401a      	ands	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003724:	401a      	ands	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003734:	401a      	ands	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d11c      	bne.n	8003782 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800374c:	401a      	ands	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	051b      	lsls	r3, r3, #20
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800375c:	401a      	ands	r2, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800376a:	401a      	ands	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003778:	401a      	ands	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	223c      	movs	r2, #60	; 0x3c
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fffffcff 	.word	0xfffffcff
 80037a0:	fffffbff 	.word	0xfffffbff
 80037a4:	fffff7ff 	.word	0xfffff7ff
 80037a8:	ffffefff 	.word	0xffffefff
 80037ac:	ffffdfff 	.word	0xffffdfff
 80037b0:	ffffbfff 	.word	0xffffbfff
 80037b4:	fff0ffff 	.word	0xfff0ffff
 80037b8:	efffffff 	.word	0xefffffff
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	ff0fffff 	.word	0xff0fffff
 80037c4:	feffffff 	.word	0xfeffffff
 80037c8:	fdffffff 	.word	0xfdffffff
 80037cc:	dfffffff 	.word	0xdfffffff

080037d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e046      	b.n	8003870 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2288      	movs	r2, #136	; 0x88
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2284      	movs	r2, #132	; 0x84
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fd fc26 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2288      	movs	r2, #136	; 0x88
 8003800:	2124      	movs	r1, #36	; 0x24
 8003802:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2101      	movs	r1, #1
 8003810:	438a      	bics	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fb82 	bl	8003f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f828 	bl	800387c <UART_SetConfig>
 800382c:	0003      	movs	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e01c      	b.n	8003870 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	490d      	ldr	r1, [pc, #52]	; (8003878 <HAL_UART_Init+0xa8>)
 8003842:	400a      	ands	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	212a      	movs	r1, #42	; 0x2a
 8003852:	438a      	bics	r2, r1
 8003854:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f000 fc11 	bl	8004090 <UART_CheckIdleState>
 800386e:	0003      	movs	r3, r0
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}
 8003878:	ffffb7ff 	.word	0xffffb7ff

0800387c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	b090      	sub	sp, #64	; 0x40
 8003880:	af00      	add	r7, sp, #0
 8003882:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003884:	231a      	movs	r3, #26
 8003886:	2220      	movs	r2, #32
 8003888:	189b      	adds	r3, r3, r2
 800388a:	19db      	adds	r3, r3, r7
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	431a      	orrs	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	431a      	orrs	r2, r3
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4ac1      	ldr	r2, [pc, #772]	; (8003bb4 <UART_SetConfig+0x338>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	430b      	orrs	r3, r1
 80038bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4abc      	ldr	r2, [pc, #752]	; (8003bb8 <UART_SetConfig+0x33c>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	68d9      	ldr	r1, [r3, #12]
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	0003      	movs	r3, r0
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4ab6      	ldr	r2, [pc, #728]	; (8003bbc <UART_SetConfig+0x340>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <UART_SetConfig+0x80>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4ab4      	ldr	r2, [pc, #720]	; (8003bc0 <UART_SetConfig+0x344>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f8:	4313      	orrs	r3, r2
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4ab0      	ldr	r2, [pc, #704]	; (8003bc4 <UART_SetConfig+0x348>)
 8003904:	4013      	ands	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390e:	430b      	orrs	r3, r1
 8003910:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	220f      	movs	r2, #15
 800391a:	4393      	bics	r3, r2
 800391c:	0018      	movs	r0, r3
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	0003      	movs	r3, r0
 8003928:	430b      	orrs	r3, r1
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4aa5      	ldr	r2, [pc, #660]	; (8003bc8 <UART_SetConfig+0x34c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d131      	bne.n	800399a <UART_SetConfig+0x11e>
 8003936:	4ba5      	ldr	r3, [pc, #660]	; (8003bcc <UART_SetConfig+0x350>)
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	2203      	movs	r2, #3
 800393c:	4013      	ands	r3, r2
 800393e:	2b03      	cmp	r3, #3
 8003940:	d01d      	beq.n	800397e <UART_SetConfig+0x102>
 8003942:	d823      	bhi.n	800398c <UART_SetConfig+0x110>
 8003944:	2b02      	cmp	r3, #2
 8003946:	d00c      	beq.n	8003962 <UART_SetConfig+0xe6>
 8003948:	d820      	bhi.n	800398c <UART_SetConfig+0x110>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <UART_SetConfig+0xd8>
 800394e:	2b01      	cmp	r3, #1
 8003950:	d00e      	beq.n	8003970 <UART_SetConfig+0xf4>
 8003952:	e01b      	b.n	800398c <UART_SetConfig+0x110>
 8003954:	231b      	movs	r3, #27
 8003956:	2220      	movs	r2, #32
 8003958:	189b      	adds	r3, r3, r2
 800395a:	19db      	adds	r3, r3, r7
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e154      	b.n	8003c0c <UART_SetConfig+0x390>
 8003962:	231b      	movs	r3, #27
 8003964:	2220      	movs	r2, #32
 8003966:	189b      	adds	r3, r3, r2
 8003968:	19db      	adds	r3, r3, r7
 800396a:	2202      	movs	r2, #2
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e14d      	b.n	8003c0c <UART_SetConfig+0x390>
 8003970:	231b      	movs	r3, #27
 8003972:	2220      	movs	r2, #32
 8003974:	189b      	adds	r3, r3, r2
 8003976:	19db      	adds	r3, r3, r7
 8003978:	2204      	movs	r2, #4
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e146      	b.n	8003c0c <UART_SetConfig+0x390>
 800397e:	231b      	movs	r3, #27
 8003980:	2220      	movs	r2, #32
 8003982:	189b      	adds	r3, r3, r2
 8003984:	19db      	adds	r3, r3, r7
 8003986:	2208      	movs	r2, #8
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e13f      	b.n	8003c0c <UART_SetConfig+0x390>
 800398c:	231b      	movs	r3, #27
 800398e:	2220      	movs	r2, #32
 8003990:	189b      	adds	r3, r3, r2
 8003992:	19db      	adds	r3, r3, r7
 8003994:	2210      	movs	r2, #16
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e138      	b.n	8003c0c <UART_SetConfig+0x390>
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a8c      	ldr	r2, [pc, #560]	; (8003bd0 <UART_SetConfig+0x354>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d131      	bne.n	8003a08 <UART_SetConfig+0x18c>
 80039a4:	4b89      	ldr	r3, [pc, #548]	; (8003bcc <UART_SetConfig+0x350>)
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	220c      	movs	r2, #12
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d01d      	beq.n	80039ec <UART_SetConfig+0x170>
 80039b0:	d823      	bhi.n	80039fa <UART_SetConfig+0x17e>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d00c      	beq.n	80039d0 <UART_SetConfig+0x154>
 80039b6:	d820      	bhi.n	80039fa <UART_SetConfig+0x17e>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <UART_SetConfig+0x146>
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d00e      	beq.n	80039de <UART_SetConfig+0x162>
 80039c0:	e01b      	b.n	80039fa <UART_SetConfig+0x17e>
 80039c2:	231b      	movs	r3, #27
 80039c4:	2220      	movs	r2, #32
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	19db      	adds	r3, r3, r7
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e11d      	b.n	8003c0c <UART_SetConfig+0x390>
 80039d0:	231b      	movs	r3, #27
 80039d2:	2220      	movs	r2, #32
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	19db      	adds	r3, r3, r7
 80039d8:	2202      	movs	r2, #2
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e116      	b.n	8003c0c <UART_SetConfig+0x390>
 80039de:	231b      	movs	r3, #27
 80039e0:	2220      	movs	r2, #32
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	19db      	adds	r3, r3, r7
 80039e6:	2204      	movs	r2, #4
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e10f      	b.n	8003c0c <UART_SetConfig+0x390>
 80039ec:	231b      	movs	r3, #27
 80039ee:	2220      	movs	r2, #32
 80039f0:	189b      	adds	r3, r3, r2
 80039f2:	19db      	adds	r3, r3, r7
 80039f4:	2208      	movs	r2, #8
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e108      	b.n	8003c0c <UART_SetConfig+0x390>
 80039fa:	231b      	movs	r3, #27
 80039fc:	2220      	movs	r2, #32
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	19db      	adds	r3, r3, r7
 8003a02:	2210      	movs	r2, #16
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e101      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a71      	ldr	r2, [pc, #452]	; (8003bd4 <UART_SetConfig+0x358>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d131      	bne.n	8003a76 <UART_SetConfig+0x1fa>
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <UART_SetConfig+0x350>)
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	2230      	movs	r2, #48	; 0x30
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b30      	cmp	r3, #48	; 0x30
 8003a1c:	d01d      	beq.n	8003a5a <UART_SetConfig+0x1de>
 8003a1e:	d823      	bhi.n	8003a68 <UART_SetConfig+0x1ec>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d00c      	beq.n	8003a3e <UART_SetConfig+0x1c2>
 8003a24:	d820      	bhi.n	8003a68 <UART_SetConfig+0x1ec>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <UART_SetConfig+0x1b4>
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d00e      	beq.n	8003a4c <UART_SetConfig+0x1d0>
 8003a2e:	e01b      	b.n	8003a68 <UART_SetConfig+0x1ec>
 8003a30:	231b      	movs	r3, #27
 8003a32:	2220      	movs	r2, #32
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e0e6      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2220      	movs	r2, #32
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e0df      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2220      	movs	r2, #32
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e0d8      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	2208      	movs	r2, #8
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e0d1      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	2210      	movs	r2, #16
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e0ca      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <UART_SetConfig+0x35c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d106      	bne.n	8003a8e <UART_SetConfig+0x212>
 8003a80:	231b      	movs	r3, #27
 8003a82:	2220      	movs	r2, #32
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e0be      	b.n	8003c0c <UART_SetConfig+0x390>
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <UART_SetConfig+0x360>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d106      	bne.n	8003aa6 <UART_SetConfig+0x22a>
 8003a98:	231b      	movs	r3, #27
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	189b      	adds	r3, r3, r2
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e0b2      	b.n	8003c0c <UART_SetConfig+0x390>
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a4d      	ldr	r2, [pc, #308]	; (8003be0 <UART_SetConfig+0x364>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d106      	bne.n	8003abe <UART_SetConfig+0x242>
 8003ab0:	231b      	movs	r3, #27
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	e0a6      	b.n	8003c0c <UART_SetConfig+0x390>
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	; (8003bbc <UART_SetConfig+0x340>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d13e      	bne.n	8003b46 <UART_SetConfig+0x2ca>
 8003ac8:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <UART_SetConfig+0x350>)
 8003aca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003acc:	23c0      	movs	r3, #192	; 0xc0
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	22c0      	movs	r2, #192	; 0xc0
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d027      	beq.n	8003b2a <UART_SetConfig+0x2ae>
 8003ada:	22c0      	movs	r2, #192	; 0xc0
 8003adc:	0112      	lsls	r2, r2, #4
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d82a      	bhi.n	8003b38 <UART_SetConfig+0x2bc>
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	0112      	lsls	r2, r2, #4
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d011      	beq.n	8003b0e <UART_SetConfig+0x292>
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d822      	bhi.n	8003b38 <UART_SetConfig+0x2bc>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <UART_SetConfig+0x284>
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	00d2      	lsls	r2, r2, #3
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <UART_SetConfig+0x2a0>
 8003afe:	e01b      	b.n	8003b38 <UART_SetConfig+0x2bc>
 8003b00:	231b      	movs	r3, #27
 8003b02:	2220      	movs	r2, #32
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e07e      	b.n	8003c0c <UART_SetConfig+0x390>
 8003b0e:	231b      	movs	r3, #27
 8003b10:	2220      	movs	r2, #32
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	19db      	adds	r3, r3, r7
 8003b16:	2202      	movs	r2, #2
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e077      	b.n	8003c0c <UART_SetConfig+0x390>
 8003b1c:	231b      	movs	r3, #27
 8003b1e:	2220      	movs	r2, #32
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	2204      	movs	r2, #4
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e070      	b.n	8003c0c <UART_SetConfig+0x390>
 8003b2a:	231b      	movs	r3, #27
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	2208      	movs	r2, #8
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e069      	b.n	8003c0c <UART_SetConfig+0x390>
 8003b38:	231b      	movs	r3, #27
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2210      	movs	r2, #16
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e062      	b.n	8003c0c <UART_SetConfig+0x390>
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <UART_SetConfig+0x344>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d157      	bne.n	8003c00 <UART_SetConfig+0x384>
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <UART_SetConfig+0x350>)
 8003b52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b54:	23c0      	movs	r3, #192	; 0xc0
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	22c0      	movs	r2, #192	; 0xc0
 8003b5c:	0092      	lsls	r2, r2, #2
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d040      	beq.n	8003be4 <UART_SetConfig+0x368>
 8003b62:	22c0      	movs	r2, #192	; 0xc0
 8003b64:	0092      	lsls	r2, r2, #2
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d843      	bhi.n	8003bf2 <UART_SetConfig+0x376>
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	0092      	lsls	r2, r2, #2
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d011      	beq.n	8003b96 <UART_SetConfig+0x31a>
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	0092      	lsls	r2, r2, #2
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d83b      	bhi.n	8003bf2 <UART_SetConfig+0x376>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <UART_SetConfig+0x30c>
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	0052      	lsls	r2, r2, #1
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <UART_SetConfig+0x328>
 8003b86:	e034      	b.n	8003bf2 <UART_SetConfig+0x376>
 8003b88:	231b      	movs	r3, #27
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e03a      	b.n	8003c0c <UART_SetConfig+0x390>
 8003b96:	231b      	movs	r3, #27
 8003b98:	2220      	movs	r2, #32
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e033      	b.n	8003c0c <UART_SetConfig+0x390>
 8003ba4:	231b      	movs	r3, #27
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	2204      	movs	r2, #4
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e02c      	b.n	8003c0c <UART_SetConfig+0x390>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	cfff69f3 	.word	0xcfff69f3
 8003bb8:	ffffcfff 	.word	0xffffcfff
 8003bbc:	40008000 	.word	0x40008000
 8003bc0:	40008400 	.word	0x40008400
 8003bc4:	11fff4ff 	.word	0x11fff4ff
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	40004800 	.word	0x40004800
 8003bd8:	40004c00 	.word	0x40004c00
 8003bdc:	40005000 	.word	0x40005000
 8003be0:	40013c00 	.word	0x40013c00
 8003be4:	231b      	movs	r3, #27
 8003be6:	2220      	movs	r2, #32
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	2208      	movs	r2, #8
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e00c      	b.n	8003c0c <UART_SetConfig+0x390>
 8003bf2:	231b      	movs	r3, #27
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e005      	b.n	8003c0c <UART_SetConfig+0x390>
 8003c00:	231b      	movs	r3, #27
 8003c02:	2220      	movs	r2, #32
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	2210      	movs	r2, #16
 8003c0a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4ac1      	ldr	r2, [pc, #772]	; (8003f18 <UART_SetConfig+0x69c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d005      	beq.n	8003c22 <UART_SetConfig+0x3a6>
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4ac0      	ldr	r2, [pc, #768]	; (8003f1c <UART_SetConfig+0x6a0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d000      	beq.n	8003c22 <UART_SetConfig+0x3a6>
 8003c20:	e093      	b.n	8003d4a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c22:	231b      	movs	r3, #27
 8003c24:	2220      	movs	r2, #32
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	19db      	adds	r3, r3, r7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d015      	beq.n	8003c5c <UART_SetConfig+0x3e0>
 8003c30:	dc18      	bgt.n	8003c64 <UART_SetConfig+0x3e8>
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00d      	beq.n	8003c52 <UART_SetConfig+0x3d6>
 8003c36:	dc15      	bgt.n	8003c64 <UART_SetConfig+0x3e8>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <UART_SetConfig+0x3c6>
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d005      	beq.n	8003c4c <UART_SetConfig+0x3d0>
 8003c40:	e010      	b.n	8003c64 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c42:	f7fe fac7 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003c46:	0003      	movs	r3, r0
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c4a:	e014      	b.n	8003c76 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4bb4      	ldr	r3, [pc, #720]	; (8003f20 <UART_SetConfig+0x6a4>)
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c50:	e011      	b.n	8003c76 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7fe fa33 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003c56:	0003      	movs	r3, r0
 8003c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c5a:	e00c      	b.n	8003c76 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c62:	e008      	b.n	8003c76 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003c68:	231a      	movs	r3, #26
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
        break;
 8003c74:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d100      	bne.n	8003c7e <UART_SetConfig+0x402>
 8003c7c:	e135      	b.n	8003eea <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c82:	4ba8      	ldr	r3, [pc, #672]	; (8003f24 <UART_SetConfig+0x6a8>)
 8003c84:	0052      	lsls	r2, r2, #1
 8003c86:	5ad3      	ldrh	r3, [r2, r3]
 8003c88:	0019      	movs	r1, r3
 8003c8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c8c:	f7fc fa3a 	bl	8000104 <__udivsi3>
 8003c90:	0003      	movs	r3, r0
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	0013      	movs	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	189b      	adds	r3, r3, r2
 8003c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d305      	bcc.n	8003cb0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d906      	bls.n	8003cbe <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003cb0:	231a      	movs	r3, #26
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	19db      	adds	r3, r3, r7
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e044      	b.n	8003d48 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cca:	4b96      	ldr	r3, [pc, #600]	; (8003f24 <UART_SetConfig+0x6a8>)
 8003ccc:	0052      	lsls	r2, r2, #1
 8003cce:	5ad3      	ldrh	r3, [r2, r3]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	69b8      	ldr	r0, [r7, #24]
 8003cdc:	69f9      	ldr	r1, [r7, #28]
 8003cde:	f7fc fb87 	bl	80003f0 <__aeabi_uldivmod>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	000b      	movs	r3, r1
 8003ce6:	0e11      	lsrs	r1, r2, #24
 8003ce8:	021d      	lsls	r5, r3, #8
 8003cea:	430d      	orrs	r5, r1
 8003cec:	0214      	lsls	r4, r2, #8
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68b8      	ldr	r0, [r7, #8]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	1900      	adds	r0, r0, r4
 8003d00:	4169      	adcs	r1, r5
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f7fc fb6e 	bl	80003f0 <__aeabi_uldivmod>
 8003d14:	0002      	movs	r2, r0
 8003d16:	000b      	movs	r3, r1
 8003d18:	0013      	movs	r3, r2
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	23c0      	movs	r3, #192	; 0xc0
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d309      	bcc.n	8003d3a <UART_SetConfig+0x4be>
 8003d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	035b      	lsls	r3, r3, #13
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d204      	bcs.n	8003d3a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d36:	60da      	str	r2, [r3, #12]
 8003d38:	e006      	b.n	8003d48 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003d3a:	231a      	movs	r3, #26
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	19db      	adds	r3, r3, r7
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003d46:	e0d0      	b.n	8003eea <UART_SetConfig+0x66e>
 8003d48:	e0cf      	b.n	8003eea <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d000      	beq.n	8003d58 <UART_SetConfig+0x4dc>
 8003d56:	e070      	b.n	8003e3a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003d58:	231b      	movs	r3, #27
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d015      	beq.n	8003d92 <UART_SetConfig+0x516>
 8003d66:	dc18      	bgt.n	8003d9a <UART_SetConfig+0x51e>
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d00d      	beq.n	8003d88 <UART_SetConfig+0x50c>
 8003d6c:	dc15      	bgt.n	8003d9a <UART_SetConfig+0x51e>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <UART_SetConfig+0x4fc>
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d005      	beq.n	8003d82 <UART_SetConfig+0x506>
 8003d76:	e010      	b.n	8003d9a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fa2c 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d80:	e014      	b.n	8003dac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d82:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <UART_SetConfig+0x6a4>)
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d86:	e011      	b.n	8003dac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d88:	f7fe f998 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d90:	e00c      	b.n	8003dac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d92:	2380      	movs	r3, #128	; 0x80
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d98:	e008      	b.n	8003dac <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003d9e:	231a      	movs	r3, #26
 8003da0:	2220      	movs	r2, #32
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	19db      	adds	r3, r3, r7
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
        break;
 8003daa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d100      	bne.n	8003db4 <UART_SetConfig+0x538>
 8003db2:	e09a      	b.n	8003eea <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db8:	4b5a      	ldr	r3, [pc, #360]	; (8003f24 <UART_SetConfig+0x6a8>)
 8003dba:	0052      	lsls	r2, r2, #1
 8003dbc:	5ad3      	ldrh	r3, [r2, r3]
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dc2:	f7fc f99f 	bl	8000104 <__udivsi3>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	005a      	lsls	r2, r3, #1
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	18d2      	adds	r2, r2, r3
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f7fc f993 	bl	8000104 <__udivsi3>
 8003dde:	0003      	movs	r3, r0
 8003de0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2b0f      	cmp	r3, #15
 8003de6:	d921      	bls.n	8003e2c <UART_SetConfig+0x5b0>
 8003de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	025b      	lsls	r3, r3, #9
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d21c      	bcs.n	8003e2c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	200e      	movs	r0, #14
 8003df8:	2420      	movs	r4, #32
 8003dfa:	1903      	adds	r3, r0, r4
 8003dfc:	19db      	adds	r3, r3, r7
 8003dfe:	210f      	movs	r1, #15
 8003e00:	438a      	bics	r2, r1
 8003e02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	b299      	uxth	r1, r3
 8003e10:	1903      	adds	r3, r0, r4
 8003e12:	19db      	adds	r3, r3, r7
 8003e14:	1902      	adds	r2, r0, r4
 8003e16:	19d2      	adds	r2, r2, r7
 8003e18:	8812      	ldrh	r2, [r2, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1902      	adds	r2, r0, r4
 8003e24:	19d2      	adds	r2, r2, r7
 8003e26:	8812      	ldrh	r2, [r2, #0]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	e05e      	b.n	8003eea <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2c:	231a      	movs	r3, #26
 8003e2e:	2220      	movs	r2, #32
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	19db      	adds	r3, r3, r7
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e057      	b.n	8003eea <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e3a:	231b      	movs	r3, #27
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	19db      	adds	r3, r3, r7
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d015      	beq.n	8003e74 <UART_SetConfig+0x5f8>
 8003e48:	dc18      	bgt.n	8003e7c <UART_SetConfig+0x600>
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d00d      	beq.n	8003e6a <UART_SetConfig+0x5ee>
 8003e4e:	dc15      	bgt.n	8003e7c <UART_SetConfig+0x600>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <UART_SetConfig+0x5de>
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d005      	beq.n	8003e64 <UART_SetConfig+0x5e8>
 8003e58:	e010      	b.n	8003e7c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5a:	f7fe f9bb 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e62:	e014      	b.n	8003e8e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <UART_SetConfig+0x6a4>)
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e68:	e011      	b.n	8003e8e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7fe f927 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e72:	e00c      	b.n	8003e8e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e7a:	e008      	b.n	8003e8e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e80:	231a      	movs	r3, #26
 8003e82:	2220      	movs	r2, #32
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	19db      	adds	r3, r3, r7
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
        break;
 8003e8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02a      	beq.n	8003eea <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <UART_SetConfig+0x6a8>)
 8003e9a:	0052      	lsls	r2, r2, #1
 8003e9c:	5ad3      	ldrh	r3, [r2, r3]
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ea2:	f7fc f92f 	bl	8000104 <__udivsi3>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	001a      	movs	r2, r3
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	18d2      	adds	r2, r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	0010      	movs	r0, r2
 8003eba:	f7fc f923 	bl	8000104 <__udivsi3>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2b0f      	cmp	r3, #15
 8003ec6:	d90a      	bls.n	8003ede <UART_SetConfig+0x662>
 8003ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	025b      	lsls	r3, r3, #9
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d205      	bcs.n	8003ede <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	e005      	b.n	8003eea <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003ede:	231a      	movs	r3, #26
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	19db      	adds	r3, r3, r7
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	226a      	movs	r2, #106	; 0x6a
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2268      	movs	r2, #104	; 0x68
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2200      	movs	r2, #0
 8003efe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	2200      	movs	r2, #0
 8003f04:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003f06:	231a      	movs	r3, #26
 8003f08:	2220      	movs	r2, #32
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b010      	add	sp, #64	; 0x40
 8003f16:	bdb0      	pop	{r4, r5, r7, pc}
 8003f18:	40008000 	.word	0x40008000
 8003f1c:	40008400 	.word	0x40008400
 8003f20:	00f42400 	.word	0x00f42400
 8003f24:	080048c0 	.word	0x080048c0

08003f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	2208      	movs	r2, #8
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a4a      	ldr	r2, [pc, #296]	; (800406c <UART_AdvFeatureConfig+0x144>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4a43      	ldr	r2, [pc, #268]	; (8004070 <UART_AdvFeatureConfig+0x148>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2202      	movs	r2, #2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a3b      	ldr	r2, [pc, #236]	; (8004074 <UART_AdvFeatureConfig+0x14c>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d00b      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a34      	ldr	r2, [pc, #208]	; (8004078 <UART_AdvFeatureConfig+0x150>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <UART_AdvFeatureConfig+0x154>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	2220      	movs	r2, #32
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a25      	ldr	r2, [pc, #148]	; (8004080 <UART_AdvFeatureConfig+0x158>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	2240      	movs	r2, #64	; 0x40
 8004002:	4013      	ands	r3, r2
 8004004:	d01d      	beq.n	8004042 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <UART_AdvFeatureConfig+0x15c>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	035b      	lsls	r3, r3, #13
 8004026:	429a      	cmp	r2, r3
 8004028:	d10b      	bne.n	8004042 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <UART_AdvFeatureConfig+0x160>)
 8004032:	4013      	ands	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	4013      	ands	r3, r2
 800404a:	d00b      	beq.n	8004064 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <UART_AdvFeatureConfig+0x164>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}
 800406c:	ffff7fff 	.word	0xffff7fff
 8004070:	fffdffff 	.word	0xfffdffff
 8004074:	fffeffff 	.word	0xfffeffff
 8004078:	fffbffff 	.word	0xfffbffff
 800407c:	ffffefff 	.word	0xffffefff
 8004080:	ffffdfff 	.word	0xffffdfff
 8004084:	ffefffff 	.word	0xffefffff
 8004088:	ff9fffff 	.word	0xff9fffff
 800408c:	fff7ffff 	.word	0xfff7ffff

08004090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b092      	sub	sp, #72	; 0x48
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2290      	movs	r2, #144	; 0x90
 800409c:	2100      	movs	r1, #0
 800409e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a0:	f7fd f8d8 	bl	8001254 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2208      	movs	r2, #8
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d12d      	bne.n	8004112 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	0391      	lsls	r1, r2, #14
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4a47      	ldr	r2, [pc, #284]	; (80041dc <UART_CheckIdleState+0x14c>)
 80040c0:	9200      	str	r2, [sp, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f000 f88e 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d022      	beq.n	8004112 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040cc:	f3ef 8310 	mrs	r3, PRIMASK
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d6:	2301      	movs	r3, #1
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	438a      	bics	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2288      	movs	r2, #136	; 0x88
 8004102:	2120      	movs	r1, #32
 8004104:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2284      	movs	r2, #132	; 0x84
 800410a:	2100      	movs	r1, #0
 800410c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e060      	b.n	80041d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	2b04      	cmp	r3, #4
 800411e:	d146      	bne.n	80041ae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	03d1      	lsls	r1, r2, #15
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <UART_CheckIdleState+0x14c>)
 800412a:	9200      	str	r2, [sp, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	f000 f859 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004132:	1e03      	subs	r3, r0, #0
 8004134:	d03b      	beq.n	80041ae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	60fb      	str	r3, [r7, #12]
  return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4922      	ldr	r1, [pc, #136]	; (80041e0 <UART_CheckIdleState+0x150>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	61bb      	str	r3, [r7, #24]
  return(result);
 800416e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	438a      	bics	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	228c      	movs	r2, #140	; 0x8c
 800419e:	2120      	movs	r1, #32
 80041a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2284      	movs	r2, #132	; 0x84
 80041a6:	2100      	movs	r1, #0
 80041a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e012      	b.n	80041d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2288      	movs	r2, #136	; 0x88
 80041b2:	2120      	movs	r1, #32
 80041b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	228c      	movs	r2, #140	; 0x8c
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2284      	movs	r2, #132	; 0x84
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b010      	add	sp, #64	; 0x40
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	01ffffff 	.word	0x01ffffff
 80041e0:	fffffedf 	.word	0xfffffedf

080041e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f4:	e051      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	3301      	adds	r3, #1
 80041fa:	d04e      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7fd f82a 	bl	8001254 <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <UART_WaitOnFlagUntilTimeout+0x2e>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e051      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2204      	movs	r2, #4
 800421e:	4013      	ands	r3, r2
 8004220:	d03b      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d038      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d035      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2208      	movs	r2, #8
 8004236:	4013      	ands	r3, r2
 8004238:	2b08      	cmp	r3, #8
 800423a:	d111      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	0018      	movs	r0, r3
 8004248:	f000 f83c 	bl	80042c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2290      	movs	r2, #144	; 0x90
 8004250:	2108      	movs	r1, #8
 8004252:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2284      	movs	r2, #132	; 0x84
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e02c      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	401a      	ands	r2, r3
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	429a      	cmp	r2, r3
 8004272:	d112      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	0112      	lsls	r2, r2, #4
 800427c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	0018      	movs	r0, r3
 8004282:	f000 f81f 	bl	80042c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2290      	movs	r2, #144	; 0x90
 800428a:	2120      	movs	r1, #32
 800428c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2284      	movs	r2, #132	; 0x84
 8004292:	2100      	movs	r1, #0
 8004294:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	425a      	negs	r2, r3
 80042aa:	4153      	adcs	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	001a      	movs	r2, r3
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d09e      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042cc:	f3ef 8310 	mrs	r3, PRIMASK
 80042d0:	617b      	str	r3, [r7, #20]
  return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4926      	ldr	r1, [pc, #152]	; (8004388 <UART_EndRxTransfer+0xc4>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004302:	623b      	str	r3, [r7, #32]
  return(result);
 8004304:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
 8004308:	2301      	movs	r3, #1
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	491b      	ldr	r1, [pc, #108]	; (800438c <UART_EndRxTransfer+0xc8>)
 8004320:	400a      	ands	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	f383 8810 	msr	PRIMASK, r3
}
 800432e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d118      	bne.n	800436a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004338:	f3ef 8310 	mrs	r3, PRIMASK
 800433c:	60bb      	str	r3, [r7, #8]
  return(result);
 800433e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2110      	movs	r1, #16
 800435a:	438a      	bics	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	228c      	movs	r2, #140	; 0x8c
 800436e:	2120      	movs	r1, #32
 8004370:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b00e      	add	sp, #56	; 0x38
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	fffffedf 	.word	0xfffffedf
 800438c:	effffffe 	.word	0xeffffffe

08004390 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2284      	movs	r2, #132	; 0x84
 800439c:	5c9b      	ldrb	r3, [r3, r2]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e027      	b.n	80043f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2284      	movs	r2, #132	; 0x84
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2288      	movs	r2, #136	; 0x88
 80043b2:	2124      	movs	r1, #36	; 0x24
 80043b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	438a      	bics	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <HAL_UARTEx_DisableFifoMode+0x70>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2288      	movs	r2, #136	; 0x88
 80043e8:	2120      	movs	r1, #32
 80043ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2284      	movs	r2, #132	; 0x84
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b004      	add	sp, #16
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	dfffffff 	.word	0xdfffffff

08004404 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2284      	movs	r2, #132	; 0x84
 8004412:	5c9b      	ldrb	r3, [r3, r2]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e02e      	b.n	800447a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2284      	movs	r2, #132	; 0x84
 8004420:	2101      	movs	r1, #1
 8004422:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2288      	movs	r2, #136	; 0x88
 8004428:	2124      	movs	r1, #36	; 0x24
 800442a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2101      	movs	r1, #1
 8004440:	438a      	bics	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	08d9      	lsrs	r1, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f854 	bl	8004508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2288      	movs	r2, #136	; 0x88
 800446c:	2120      	movs	r1, #32
 800446e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2284      	movs	r2, #132	; 0x84
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b004      	add	sp, #16
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2284      	movs	r2, #132	; 0x84
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e02f      	b.n	80044fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2284      	movs	r2, #132	; 0x84
 80044a0:	2101      	movs	r1, #1
 80044a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2288      	movs	r2, #136	; 0x88
 80044a8:	2124      	movs	r1, #36	; 0x24
 80044aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2101      	movs	r1, #1
 80044c0:	438a      	bics	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 f813 	bl	8004508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2288      	movs	r2, #136	; 0x88
 80044ee:	2120      	movs	r1, #32
 80044f0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2284      	movs	r2, #132	; 0x84
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}
 8004504:	f1ffffff 	.word	0xf1ffffff

08004508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004514:	2b00      	cmp	r3, #0
 8004516:	d108      	bne.n	800452a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	226a      	movs	r2, #106	; 0x6a
 800451c:	2101      	movs	r1, #1
 800451e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2268      	movs	r2, #104	; 0x68
 8004524:	2101      	movs	r1, #1
 8004526:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004528:	e043      	b.n	80045b2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800452a:	260f      	movs	r6, #15
 800452c:	19bb      	adds	r3, r7, r6
 800452e:	2208      	movs	r2, #8
 8004530:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004532:	200e      	movs	r0, #14
 8004534:	183b      	adds	r3, r7, r0
 8004536:	2208      	movs	r2, #8
 8004538:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	0e5b      	lsrs	r3, r3, #25
 8004542:	b2da      	uxtb	r2, r3
 8004544:	240d      	movs	r4, #13
 8004546:	193b      	adds	r3, r7, r4
 8004548:	2107      	movs	r1, #7
 800454a:	400a      	ands	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	0f5b      	lsrs	r3, r3, #29
 8004556:	b2da      	uxtb	r2, r3
 8004558:	250c      	movs	r5, #12
 800455a:	197b      	adds	r3, r7, r5
 800455c:	2107      	movs	r1, #7
 800455e:	400a      	ands	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004562:	183b      	adds	r3, r7, r0
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	197a      	adds	r2, r7, r5
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	4914      	ldr	r1, [pc, #80]	; (80045bc <UARTEx_SetNbDataToProcess+0xb4>)
 800456c:	5c8a      	ldrb	r2, [r1, r2]
 800456e:	435a      	muls	r2, r3
 8004570:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004572:	197b      	adds	r3, r7, r5
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800457a:	0019      	movs	r1, r3
 800457c:	f7fb fe4c 	bl	8000218 <__divsi3>
 8004580:	0003      	movs	r3, r0
 8004582:	b299      	uxth	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	226a      	movs	r2, #106	; 0x6a
 8004588:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800458a:	19bb      	adds	r3, r7, r6
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	193a      	adds	r2, r7, r4
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	490a      	ldr	r1, [pc, #40]	; (80045bc <UARTEx_SetNbDataToProcess+0xb4>)
 8004594:	5c8a      	ldrb	r2, [r1, r2]
 8004596:	435a      	muls	r2, r3
 8004598:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800459a:	193b      	adds	r3, r7, r4
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <UARTEx_SetNbDataToProcess+0xb8>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045a2:	0019      	movs	r1, r3
 80045a4:	f7fb fe38 	bl	8000218 <__divsi3>
 80045a8:	0003      	movs	r3, r0
 80045aa:	b299      	uxth	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2268      	movs	r2, #104	; 0x68
 80045b0:	5299      	strh	r1, [r3, r2]
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b005      	add	sp, #20
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	080048d8 	.word	0x080048d8
 80045c0:	080048e0 	.word	0x080048e0

080045c4 <malloc>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <malloc+0x10>)
 80045c8:	0001      	movs	r1, r0
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	f000 f826 	bl	800461c <_malloc_r>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	20000058 	.word	0x20000058

080045d8 <sbrk_aligned>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4e0f      	ldr	r6, [pc, #60]	; (8004618 <sbrk_aligned+0x40>)
 80045dc:	000d      	movs	r5, r1
 80045de:	6831      	ldr	r1, [r6, #0]
 80045e0:	0004      	movs	r4, r0
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d102      	bne.n	80045ec <sbrk_aligned+0x14>
 80045e6:	f000 f8b3 	bl	8004750 <_sbrk_r>
 80045ea:	6030      	str	r0, [r6, #0]
 80045ec:	0029      	movs	r1, r5
 80045ee:	0020      	movs	r0, r4
 80045f0:	f000 f8ae 	bl	8004750 <_sbrk_r>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d00a      	beq.n	800460e <sbrk_aligned+0x36>
 80045f8:	2303      	movs	r3, #3
 80045fa:	1cc5      	adds	r5, r0, #3
 80045fc:	439d      	bics	r5, r3
 80045fe:	42a8      	cmp	r0, r5
 8004600:	d007      	beq.n	8004612 <sbrk_aligned+0x3a>
 8004602:	1a29      	subs	r1, r5, r0
 8004604:	0020      	movs	r0, r4
 8004606:	f000 f8a3 	bl	8004750 <_sbrk_r>
 800460a:	3001      	adds	r0, #1
 800460c:	d101      	bne.n	8004612 <sbrk_aligned+0x3a>
 800460e:	2501      	movs	r5, #1
 8004610:	426d      	negs	r5, r5
 8004612:	0028      	movs	r0, r5
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	2000017c 	.word	0x2000017c

0800461c <_malloc_r>:
 800461c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800461e:	2203      	movs	r2, #3
 8004620:	1ccb      	adds	r3, r1, #3
 8004622:	4393      	bics	r3, r2
 8004624:	3308      	adds	r3, #8
 8004626:	0006      	movs	r6, r0
 8004628:	001f      	movs	r7, r3
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d238      	bcs.n	80046a0 <_malloc_r+0x84>
 800462e:	270c      	movs	r7, #12
 8004630:	42b9      	cmp	r1, r7
 8004632:	d837      	bhi.n	80046a4 <_malloc_r+0x88>
 8004634:	0030      	movs	r0, r6
 8004636:	f000 f873 	bl	8004720 <__malloc_lock>
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <_malloc_r+0x100>)
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	001c      	movs	r4, r3
 8004642:	2c00      	cmp	r4, #0
 8004644:	d133      	bne.n	80046ae <_malloc_r+0x92>
 8004646:	0039      	movs	r1, r7
 8004648:	0030      	movs	r0, r6
 800464a:	f7ff ffc5 	bl	80045d8 <sbrk_aligned>
 800464e:	0004      	movs	r4, r0
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d15e      	bne.n	8004712 <_malloc_r+0xf6>
 8004654:	9b00      	ldr	r3, [sp, #0]
 8004656:	681c      	ldr	r4, [r3, #0]
 8004658:	0025      	movs	r5, r4
 800465a:	2d00      	cmp	r5, #0
 800465c:	d14e      	bne.n	80046fc <_malloc_r+0xe0>
 800465e:	2c00      	cmp	r4, #0
 8004660:	d051      	beq.n	8004706 <_malloc_r+0xea>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	0029      	movs	r1, r5
 8004666:	18e3      	adds	r3, r4, r3
 8004668:	0030      	movs	r0, r6
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	f000 f870 	bl	8004750 <_sbrk_r>
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	4283      	cmp	r3, r0
 8004674:	d147      	bne.n	8004706 <_malloc_r+0xea>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0030      	movs	r0, r6
 800467a:	1aff      	subs	r7, r7, r3
 800467c:	0039      	movs	r1, r7
 800467e:	f7ff ffab 	bl	80045d8 <sbrk_aligned>
 8004682:	3001      	adds	r0, #1
 8004684:	d03f      	beq.n	8004706 <_malloc_r+0xea>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	19db      	adds	r3, r3, r7
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	9b00      	ldr	r3, [sp, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d040      	beq.n	8004716 <_malloc_r+0xfa>
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	42a2      	cmp	r2, r4
 8004698:	d133      	bne.n	8004702 <_malloc_r+0xe6>
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	e014      	b.n	80046ca <_malloc_r+0xae>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	dac5      	bge.n	8004630 <_malloc_r+0x14>
 80046a4:	230c      	movs	r3, #12
 80046a6:	2500      	movs	r5, #0
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	0028      	movs	r0, r5
 80046ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	1bc9      	subs	r1, r1, r7
 80046b2:	d420      	bmi.n	80046f6 <_malloc_r+0xda>
 80046b4:	290b      	cmp	r1, #11
 80046b6:	d918      	bls.n	80046ea <_malloc_r+0xce>
 80046b8:	19e2      	adds	r2, r4, r7
 80046ba:	6027      	str	r7, [r4, #0]
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d112      	bne.n	80046e6 <_malloc_r+0xca>
 80046c0:	9b00      	ldr	r3, [sp, #0]
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	6011      	str	r1, [r2, #0]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	0030      	movs	r0, r6
 80046cc:	0025      	movs	r5, r4
 80046ce:	f000 f82f 	bl	8004730 <__malloc_unlock>
 80046d2:	2207      	movs	r2, #7
 80046d4:	350b      	adds	r5, #11
 80046d6:	1d23      	adds	r3, r4, #4
 80046d8:	4395      	bics	r5, r2
 80046da:	1aea      	subs	r2, r5, r3
 80046dc:	429d      	cmp	r5, r3
 80046de:	d0e4      	beq.n	80046aa <_malloc_r+0x8e>
 80046e0:	1b5b      	subs	r3, r3, r5
 80046e2:	50a3      	str	r3, [r4, r2]
 80046e4:	e7e1      	b.n	80046aa <_malloc_r+0x8e>
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	e7ec      	b.n	80046c4 <_malloc_r+0xa8>
 80046ea:	6862      	ldr	r2, [r4, #4]
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d1d5      	bne.n	800469c <_malloc_r+0x80>
 80046f0:	9b00      	ldr	r3, [sp, #0]
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e7e9      	b.n	80046ca <_malloc_r+0xae>
 80046f6:	0023      	movs	r3, r4
 80046f8:	6864      	ldr	r4, [r4, #4]
 80046fa:	e7a2      	b.n	8004642 <_malloc_r+0x26>
 80046fc:	002c      	movs	r4, r5
 80046fe:	686d      	ldr	r5, [r5, #4]
 8004700:	e7ab      	b.n	800465a <_malloc_r+0x3e>
 8004702:	0013      	movs	r3, r2
 8004704:	e7c4      	b.n	8004690 <_malloc_r+0x74>
 8004706:	230c      	movs	r3, #12
 8004708:	0030      	movs	r0, r6
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	f000 f810 	bl	8004730 <__malloc_unlock>
 8004710:	e7cb      	b.n	80046aa <_malloc_r+0x8e>
 8004712:	6027      	str	r7, [r4, #0]
 8004714:	e7d9      	b.n	80046ca <_malloc_r+0xae>
 8004716:	605b      	str	r3, [r3, #4]
 8004718:	deff      	udf	#255	; 0xff
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	20000178 	.word	0x20000178

08004720 <__malloc_lock>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4802      	ldr	r0, [pc, #8]	; (800472c <__malloc_lock+0xc>)
 8004724:	f000 f850 	bl	80047c8 <__retarget_lock_acquire_recursive>
 8004728:	bd10      	pop	{r4, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	200002bc 	.word	0x200002bc

08004730 <__malloc_unlock>:
 8004730:	b510      	push	{r4, lr}
 8004732:	4802      	ldr	r0, [pc, #8]	; (800473c <__malloc_unlock+0xc>)
 8004734:	f000 f849 	bl	80047ca <__retarget_lock_release_recursive>
 8004738:	bd10      	pop	{r4, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	200002bc 	.word	0x200002bc

08004740 <memset>:
 8004740:	0003      	movs	r3, r0
 8004742:	1882      	adds	r2, r0, r2
 8004744:	4293      	cmp	r3, r2
 8004746:	d100      	bne.n	800474a <memset+0xa>
 8004748:	4770      	bx	lr
 800474a:	7019      	strb	r1, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	e7f9      	b.n	8004744 <memset+0x4>

08004750 <_sbrk_r>:
 8004750:	2300      	movs	r3, #0
 8004752:	b570      	push	{r4, r5, r6, lr}
 8004754:	4d06      	ldr	r5, [pc, #24]	; (8004770 <_sbrk_r+0x20>)
 8004756:	0004      	movs	r4, r0
 8004758:	0008      	movs	r0, r1
 800475a:	602b      	str	r3, [r5, #0]
 800475c:	f7fc faaa 	bl	8000cb4 <_sbrk>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d103      	bne.n	800476c <_sbrk_r+0x1c>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d000      	beq.n	800476c <_sbrk_r+0x1c>
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	200002b8 	.word	0x200002b8

08004774 <__errno>:
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <__errno+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	4770      	bx	lr
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	20000058 	.word	0x20000058

08004780 <__libc_init_array>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	2600      	movs	r6, #0
 8004784:	4c0c      	ldr	r4, [pc, #48]	; (80047b8 <__libc_init_array+0x38>)
 8004786:	4d0d      	ldr	r5, [pc, #52]	; (80047bc <__libc_init_array+0x3c>)
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	42a6      	cmp	r6, r4
 800478e:	d109      	bne.n	80047a4 <__libc_init_array+0x24>
 8004790:	2600      	movs	r6, #0
 8004792:	f000 f81b 	bl	80047cc <_init>
 8004796:	4c0a      	ldr	r4, [pc, #40]	; (80047c0 <__libc_init_array+0x40>)
 8004798:	4d0a      	ldr	r5, [pc, #40]	; (80047c4 <__libc_init_array+0x44>)
 800479a:	1b64      	subs	r4, r4, r5
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	42a6      	cmp	r6, r4
 80047a0:	d105      	bne.n	80047ae <__libc_init_array+0x2e>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	00b3      	lsls	r3, r6, #2
 80047a6:	58eb      	ldr	r3, [r5, r3]
 80047a8:	4798      	blx	r3
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7ee      	b.n	800478c <__libc_init_array+0xc>
 80047ae:	00b3      	lsls	r3, r6, #2
 80047b0:	58eb      	ldr	r3, [r5, r3]
 80047b2:	4798      	blx	r3
 80047b4:	3601      	adds	r6, #1
 80047b6:	e7f2      	b.n	800479e <__libc_init_array+0x1e>
 80047b8:	080048f0 	.word	0x080048f0
 80047bc:	080048f0 	.word	0x080048f0
 80047c0:	080048f4 	.word	0x080048f4
 80047c4:	080048f0 	.word	0x080048f0

080047c8 <__retarget_lock_acquire_recursive>:
 80047c8:	4770      	bx	lr

080047ca <__retarget_lock_release_recursive>:
 80047ca:	4770      	bx	lr

080047cc <_init>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr

080047d8 <_fini>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr
