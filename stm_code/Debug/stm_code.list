
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c4  080043c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043cc  080043cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080043e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080043e0  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a23  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024be  00000000  00000000  00030a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00032f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8b  00000000  00000000  00033e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1fd  00000000  00000000  000349a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012366  00000000  00000000  00050ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8196  00000000  00000000  00062f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034a0  00000000  00000000  0011b09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0011e53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080042d0 	.word	0x080042d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080042d0 	.word	0x080042d0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <buzzer_freq>:

uint32_t Channel = TIM_CHANNEL_2;
//TIM_HandleTypeDef htim1; // declare the timer handle


void buzzer_freq(int freq) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	int arr = 1066000/freq;   //ARR diveder
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <buzzer_freq+0x34>)
 8000628:	f7ff fdf6 	bl	8000218 <__divsi3>
 800062c:	0003      	movs	r3, r0
 800062e:	60fb      	str	r3, [r7, #12]
	TIM1->CCR2 = 50;  //duty cycle
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <buzzer_freq+0x38>)
 8000632:	2232      	movs	r2, #50	; 0x32
 8000634:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->ARR = arr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <buzzer_freq+0x38>)
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <buzzer_freq+0x3c>)
 800063e:	2104      	movs	r1, #4
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fe9f 	bl	8002384 <HAL_TIM_PWM_Start>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	00104410 	.word	0x00104410
 8000654:	40012c00 	.word	0x40012c00
 8000658:	20000028 	.word	0x20000028

0800065c <buzzer_stop>:
void buzzer_stop(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); // Stop the PWM signal
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <buzzer_stop+0x14>)
 8000662:	2104      	movs	r1, #4
 8000664:	0018      	movs	r0, r3
 8000666:	f001 ff7d 	bl	8002564 <HAL_TIM_PWM_Stop>
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028

08000674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b08b      	sub	sp, #44	; 0x2c
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 fdf7 	bl	8004278 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <MX_GPIO_Init+0xf0>)
 800068c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <MX_GPIO_Init+0xf0>)
 8000690:	2104      	movs	r1, #4
 8000692:	430a      	orrs	r2, r1
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <MX_GPIO_Init+0xf0>)
 8000698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069a:	2204      	movs	r2, #4
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006a8:	2120      	movs	r1, #32
 80006aa:	430a      	orrs	r2, r1
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b2:	2220      	movs	r2, #32
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006d8:	2102      	movs	r1, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	2202      	movs	r2, #2
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fddf 	bl	80012b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2212      	movs	r2, #18
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2201      	movs	r2, #1
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fc46 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2220      	movs	r2, #32
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fc33 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2201      	movs	r2, #1
 800074e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000750:	193b      	adds	r3, r7, r4
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <MX_GPIO_Init+0xf4>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f000 fc24 	bl	8000fa4 <HAL_GPIO_Init>

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b00b      	add	sp, #44	; 0x2c
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	50000400 	.word	0x50000400

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fade 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f838 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff ff7c 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800077c:	f000 fa00 	bl	8000b80 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000780:	f000 f8c0 	bl	8000904 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  buzzer_stop();
 8000784:	f7ff ff6a 	bl	800065c <buzzer_stop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2102      	movs	r1, #2
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fd74 	bl	800127c <HAL_GPIO_ReadPin>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d105      	bne.n	80007a4 <main+0x38>
		  buzzer_freq(1000);
 8000798:	23fa      	movs	r3, #250	; 0xfa
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff ff3d 	bl	800061c <buzzer_freq>
 80007a2:	e7f1      	b.n	8000788 <main+0x1c>
		}
		else if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)){
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	2110      	movs	r1, #16
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fd66 	bl	800127c <HAL_GPIO_ReadPin>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d104      	bne.n	80007be <main+0x52>
			buzzer_freq(10000);
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <main+0x74>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff30 	bl	800061c <buzzer_freq>
 80007bc:	e7e4      	b.n	8000788 <main+0x1c>
		}else if(!HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1)){
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <main+0x78>)
 80007c0:	2102      	movs	r1, #2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fd5a 	bl	800127c <HAL_GPIO_ReadPin>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d105      	bne.n	80007d8 <main+0x6c>
			buzzer_freq(440);
 80007cc:	23dc      	movs	r3, #220	; 0xdc
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff ff23 	bl	800061c <buzzer_freq>
 80007d6:	e7d7      	b.n	8000788 <main+0x1c>
		}else{
			buzzer_freq(0);
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff ff1f 	bl	800061c <buzzer_freq>
	  if(!HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)){
 80007de:	e7d3      	b.n	8000788 <main+0x1c>
 80007e0:	00002710 	.word	0x00002710
 80007e4:	50000400 	.word	0x50000400

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b095      	sub	sp, #84	; 0x54
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	2414      	movs	r4, #20
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	233c      	movs	r3, #60	; 0x3c
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 fd3d 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	0018      	movs	r0, r3
 8000802:	2310      	movs	r3, #16
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f003 fd36 	bl	8004278 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fd6d 	bl	80012f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2202      	movs	r2, #2
 800081a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	0052      	lsls	r2, r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fda5 	bl	8001388 <HAL_RCC_OscConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000842:	f000 f819 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2100      	movs	r1, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f001 f8f0 	bl	8001a48 <HAL_RCC_ClockConfig>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800086c:	f000 f804 	bl	8000878 <Error_Handler>
  }
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b015      	add	sp, #84	; 0x54
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x44>)
 800088c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_MspInit+0x44>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x44>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x44>)
 80008a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x44>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0549      	lsls	r1, r1, #21
 80008ac:	430a      	orrs	r2, r1
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_MspInit+0x44>)
 80008b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 fa88 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	2360      	movs	r3, #96	; 0x60
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	0018      	movs	r0, r3
 8000910:	2310      	movs	r3, #16
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f003 fcaf 	bl	8004278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	2354      	movs	r3, #84	; 0x54
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	230c      	movs	r3, #12
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f003 fca7 	bl	8004278 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	2338      	movs	r3, #56	; 0x38
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	0018      	movs	r0, r3
 8000930:	231c      	movs	r3, #28
 8000932:	001a      	movs	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	f003 fc9f 	bl	8004278 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	0018      	movs	r0, r3
 800093e:	2334      	movs	r3, #52	; 0x34
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 fc98 	bl	8004278 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000948:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <MX_TIM1_Init+0x18c>)
 800094a:	4a52      	ldr	r2, [pc, #328]	; (8000a94 <MX_TIM1_Init+0x190>)
 800094c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800094e:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000950:	220f      	movs	r2, #15
 8000952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b4e      	ldr	r3, [pc, #312]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800095a:	4b4d      	ldr	r3, [pc, #308]	; (8000a90 <MX_TIM1_Init+0x18c>)
 800095c:	2263      	movs	r2, #99	; 0x63
 800095e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000966:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <MX_TIM1_Init+0x18c>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000972:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fc4d 	bl	8002214 <HAL_TIM_Base_Init>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800097e:	f7ff ff7b 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000982:	2160      	movs	r1, #96	; 0x60
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0152      	lsls	r2, r2, #5
 800098a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098c:	187a      	adds	r2, r7, r1
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f001 ff72 	bl	800287c <HAL_TIM_ConfigClockSource>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800099c:	f7ff ff6c 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <MX_TIM1_Init+0x18c>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 fc8e 	bl	80022c4 <HAL_TIM_PWM_Init>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009ac:	f7ff ff64 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2154      	movs	r1, #84	; 0x54
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c4:	187a      	adds	r2, r7, r1
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <MX_TIM1_Init+0x18c>)
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f002 fc48 	bl	8003260 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80009d4:	f7ff ff50 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2138      	movs	r1, #56	; 0x38
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2260      	movs	r2, #96	; 0x60
 80009de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a04:	1879      	adds	r1, r7, r1
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 fe36 	bl	800267c <HAL_TIM_PWM_ConfigChannel>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000a14:	f7ff ff30 	bl	8000878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	0192      	lsls	r2, r2, #6
 8000a3c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	0492      	lsls	r2, r2, #18
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a6a:	1d3a      	adds	r2, r7, #4
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 fc6b 	bl	800334c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a7a:	f7ff fefd 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <MX_TIM1_Init+0x18c>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 f83f 	bl	8000b04 <HAL_TIM_MspPostInit>

}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b01c      	add	sp, #112	; 0x70
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000028 	.word	0x20000028
 8000a94:	40012c00 	.word	0x40012c00

08000a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b097      	sub	sp, #92	; 0x5c
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	240c      	movs	r4, #12
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	234c      	movs	r3, #76	; 0x4c
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f003 fbe4 	bl	8004278 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a11      	ldr	r2, [pc, #68]	; (8000afc <HAL_TIM_Base_MspInit+0x64>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d11c      	bne.n	8000af4 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	0392      	lsls	r2, r2, #14
 8000ac0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 f966 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000ad4:	f7ff fed0 	bl	8000878 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_TIM_Base_MspInit+0x68>)
 8000ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_TIM_Base_MspInit+0x68>)
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	0109      	lsls	r1, r1, #4
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_TIM_Base_MspInit+0x68>)
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	4013      	ands	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b017      	add	sp, #92	; 0x5c
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	240c      	movs	r4, #12
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	2314      	movs	r3, #20
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f003 fbae 	bl	8004278 <memset>
  if(timHandle->Instance==TIM1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_TIM_MspPostInit+0x70>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d121      	bne.n	8000b6a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_TIM_MspPostInit+0x74>)
 8000b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_TIM_MspPostInit+0x74>)
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_TIM_MspPostInit+0x74>)
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	2202      	movs	r2, #2
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b3e:	0021      	movs	r1, r4
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2208      	movs	r2, #8
 8000b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_TIM_MspPostInit+0x78>)
 8000b62:	0019      	movs	r1, r3
 8000b64:	0010      	movs	r0, r2
 8000b66:	f000 fa1d 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b009      	add	sp, #36	; 0x24
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40012c00 	.word	0x40012c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	50000400 	.word	0x50000400

08000b80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <MX_USART2_UART_Init+0x98>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b8c:	22e1      	movs	r2, #225	; 0xe1
 8000b8e:	0252      	lsls	r2, r2, #9
 8000b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 fc5a 	bl	8003484 <HAL_UART_Init>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f7ff fe50 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 fa6b 	bl	80040b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f7ff fe47 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f003 faa2 	bl	8004138 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f7ff fe3e 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f003 fa20 	bl	8004044 <HAL_UARTEx_DisableFifoMode>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f7ff fe36 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000074 	.word	0x20000074
 8000c18:	40004400 	.word	0x40004400

08000c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b09d      	sub	sp, #116	; 0x74
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	235c      	movs	r3, #92	; 0x5c
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	0018      	movs	r0, r3
 8000c2a:	2314      	movs	r3, #20
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f003 fb22 	bl	8004278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	2410      	movs	r4, #16
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	234c      	movs	r3, #76	; 0x4c
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fb1a 	bl	8004278 <memset>
  if(uartHandle->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_UART_MspInit+0xb8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d13e      	bne.n	8000ccc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2202      	movs	r2, #2
 8000c52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 f89d 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff fe07 	bl	8000878 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0289      	lsls	r1, r1, #10
 8000c74:	430a      	orrs	r2, r1
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c96:	2201      	movs	r2, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c9e:	215c      	movs	r1, #92	; 0x5c
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2202      	movs	r2, #2
 8000caa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2201      	movs	r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	187a      	adds	r2, r7, r1
 8000cc0:	23a0      	movs	r3, #160	; 0xa0
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f96c 	bl	8000fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b01d      	add	sp, #116	; 0x74
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f7ff fe0b 	bl	80008fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	; (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	; (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f003 fabd 	bl	8004288 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d0e:	f7ff fd2d 	bl	800076c <main>

08000d12 <LoopForever>:

LoopForever:
  b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d20:	080043d4 	.word	0x080043d4
  ldr r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d28:	2000010c 	.word	0x2000010c

08000d2c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_COMP_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x3c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Init+0x3c>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0049      	lsls	r1, r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f810 	bl	8000d70 <HAL_InitTick>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e001      	b.n	8000d60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fd92 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_InitTick+0x88>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02b      	beq.n	8000de0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_InitTick+0x8c>)
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_InitTick+0x88>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	23fa      	movs	r3, #250	; 0xfa
 8000d94:	0098      	lsls	r0, r3, #2
 8000d96:	f7ff f9b5 	bl	8000104 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f7ff f9b0 	bl	8000104 <__udivsi3>
 8000da4:	0003      	movs	r3, r0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8ef 	bl	8000f8a <HAL_SYSTICK_Config>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d112      	bne.n	8000dd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d80a      	bhi.n	8000dcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	2301      	movs	r3, #1
 8000dba:	425b      	negs	r3, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 f8ce 	bl	8000f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_InitTick+0x90>)
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e00d      	b.n	8000de8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e008      	b.n	8000de8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e003      	b.n	8000de8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b005      	add	sp, #20
 8000df4:	bd90      	pop	{r4, r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	18d2      	adds	r2, r2, r3
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000108 	.word	0x20000108

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000108 	.word	0x20000108

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	0002      	movs	r2, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e50:	d828      	bhi.n	8000ea4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <__NVIC_SetPriority+0xd4>)
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	33c0      	adds	r3, #192	; 0xc0
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	589b      	ldr	r3, [r3, r2]
 8000e62:	1dfa      	adds	r2, r7, #7
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	2203      	movs	r2, #3
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	21ff      	movs	r1, #255	; 0xff
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	401a      	ands	r2, r3
 8000e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	401a      	ands	r2, r3
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e90:	481f      	ldr	r0, [pc, #124]	; (8000f10 <__NVIC_SetPriority+0xd4>)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	33c0      	adds	r3, #192	; 0xc0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ea2:	e031      	b.n	8000f08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <__NVIC_SetPriority+0xd8>)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	0019      	movs	r1, r3
 8000eac:	230f      	movs	r3, #15
 8000eae:	400b      	ands	r3, r1
 8000eb0:	3b08      	subs	r3, #8
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3306      	adds	r3, #6
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	18d3      	adds	r3, r2, r3
 8000eba:	3304      	adds	r3, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1dfa      	adds	r2, r7, #7
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	00d2      	lsls	r2, r2, #3
 8000eca:	21ff      	movs	r1, #255	; 0xff
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	22ff      	movs	r2, #255	; 0xff
 8000edc:	401a      	ands	r2, r3
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	4003      	ands	r3, r0
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <__NVIC_SetPriority+0xd8>)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	001c      	movs	r4, r3
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	4023      	ands	r3, r4
 8000ef8:	3b08      	subs	r3, #8
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	430a      	orrs	r2, r1
 8000efe:	3306      	adds	r3, #6
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	18c3      	adds	r3, r0, r3
 8000f04:	3304      	adds	r3, #4
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b003      	add	sp, #12
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	045b      	lsls	r3, r3, #17
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d301      	bcc.n	8000f30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e010      	b.n	8000f52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <SysTick_Config+0x44>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	3a01      	subs	r2, #1
 8000f36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f38:	2301      	movs	r3, #1
 8000f3a:	425b      	negs	r3, r3
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff ff7c 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x44>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x44>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	1c02      	adds	r2, r0, #0
 8000f70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b004      	add	sp, #16
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ffbf 	bl	8000f18 <SysTick_Config>
 8000f9a:	0003      	movs	r3, r0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e14d      	b.n	8001250 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d100      	bne.n	8000fcc <HAL_GPIO_Init+0x28>
 8000fca:	e13e      	b.n	800124a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <HAL_GPIO_Init+0x40>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d130      	bne.n	8001046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101a:	2201      	movs	r2, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	2201      	movs	r2, #1
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	4013      	ands	r3, r2
 800104e:	2b03      	cmp	r3, #3
 8001050:	d017      	beq.n	8001082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	2b02      	cmp	r3, #2
 800108c:	d123      	bne.n	80010d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	58d3      	ldr	r3, [r2, r3]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	2207      	movs	r2, #7
 80010a0:	4013      	ands	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	43da      	mvns	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2107      	movs	r1, #7
 80010ba:	400b      	ands	r3, r1
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	0092      	lsls	r2, r2, #2
 80010d2:	6939      	ldr	r1, [r7, #16]
 80010d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	401a      	ands	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	23c0      	movs	r3, #192	; 0xc0
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d100      	bne.n	8001118 <HAL_GPIO_Init+0x174>
 8001116:	e098      	b.n	800124a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001118:	4a53      	ldr	r2, [pc, #332]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3318      	adds	r3, #24
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	589b      	ldr	r3, [r3, r2]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2203      	movs	r2, #3
 800112a:	4013      	ands	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	220f      	movs	r2, #15
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	429a      	cmp	r2, r3
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x1d6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_GPIO_Init+0x2c8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x1d2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a47      	ldr	r2, [pc, #284]	; (8001270 <HAL_GPIO_Init+0x2cc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x1ce>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a46      	ldr	r2, [pc, #280]	; (8001274 <HAL_GPIO_Init+0x2d0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x1ca>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a45      	ldr	r2, [pc, #276]	; (8001278 <HAL_GPIO_Init+0x2d4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x1c6>
 8001166:	2304      	movs	r3, #4
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x1d8>
 800116a:	2305      	movs	r3, #5
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x1d8>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x1d8>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x1d8>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x1d8>
 800117a:	2300      	movs	r3, #0
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	2103      	movs	r1, #3
 8001180:	400a      	ands	r2, r1
 8001182:	00d2      	lsls	r2, r2, #3
 8001184:	4093      	lsls	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800118c:	4936      	ldr	r1, [pc, #216]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3318      	adds	r3, #24
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119a:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	035b      	lsls	r3, r3, #13
 80011b2:	4013      	ands	r3, r2
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	039b      	lsls	r3, r3, #14
 80011dc:	4013      	ands	r3, r2
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 80011f0:	2384      	movs	r3, #132	; 0x84
 80011f2:	58d3      	ldr	r3, [r2, r3]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001214:	4914      	ldr	r1, [pc, #80]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 8001216:	2284      	movs	r2, #132	; 0x84
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	58d3      	ldr	r3, [r2, r3]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	4013      	ands	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001242:	4909      	ldr	r1, [pc, #36]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	40da      	lsrs	r2, r3
 8001258:	1e13      	subs	r3, r2, #0
 800125a:	d000      	beq.n	800125e <HAL_GPIO_Init+0x2ba>
 800125c:	e6aa      	b.n	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b006      	add	sp, #24
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021800 	.word	0x40021800
 800126c:	50000400 	.word	0x50000400
 8001270:	50000800 	.word	0x50000800
 8001274:	50000c00 	.word	0x50000c00
 8001278:	50001000 	.word	0x50001000

0800127c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	000a      	movs	r2, r1
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	1cba      	adds	r2, r7, #2
 8001290:	8812      	ldrh	r2, [r2, #0]
 8001292:	4013      	ands	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001296:	230f      	movs	r3, #15
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e003      	b.n	80012a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781b      	ldrb	r3, [r3, #0]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	0008      	movs	r0, r1
 80012c0:	0011      	movs	r1, r2
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	1c02      	adds	r2, r0, #0
 80012c6:	801a      	strh	r2, [r3, #0]
 80012c8:	1c7b      	adds	r3, r7, #1
 80012ca:	1c0a      	adds	r2, r1, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ce:	1c7b      	adds	r3, r7, #1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012fe:	4013      	ands	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	429a      	cmp	r2, r3
 8001312:	d11f      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	0013      	movs	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	189b      	adds	r3, r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4912      	ldr	r1, [pc, #72]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001322:	0018      	movs	r0, r3
 8001324:	f7fe feee 	bl	8000104 <__udivsi3>
 8001328:	0003      	movs	r3, r0
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132e:	e008      	b.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3b01      	subs	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e001      	b.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e009      	b.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	401a      	ands	r2, r3
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	429a      	cmp	r2, r3
 8001352:	d0ed      	beq.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40007000 	.word	0x40007000
 8001364:	fffff9ff 	.word	0xfffff9ff
 8001368:	20000000 	.word	0x20000000
 800136c:	000f4240 	.word	0x000f4240

08001370 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	23e0      	movs	r3, #224	; 0xe0
 800137a:	01db      	lsls	r3, r3, #7
 800137c:	4013      	ands	r3, r2
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	f000 fb50 	bl	8001a3c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	d100      	bne.n	80013a8 <HAL_RCC_OscConfig+0x20>
 80013a6:	e07c      	b.n	80014a2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a8:	4bc3      	ldr	r3, [pc, #780]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2238      	movs	r2, #56	; 0x38
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b2:	4bc1      	ldr	r3, [pc, #772]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2203      	movs	r2, #3
 80013b8:	4013      	ands	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x40>
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d002      	beq.n	80013ce <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d10b      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	4bba      	ldr	r3, [pc, #744]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d062      	beq.n	80014a0 <HAL_RCC_OscConfig+0x118>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e32a      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_OscConfig+0x7a>
 80013f2:	4bb1      	ldr	r3, [pc, #708]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4bb0      	ldr	r3, [pc, #704]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0249      	lsls	r1, r1, #9
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e020      	b.n	8001444 <HAL_RCC_OscConfig+0xbc>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	23a0      	movs	r3, #160	; 0xa0
 8001408:	02db      	lsls	r3, r3, #11
 800140a:	429a      	cmp	r2, r3
 800140c:	d10e      	bne.n	800142c <HAL_RCC_OscConfig+0xa4>
 800140e:	4baa      	ldr	r3, [pc, #680]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4ba9      	ldr	r3, [pc, #676]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	02c9      	lsls	r1, r1, #11
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	4ba6      	ldr	r3, [pc, #664]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4ba5      	ldr	r3, [pc, #660]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	0249      	lsls	r1, r1, #9
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xbc>
 800142c:	4ba2      	ldr	r3, [pc, #648]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4ba1      	ldr	r3, [pc, #644]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001432:	49a2      	ldr	r1, [pc, #648]	; (80016bc <HAL_RCC_OscConfig+0x334>)
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	4b9f      	ldr	r3, [pc, #636]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b9e      	ldr	r3, [pc, #632]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800143e:	49a0      	ldr	r1, [pc, #640]	; (80016c0 <HAL_RCC_OscConfig+0x338>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d014      	beq.n	8001476 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fcec 	bl	8000e28 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fce7 	bl	8000e28 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e2e9      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001468:	4b93      	ldr	r3, [pc, #588]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0xce>
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff fcd7 	bl	8000e28 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fcd2 	bl	8000e28 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e2d4      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	029b      	lsls	r3, r3, #10
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0xf8>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x126>
 80014ac:	e099      	b.n	80015e2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ae:	4b82      	ldr	r3, [pc, #520]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2238      	movs	r2, #56	; 0x38
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b8:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d102      	bne.n	80014ce <HAL_RCC_OscConfig+0x146>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d002      	beq.n	80014d4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d135      	bne.n	8001540 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d4:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x164>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2a7      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a74      	ldr	r2, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x33c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	021a      	lsls	r2, r3, #8
 80014fc:	4b6e      	ldr	r3, [pc, #440]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d112      	bne.n	800152e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001508:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x340>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800151c:	4b66      	ldr	r3, [pc, #408]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0adb      	lsrs	r3, r3, #11
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	4a69      	ldr	r2, [pc, #420]	; (80016cc <HAL_RCC_OscConfig+0x344>)
 8001528:	40da      	lsrs	r2, r3
 800152a:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x348>)
 800152c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800152e:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x34c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff fc1c 	bl	8000d70 <HAL_InitTick>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d051      	beq.n	80015e0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e27d      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d030      	beq.n	80015aa <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a5e      	ldr	r2, [pc, #376]	; (80016c8 <HAL_RCC_OscConfig+0x340>)
 800154e:	4013      	ands	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0049      	lsls	r1, r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fc5d 	bl	8000e28 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc58 	bl	8000e28 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e25a      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001586:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4013      	ands	r3, r2
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_RCC_OscConfig+0x33c>)
 8001598:	4013      	ands	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	021a      	lsls	r2, r3, #8
 80015a2:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	e01b      	b.n	80015e2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015b0:	4949      	ldr	r1, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x350>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fc37 	bl	8000e28 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc32 	bl	8000e28 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e234      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x238>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2208      	movs	r2, #8
 80015e8:	4013      	ands	r3, r2
 80015ea:	d047      	beq.n	800167c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2238      	movs	r2, #56	; 0x38
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b18      	cmp	r3, #24
 80015f6:	d10a      	bne.n	800160e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d03c      	beq.n	800167c <HAL_RCC_OscConfig+0x2f4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d138      	bne.n	800167c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e216      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d019      	beq.n	800164a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fc01 	bl	8000e28 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fbfc 	bl	8000e28 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1fe      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d0f1      	beq.n	800162c <HAL_RCC_OscConfig+0x2a4>
 8001648:	e018      	b.n	800167c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800164c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001650:	2101      	movs	r1, #1
 8001652:	438a      	bics	r2, r1
 8001654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fbe7 	bl	8000e28 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fbe2 	bl	8000e28 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1e4      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d1f1      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2204      	movs	r2, #4
 8001682:	4013      	ands	r3, r2
 8001684:	d100      	bne.n	8001688 <HAL_RCC_OscConfig+0x300>
 8001686:	e0c7      	b.n	8001818 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001688:	231f      	movs	r3, #31
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2238      	movs	r2, #56	; 0x38
 8001696:	4013      	ands	r3, r2
 8001698:	2b20      	cmp	r3, #32
 800169a:	d11f      	bne.n	80016dc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d100      	bne.n	80016a8 <HAL_RCC_OscConfig+0x320>
 80016a6:	e0b7      	b.n	8001818 <HAL_RCC_OscConfig+0x490>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d000      	beq.n	80016b2 <HAL_RCC_OscConfig+0x32a>
 80016b0:	e0b2      	b.n	8001818 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c2      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40021000 	.word	0x40021000
 80016bc:	fffeffff 	.word	0xfffeffff
 80016c0:	fffbffff 	.word	0xfffbffff
 80016c4:	ffff80ff 	.word	0xffff80ff
 80016c8:	ffffc7ff 	.word	0xffffc7ff
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004
 80016d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016dc:	4bb5      	ldr	r3, [pc, #724]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80016de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	055b      	lsls	r3, r3, #21
 80016e4:	4013      	ands	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x364>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x366>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d011      	beq.n	8001716 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80016f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f6:	4baf      	ldr	r3, [pc, #700]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0549      	lsls	r1, r1, #21
 80016fc:	430a      	orrs	r2, r1
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001700:	4bac      	ldr	r3, [pc, #688]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800170e:	231f      	movs	r3, #31
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	4ba8      	ldr	r3, [pc, #672]	; (80019b8 <HAL_RCC_OscConfig+0x630>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4013      	ands	r3, r2
 8001720:	d11a      	bne.n	8001758 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001722:	4ba5      	ldr	r3, [pc, #660]	; (80019b8 <HAL_RCC_OscConfig+0x630>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4ba4      	ldr	r3, [pc, #656]	; (80019b8 <HAL_RCC_OscConfig+0x630>)
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	0049      	lsls	r1, r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001730:	f7ff fb7a 	bl	8000e28 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff fb75 	bl	8000e28 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e177      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174c:	4b9a      	ldr	r3, [pc, #616]	; (80019b8 <HAL_RCC_OscConfig+0x630>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x3e6>
 8001760:	4b94      	ldr	r3, [pc, #592]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001764:	4b93      	ldr	r3, [pc, #588]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001766:	2101      	movs	r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	65da      	str	r2, [r3, #92]	; 0x5c
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x420>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x408>
 8001776:	4b8f      	ldr	r3, [pc, #572]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800177a:	4b8e      	ldr	r3, [pc, #568]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800177c:	2104      	movs	r1, #4
 800177e:	430a      	orrs	r2, r1
 8001780:	65da      	str	r2, [r3, #92]	; 0x5c
 8001782:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001786:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001788:	2101      	movs	r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	65da      	str	r2, [r3, #92]	; 0x5c
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0x420>
 8001790:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001794:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001796:	2101      	movs	r1, #1
 8001798:	438a      	bics	r2, r1
 800179a:	65da      	str	r2, [r3, #92]	; 0x5c
 800179c:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800179e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a0:	4b84      	ldr	r3, [pc, #528]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80017a2:	2104      	movs	r1, #4
 80017a4:	438a      	bics	r2, r1
 80017a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d014      	beq.n	80017da <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb3a 	bl	8000e28 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fb35 	bl	8000e28 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a7d      	ldr	r2, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x634>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e136      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ce:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x432>
 80017d8:	e013      	b.n	8001802 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fb25 	bl	8000e28 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e2:	e009      	b.n	80017f8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fb20 	bl	8000e28 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4a73      	ldr	r2, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x634>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e121      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	2202      	movs	r2, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001802:	231f      	movs	r3, #31
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800180e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001812:	496b      	ldr	r1, [pc, #428]	; (80019c0 <HAL_RCC_OscConfig+0x638>)
 8001814:	400a      	ands	r2, r1
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	4013      	ands	r3, r2
 8001820:	d039      	beq.n	8001896 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01b      	beq.n	8001862 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182a:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	03c9      	lsls	r1, r1, #15
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff faf6 	bl	8000e28 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001842:	f7ff faf1 	bl	8000e28 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0f3      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	4013      	ands	r3, r2
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x4ba>
 8001860:	e019      	b.n	8001896 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001868:	4956      	ldr	r1, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x63c>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fadb 	bl	8000e28 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001878:	f7ff fad6 	bl	8000e28 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e0d8      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x518>
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2238      	movs	r2, #56	; 0x38
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d100      	bne.n	80018ae <HAL_RCC_OscConfig+0x526>
 80018ac:	e07b      	b.n	80019a6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d156      	bne.n	8001964 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80018bc:	4942      	ldr	r1, [pc, #264]	; (80019c8 <HAL_RCC_OscConfig+0x640>)
 80018be:	400a      	ands	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fab1 	bl	8000e28 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff faac 	bl	8000e28 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0ae      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	049b      	lsls	r3, r3, #18
 80018e6:	4013      	ands	r3, r2
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	4a37      	ldr	r2, [pc, #220]	; (80019cc <HAL_RCC_OscConfig+0x644>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	431a      	orrs	r2, r3
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800191a:	430a      	orrs	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0449      	lsls	r1, r1, #17
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0549      	lsls	r1, r1, #21
 8001936:	430a      	orrs	r2, r1
 8001938:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fa75 	bl	8000e28 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa70 	bl	8000e28 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e072      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	049b      	lsls	r3, r3, #18
 800195e:	4013      	ands	r3, r2
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x5bc>
 8001962:	e06a      	b.n	8001a3a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800196a:	4917      	ldr	r1, [pc, #92]	; (80019c8 <HAL_RCC_OscConfig+0x640>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fa5a 	bl	8000e28 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fa55 	bl	8000e28 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e057      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	049b      	lsls	r3, r3, #18
 8001994:	4013      	ands	r3, r2
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_OscConfig+0x62c>)
 800199e:	490c      	ldr	r1, [pc, #48]	; (80019d0 <HAL_RCC_OscConfig+0x648>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	e049      	b.n	8001a3a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e044      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40007000 	.word	0x40007000
 80019bc:	00001388 	.word	0x00001388
 80019c0:	efffffff 	.word	0xefffffff
 80019c4:	ffbfffff 	.word	0xffbfffff
 80019c8:	feffffff 	.word	0xfeffffff
 80019cc:	11c1808c 	.word	0x11c1808c
 80019d0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x6bc>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2203      	movs	r2, #3
 80019de:	401a      	ands	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d126      	bne.n	8001a36 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2270      	movs	r2, #112	; 0x70
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d11f      	bne.n	8001a36 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	23fe      	movs	r3, #254	; 0xfe
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d116      	bne.n	8001a36 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	23f8      	movs	r3, #248	; 0xf8
 8001a0c:	039b      	lsls	r3, r3, #14
 8001a0e:	401a      	ands	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d10e      	bne.n	8001a36 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	23e0      	movs	r3, #224	; 0xe0
 8001a1c:	051b      	lsls	r3, r3, #20
 8001a1e:	401a      	ands	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	0f5b      	lsrs	r3, r3, #29
 8001a2c:	075a      	lsls	r2, r3, #29
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b008      	add	sp, #32
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0e9      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2207      	movs	r2, #7
 8001a62:	4013      	ands	r3, r2
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d91e      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2207      	movs	r2, #7
 8001a70:	4393      	bics	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	4b70      	ldr	r3, [pc, #448]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f9d4 	bl	8000e28 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a84:	e009      	b.n	8001a9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a86:	f7ff f9cf 	bl	8000e28 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_RCC_ClockConfig+0x1f4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0ca      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1ee      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d015      	beq.n	8001ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d006      	beq.n	8001aca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001abc:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac2:	21e0      	movs	r1, #224	; 0xe0
 8001ac4:	01c9      	lsls	r1, r1, #7
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4a5d      	ldr	r2, [pc, #372]	; (8001c44 <HAL_RCC_ClockConfig+0x1fc>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d057      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	029b      	lsls	r3, r3, #10
 8001af8:	4013      	ands	r3, r2
 8001afa:	d12b      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e097      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	049b      	lsls	r3, r3, #18
 8001b10:	4013      	ands	r3, r2
 8001b12:	d11f      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e08b      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d113      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e07f      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b38:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e074      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e06d      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2207      	movs	r2, #7
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7ff f95e 	bl	8000e28 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7ff f959 	bl	8000e28 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <HAL_RCC_ClockConfig+0x1f4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e054      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2238      	movs	r2, #56	; 0x38
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1ec      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d21e      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2207      	movs	r2, #7
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f936 	bl	8000e28 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bc0:	e009      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7ff f931 	bl	8000e28 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_RCC_ClockConfig+0x1f4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e02c      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2207      	movs	r2, #7
 8001bdc:	4013      	ands	r3, r2
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2204      	movs	r2, #4
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <HAL_RCC_ClockConfig+0x200>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c02:	f000 f829 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c06:	0001      	movs	r1, r0
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	220f      	movs	r2, #15
 8001c10:	401a      	ands	r2, r3
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x204>)
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	58d3      	ldr	r3, [r2, r3]
 8001c18:	221f      	movs	r2, #31
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	40da      	lsrs	r2, r3
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x208>)
 8001c22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x20c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff f8a1 	bl	8000d70 <HAL_InitTick>
 8001c2e:	0003      	movs	r3, r0
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	00001388 	.word	0x00001388
 8001c40:	40021000 	.word	0x40021000
 8001c44:	fffff0ff 	.word	0xfffff0ff
 8001c48:	ffff8fff 	.word	0xffff8fff
 8001c4c:	080042e8 	.word	0x080042e8
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	; 0x38
 8001c64:	4013      	ands	r3, r2
 8001c66:	d10f      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0adb      	lsrs	r3, r3, #11
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	2201      	movs	r2, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	0013      	movs	r3, r2
 8001c78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	4835      	ldr	r0, [pc, #212]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c7e:	f7fe fa41 	bl	8000104 <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e05d      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2238      	movs	r2, #56	; 0x38
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e054      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2238      	movs	r2, #56	; 0x38
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d138      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2203      	movs	r2, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	4013      	ands	r3, r2
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	4824      	ldr	r0, [pc, #144]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cc8:	f7fe fa1c 	bl	8000104 <__udivsi3>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	0019      	movs	r1, r3
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	227f      	movs	r2, #127	; 0x7f
 8001cd8:	4013      	ands	r3, r2
 8001cda:	434b      	muls	r3, r1
 8001cdc:	617b      	str	r3, [r7, #20]
        break;
 8001cde:	e00d      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	481c      	ldr	r0, [pc, #112]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ce4:	f7fe fa0e 	bl	8000104 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	0019      	movs	r1, r3
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	227f      	movs	r2, #127	; 0x7f
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	434b      	muls	r3, r1
 8001cf8:	617b      	str	r3, [r7, #20]
        break;
 8001cfa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0f5b      	lsrs	r3, r3, #29
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	3301      	adds	r3, #1
 8001d08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f7fe f9f9 	bl	8000104 <__udivsi3>
 8001d12:	0003      	movs	r3, r0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e015      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2238      	movs	r2, #56	; 0x38
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d103      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2238      	movs	r2, #56	; 0x38
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b18      	cmp	r3, #24
 8001d36:	d103      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d38:	23fa      	movs	r3, #250	; 0xfa
 8001d3a:	01db      	lsls	r3, r3, #7
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e001      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d44:	693b      	ldr	r3, [r7, #16]
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	007a1200 	.word	0x007a1200

08001d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d74:	f7ff fff2 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d78:	0004      	movs	r4, r0
 8001d7a:	f7ff faf9 	bl	8001370 <LL_RCC_GetAPB1Prescaler>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	0b1a      	lsrs	r2, r3, #12
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	58d3      	ldr	r3, [r2, r3]
 8001d88:	221f      	movs	r2, #31
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	40dc      	lsrs	r4, r3
 8001d8e:	0023      	movs	r3, r4
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	08004328 	.word	0x08004328

08001d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001da4:	2313      	movs	r3, #19
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dac:	2312      	movs	r3, #18
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001dc0:	e0ad      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2011      	movs	r0, #17
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	055b      	lsls	r3, r3, #21
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d110      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0549      	lsls	r1, r1, #21
 8001de0:	430a      	orrs	r2, r1
 8001de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	055b      	lsls	r3, r3, #21
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df8:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0049      	lsls	r1, r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e06:	f7ff f80f 	bl	8000e28 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7ff f80a 	bl	8000e28 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d904      	bls.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e1e:	2313      	movs	r3, #19
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2203      	movs	r2, #3
 8001e24:	701a      	strb	r2, [r3, #0]
        break;
 8001e26:	e005      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0ed      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e34:	2313      	movs	r3, #19
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d15e      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d019      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d014      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e78:	491e      	ldr	r1, [pc, #120]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d016      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ffcc 	bl	8000e28 <HAL_GetTick>
 8001e90:	0003      	movs	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e94:	e00c      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe ffc7 	bl	8000e28 <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d904      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ea6:	2313      	movs	r3, #19
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2203      	movs	r2, #3
 8001eac:	701a      	strb	r2, [r3, #0]
            break;
 8001eae:	e004      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0ed      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001eba:	2313      	movs	r3, #19
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10a      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ed8:	e016      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eda:	2312      	movs	r3, #18
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2213      	movs	r2, #19
 8001ee0:	18ba      	adds	r2, r7, r2
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	fffffcff 	.word	0xfffffcff
 8001ef4:	fffeffff 	.word	0xfffeffff
 8001ef8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001efc:	2312      	movs	r3, #18
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2213      	movs	r2, #19
 8001f02:	18ba      	adds	r2, r7, r2
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f08:	2311      	movs	r3, #17
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4bb6      	ldr	r3, [pc, #728]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f16:	4bb5      	ldr	r3, [pc, #724]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f18:	49b5      	ldr	r1, [pc, #724]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f28:	4bb0      	ldr	r3, [pc, #704]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4393      	bics	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4bad      	ldr	r3, [pc, #692]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f46:	4ba9      	ldr	r3, [pc, #676]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4ba5      	ldr	r3, [pc, #660]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	4013      	ands	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f64:	4ba1      	ldr	r3, [pc, #644]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	2230      	movs	r2, #48	; 0x30
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b9e      	ldr	r3, [pc, #632]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f82:	4b9a      	ldr	r3, [pc, #616]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	4a9b      	ldr	r2, [pc, #620]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	4b96      	ldr	r3, [pc, #600]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	015b      	lsls	r3, r3, #5
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001fa2:	4b92      	ldr	r3, [pc, #584]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	4b8e      	ldr	r3, [pc, #568]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc2:	4b8a      	ldr	r3, [pc, #552]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	4a8d      	ldr	r2, [pc, #564]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd0:	4b86      	ldr	r3, [pc, #536]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fe2:	4b82      	ldr	r3, [pc, #520]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4a86      	ldr	r2, [pc, #536]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	4b7e      	ldr	r3, [pc, #504]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	4a7f      	ldr	r2, [pc, #508]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	4b77      	ldr	r3, [pc, #476]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002010:	430a      	orrs	r2, r1
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	4013      	ands	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800201e:	4b73      	ldr	r3, [pc, #460]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202e:	430a      	orrs	r2, r1
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	4013      	ands	r3, r2
 800203c:	d015      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800203e:	4b6b      	ldr	r3, [pc, #428]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	0899      	lsrs	r1, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204a:	4b68      	ldr	r3, [pc, #416]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204c:	430a      	orrs	r2, r1
 800204e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	05db      	lsls	r3, r3, #23
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800205c:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0249      	lsls	r1, r1, #9
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	031b      	lsls	r3, r3, #12
 8002072:	4013      	ands	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002086:	430a      	orrs	r2, r1
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	039b      	lsls	r3, r3, #14
 8002092:	4013      	ands	r3, r2
 8002094:	d016      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002096:	4b55      	ldr	r3, [pc, #340]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	4a5c      	ldr	r2, [pc, #368]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a4:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	03db      	lsls	r3, r3, #15
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d106      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020b6:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	0449      	lsls	r1, r1, #17
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	03db      	lsls	r3, r3, #15
 80020cc:	4013      	ands	r3, r2
 80020ce:	d016      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020de:	4b43      	ldr	r3, [pc, #268]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	045b      	lsls	r3, r3, #17
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	0449      	lsls	r1, r1, #17
 80020fa:	430a      	orrs	r2, r1
 80020fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	4013      	ands	r3, r2
 8002108:	d014      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800210a:	4b38      	ldr	r3, [pc, #224]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	2203      	movs	r2, #3
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211a:	430a      	orrs	r2, r1
 800211c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	0249      	lsls	r1, r1, #9
 8002130:	430a      	orrs	r2, r1
 8002132:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	019b      	lsls	r3, r3, #6
 800213c:	4013      	ands	r3, r2
 800213e:	d014      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	220c      	movs	r2, #12
 8002146:	4393      	bics	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002150:	430a      	orrs	r2, r1
 8002152:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	2b04      	cmp	r3, #4
 800215a:	d106      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	0249      	lsls	r1, r1, #9
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	045b      	lsls	r3, r3, #17
 8002172:	4013      	ands	r3, r2
 8002174:	d016      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002186:	430a      	orrs	r2, r1
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	429a      	cmp	r2, r3
 8002194:	d106      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0449      	lsls	r1, r1, #17
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	049b      	lsls	r3, r3, #18
 80021ac:	4013      	ands	r3, r2
 80021ae:	d016      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0449      	lsls	r1, r1, #17
 80021da:	430a      	orrs	r2, r1
 80021dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021de:	2312      	movs	r3, #18
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b006      	add	sp, #24
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	fffff3ff 	.word	0xfffff3ff
 80021f8:	fffffcff 	.word	0xfffffcff
 80021fc:	fff3ffff 	.word	0xfff3ffff
 8002200:	ffcfffff 	.word	0xffcfffff
 8002204:	ffffcfff 	.word	0xffffcfff
 8002208:	ffff3fff 	.word	0xffff3fff
 800220c:	ffbfffff 	.word	0xffbfffff
 8002210:	feffffff 	.word	0xfeffffff

08002214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e04a      	b.n	80022bc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	223d      	movs	r2, #61	; 0x3d
 800222a:	5c9b      	ldrb	r3, [r3, r2]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	223c      	movs	r2, #60	; 0x3c
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f7fe fc2b 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	223d      	movs	r2, #61	; 0x3d
 8002246:	2102      	movs	r1, #2
 8002248:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f000 fbe7 	bl	8002a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2248      	movs	r2, #72	; 0x48
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223e      	movs	r2, #62	; 0x3e
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2241      	movs	r2, #65	; 0x41
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2242      	movs	r2, #66	; 0x42
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2243      	movs	r2, #67	; 0x43
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2244      	movs	r2, #68	; 0x44
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2245      	movs	r2, #69	; 0x45
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2246      	movs	r2, #70	; 0x46
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2247      	movs	r2, #71	; 0x47
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223d      	movs	r2, #61	; 0x3d
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04a      	b.n	800236c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223d      	movs	r2, #61	; 0x3d
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223c      	movs	r2, #60	; 0x3c
 80022e6:	2100      	movs	r1, #0
 80022e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 f841 	bl	8002374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223d      	movs	r2, #61	; 0x3d
 80022f6:	2102      	movs	r1, #2
 80022f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	0019      	movs	r1, r3
 8002304:	0010      	movs	r0, r2
 8002306:	f000 fb8f 	bl	8002a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2248      	movs	r2, #72	; 0x48
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	223e      	movs	r2, #62	; 0x3e
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223f      	movs	r2, #63	; 0x3f
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2242      	movs	r2, #66	; 0x42
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2243      	movs	r2, #67	; 0x43
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2244      	movs	r2, #68	; 0x44
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2245      	movs	r2, #69	; 0x45
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2246      	movs	r2, #70	; 0x46
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2247      	movs	r2, #71	; 0x47
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	; 0x3d
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d108      	bne.n	80023a6 <HAL_TIM_PWM_Start+0x22>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223e      	movs	r2, #62	; 0x3e
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	4193      	sbcs	r3, r2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e037      	b.n	8002416 <HAL_TIM_PWM_Start+0x92>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d108      	bne.n	80023be <HAL_TIM_PWM_Start+0x3a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	1e5a      	subs	r2, r3, #1
 80023b8:	4193      	sbcs	r3, r2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	e02b      	b.n	8002416 <HAL_TIM_PWM_Start+0x92>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d108      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x52>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	4193      	sbcs	r3, r2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e01f      	b.n	8002416 <HAL_TIM_PWM_Start+0x92>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b0c      	cmp	r3, #12
 80023da:	d108      	bne.n	80023ee <HAL_TIM_PWM_Start+0x6a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2241      	movs	r2, #65	; 0x41
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	4193      	sbcs	r3, r2
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e013      	b.n	8002416 <HAL_TIM_PWM_Start+0x92>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d108      	bne.n	8002406 <HAL_TIM_PWM_Start+0x82>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2242      	movs	r2, #66	; 0x42
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	4193      	sbcs	r3, r2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	e007      	b.n	8002416 <HAL_TIM_PWM_Start+0x92>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2243      	movs	r2, #67	; 0x43
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	4193      	sbcs	r3, r2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e090      	b.n	8002540 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_TIM_PWM_Start+0xaa>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	223e      	movs	r2, #62	; 0x3e
 8002428:	2102      	movs	r1, #2
 800242a:	5499      	strb	r1, [r3, r2]
 800242c:	e023      	b.n	8002476 <HAL_TIM_PWM_Start+0xf2>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d104      	bne.n	800243e <HAL_TIM_PWM_Start+0xba>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	223f      	movs	r2, #63	; 0x3f
 8002438:	2102      	movs	r1, #2
 800243a:	5499      	strb	r1, [r3, r2]
 800243c:	e01b      	b.n	8002476 <HAL_TIM_PWM_Start+0xf2>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d104      	bne.n	800244e <HAL_TIM_PWM_Start+0xca>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	2102      	movs	r1, #2
 800244a:	5499      	strb	r1, [r3, r2]
 800244c:	e013      	b.n	8002476 <HAL_TIM_PWM_Start+0xf2>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0xda>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2241      	movs	r2, #65	; 0x41
 8002458:	2102      	movs	r1, #2
 800245a:	5499      	strb	r1, [r3, r2]
 800245c:	e00b      	b.n	8002476 <HAL_TIM_PWM_Start+0xf2>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b10      	cmp	r3, #16
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0xea>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2242      	movs	r2, #66	; 0x42
 8002468:	2102      	movs	r1, #2
 800246a:	5499      	strb	r1, [r3, r2]
 800246c:	e003      	b.n	8002476 <HAL_TIM_PWM_Start+0xf2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2243      	movs	r2, #67	; 0x43
 8002472:	2102      	movs	r1, #2
 8002474:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6839      	ldr	r1, [r7, #0]
 800247c:	2201      	movs	r2, #1
 800247e:	0018      	movs	r0, r3
 8002480:	f000 feca 	bl	8003218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <HAL_TIM_PWM_Start+0x1c4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00e      	beq.n	80024ac <HAL_TIM_PWM_Start+0x128>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_TIM_PWM_Start+0x1c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_TIM_PWM_Start+0x128>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2c      	ldr	r2, [pc, #176]	; (8002550 <HAL_TIM_PWM_Start+0x1cc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_TIM_PWM_Start+0x128>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_TIM_PWM_Start+0x1d0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_PWM_Start+0x12c>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_TIM_PWM_Start+0x12e>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0209      	lsls	r1, r1, #8
 80024c4:	430a      	orrs	r2, r1
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_TIM_PWM_Start+0x1c4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d014      	beq.n	80024fc <HAL_TIM_PWM_Start+0x178>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	429a      	cmp	r2, r3
 80024dc:	d00e      	beq.n	80024fc <HAL_TIM_PWM_Start+0x178>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_Start+0x1d4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_TIM_PWM_Start+0x178>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1b      	ldr	r2, [pc, #108]	; (800255c <HAL_TIM_PWM_Start+0x1d8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_PWM_Start+0x178>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a15      	ldr	r2, [pc, #84]	; (800254c <HAL_TIM_PWM_Start+0x1c8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d116      	bne.n	800252a <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_TIM_PWM_Start+0x1dc>)
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d016      	beq.n	800253c <HAL_TIM_PWM_Start+0x1b8>
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	429a      	cmp	r2, r3
 8002516:	d011      	beq.n	800253c <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2101      	movs	r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002528:	e008      	b.n	800253c <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e000      	b.n	800253e <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b004      	add	sp, #16
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40014000 	.word	0x40014000
 8002550:	40014400 	.word	0x40014400
 8002554:	40014800 	.word	0x40014800
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	00010007 	.word	0x00010007

08002564 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	0018      	movs	r0, r3
 8002578:	f000 fe4e 	bl	8003218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a37      	ldr	r2, [pc, #220]	; (8002660 <HAL_TIM_PWM_Stop+0xfc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00e      	beq.n	80025a4 <HAL_TIM_PWM_Stop+0x40>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a36      	ldr	r2, [pc, #216]	; (8002664 <HAL_TIM_PWM_Stop+0x100>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_TIM_PWM_Stop+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a34      	ldr	r2, [pc, #208]	; (8002668 <HAL_TIM_PWM_Stop+0x104>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_PWM_Stop+0x40>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_TIM_PWM_Stop+0x108>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_TIM_PWM_Stop+0x44>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_TIM_PWM_Stop+0x46>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <HAL_TIM_PWM_Stop+0x10c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	d10d      	bne.n	80025d6 <HAL_TIM_PWM_Stop+0x72>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <HAL_TIM_PWM_Stop+0x110>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	d107      	bne.n	80025d6 <HAL_TIM_PWM_Stop+0x72>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4929      	ldr	r1, [pc, #164]	; (8002678 <HAL_TIM_PWM_Stop+0x114>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <HAL_TIM_PWM_Stop+0x10c>)
 80025de:	4013      	ands	r3, r2
 80025e0:	d10d      	bne.n	80025fe <HAL_TIM_PWM_Stop+0x9a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_TIM_PWM_Stop+0x110>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_PWM_Stop+0x9a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Stop+0xaa>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	223e      	movs	r2, #62	; 0x3e
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]
 800260c:	e023      	b.n	8002656 <HAL_TIM_PWM_Stop+0xf2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Stop+0xba>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	223f      	movs	r2, #63	; 0x3f
 8002618:	2101      	movs	r1, #1
 800261a:	5499      	strb	r1, [r3, r2]
 800261c:	e01b      	b.n	8002656 <HAL_TIM_PWM_Stop+0xf2>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Stop+0xca>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	2101      	movs	r1, #1
 800262a:	5499      	strb	r1, [r3, r2]
 800262c:	e013      	b.n	8002656 <HAL_TIM_PWM_Stop+0xf2>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Stop+0xda>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2241      	movs	r2, #65	; 0x41
 8002638:	2101      	movs	r1, #1
 800263a:	5499      	strb	r1, [r3, r2]
 800263c:	e00b      	b.n	8002656 <HAL_TIM_PWM_Stop+0xf2>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Stop+0xea>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2242      	movs	r2, #66	; 0x42
 8002648:	2101      	movs	r1, #1
 800264a:	5499      	strb	r1, [r3, r2]
 800264c:	e003      	b.n	8002656 <HAL_TIM_PWM_Stop+0xf2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2243      	movs	r2, #67	; 0x43
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40014000 	.word	0x40014000
 8002668:	40014400 	.word	0x40014400
 800266c:	40014800 	.word	0x40014800
 8002670:	00001111 	.word	0x00001111
 8002674:	00000444 	.word	0x00000444
 8002678:	ffff7fff 	.word	0xffff7fff

0800267c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002688:	2317      	movs	r3, #23
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	223c      	movs	r2, #60	; 0x3c
 8002694:	5c9b      	ldrb	r3, [r3, r2]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_TIM_PWM_ConfigChannel+0x22>
 800269a:	2302      	movs	r3, #2
 800269c:	e0e5      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	223c      	movs	r2, #60	; 0x3c
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b14      	cmp	r3, #20
 80026aa:	d900      	bls.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80026ac:	e0d1      	b.n	8002852 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	4b70      	ldr	r3, [pc, #448]	; (8002874 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fa48 	bl	8002b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2108      	movs	r1, #8
 80026d4:	430a      	orrs	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2104      	movs	r1, #4
 80026e4:	438a      	bics	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6999      	ldr	r1, [r3, #24]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	619a      	str	r2, [r3, #24]
      break;
 80026fa:	e0af      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fab1 	bl	8002c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0109      	lsls	r1, r1, #4
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4954      	ldr	r1, [pc, #336]	; (8002878 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002728:	400a      	ands	r2, r1
 800272a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	021a      	lsls	r2, r3, #8
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	619a      	str	r2, [r3, #24]
      break;
 8002740:	e08c      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	0011      	movs	r1, r2
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fb12 	bl	8002d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2108      	movs	r1, #8
 800275c:	430a      	orrs	r2, r1
 800275e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2104      	movs	r1, #4
 800276c:	438a      	bics	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69d9      	ldr	r1, [r3, #28]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	61da      	str	r2, [r3, #28]
      break;
 8002782:	e06b      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fb79 	bl	8002e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0109      	lsls	r1, r1, #4
 80027a0:	430a      	orrs	r2, r1
 80027a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4932      	ldr	r1, [pc, #200]	; (8002878 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69d9      	ldr	r1, [r3, #28]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	021a      	lsls	r2, r3, #8
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]
      break;
 80027c8:	e048      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	0011      	movs	r1, r2
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fbc0 	bl	8002f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2108      	movs	r1, #8
 80027e4:	430a      	orrs	r2, r1
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2104      	movs	r1, #4
 80027f4:	438a      	bics	r2, r1
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800280a:	e027      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fbff 	bl	8003018 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0109      	lsls	r1, r1, #4
 8002828:	430a      	orrs	r2, r1
 800282a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4910      	ldr	r1, [pc, #64]	; (8002878 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002838:	400a      	ands	r2, r1
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	021a      	lsls	r2, r3, #8
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002850:	e004      	b.n	800285c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002852:	2317      	movs	r3, #23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
      break;
 800285a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	223c      	movs	r2, #60	; 0x3c
 8002860:	2100      	movs	r1, #0
 8002862:	5499      	strb	r1, [r3, r2]

  return status;
 8002864:	2317      	movs	r3, #23
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b006      	add	sp, #24
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	08004348 	.word	0x08004348
 8002878:	fffffbff 	.word	0xfffffbff

0800287c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	230f      	movs	r3, #15
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	223c      	movs	r2, #60	; 0x3c
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_TIM_ConfigClockSource+0x20>
 8002898:	2302      	movs	r3, #2
 800289a:	e0bc      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x19a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223c      	movs	r2, #60	; 0x3c
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	223d      	movs	r2, #61	; 0x3d
 80028a8:	2102      	movs	r1, #2
 80028aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4a59      	ldr	r2, [pc, #356]	; (8002a24 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2280      	movs	r2, #128	; 0x80
 80028d2:	0192      	lsls	r2, r2, #6
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xde>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0192      	lsls	r2, r2, #6
 80028dc:	4293      	cmp	r3, r2
 80028de:	d900      	bls.n	80028e2 <HAL_TIM_ConfigClockSource+0x66>
 80028e0:	e088      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	0152      	lsls	r2, r2, #5
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_TIM_ConfigClockSource+0x70>
 80028ea:	e088      	b.n	80029fe <HAL_TIM_ConfigClockSource+0x182>
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	0152      	lsls	r2, r2, #5
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d900      	bls.n	80028f6 <HAL_TIM_ConfigClockSource+0x7a>
 80028f4:	e07e      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 80028f6:	2b70      	cmp	r3, #112	; 0x70
 80028f8:	d018      	beq.n	800292c <HAL_TIM_ConfigClockSource+0xb0>
 80028fa:	d900      	bls.n	80028fe <HAL_TIM_ConfigClockSource+0x82>
 80028fc:	e07a      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 80028fe:	2b60      	cmp	r3, #96	; 0x60
 8002900:	d04f      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x126>
 8002902:	d900      	bls.n	8002906 <HAL_TIM_ConfigClockSource+0x8a>
 8002904:	e076      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 8002906:	2b50      	cmp	r3, #80	; 0x50
 8002908:	d03b      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x106>
 800290a:	d900      	bls.n	800290e <HAL_TIM_ConfigClockSource+0x92>
 800290c:	e072      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d057      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x146>
 8002912:	d900      	bls.n	8002916 <HAL_TIM_ConfigClockSource+0x9a>
 8002914:	e06e      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 8002916:	2b30      	cmp	r3, #48	; 0x30
 8002918:	d063      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 8002920:	d868      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d05d      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 8002926:	2b10      	cmp	r3, #16
 8002928:	d05b      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x166>
 800292a:	e063      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	f000 fc4c 	bl	80031d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2277      	movs	r2, #119	; 0x77
 800294c:	4313      	orrs	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]
      break;
 8002958:	e052      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	f000 fc35 	bl	80031d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	01c9      	lsls	r1, r1, #7
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03e      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	001a      	movs	r2, r3
 8002990:	f000 fba6 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	; 0x50
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fc00 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02e      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	001a      	movs	r2, r3
 80029b0:	f000 fbc4 	bl	800313c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	; 0x60
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fbf0 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01e      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	001a      	movs	r2, r3
 80029d0:	f000 fb86 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 fbe0 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00e      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0019      	movs	r1, r3
 80029ec:	0010      	movs	r0, r2
 80029ee:	f000 fbd7 	bl	80031a0 <TIM_ITRx_SetConfig>
      break;
 80029f2:	e005      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
      break;
 80029fc:	e000      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80029fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	223d      	movs	r2, #61	; 0x3d
 8002a04:	2101      	movs	r1, #1
 8002a06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	223c      	movs	r2, #60	; 0x3c
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a10:	230f      	movs	r3, #15
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	781b      	ldrb	r3, [r3, #0]
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	ffceff88 	.word	0xffceff88
 8002a24:	ffff00ff 	.word	0xffff00ff

08002a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <TIM_Base_SetConfig+0x110>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00c      	beq.n	8002a5a <TIM_Base_SetConfig+0x32>
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	05db      	lsls	r3, r3, #23
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d007      	beq.n	8002a5a <TIM_Base_SetConfig+0x32>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a3b      	ldr	r2, [pc, #236]	; (8002b3c <TIM_Base_SetConfig+0x114>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_Base_SetConfig+0x32>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a3a      	ldr	r2, [pc, #232]	; (8002b40 <TIM_Base_SetConfig+0x118>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2270      	movs	r2, #112	; 0x70
 8002a5e:	4393      	bics	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a32      	ldr	r2, [pc, #200]	; (8002b38 <TIM_Base_SetConfig+0x110>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d01c      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	05db      	lsls	r3, r3, #23
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d017      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	; (8002b3c <TIM_Base_SetConfig+0x114>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <TIM_Base_SetConfig+0x118>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00f      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <TIM_Base_SetConfig+0x11c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00b      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0x120>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <TIM_Base_SetConfig+0x124>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x86>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <TIM_Base_SetConfig+0x128>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <TIM_Base_SetConfig+0x12c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <TIM_Base_SetConfig+0x110>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00b      	beq.n	8002b06 <TIM_Base_SetConfig+0xde>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <TIM_Base_SetConfig+0x120>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <TIM_Base_SetConfig+0xde>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <TIM_Base_SetConfig+0x124>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_Base_SetConfig+0xde>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <TIM_Base_SetConfig+0x128>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d103      	bne.n	8002b0e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2201      	movs	r2, #1
 8002b26:	4393      	bics	r3, r2
 8002b28:	001a      	movs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]
  }
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800
 8002b44:	40002000 	.word	0x40002000
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40014400 	.word	0x40014400
 8002b50:	40014800 	.word	0x40014800
 8002b54:	fffffcff 	.word	0xfffffcff

08002b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4393      	bics	r3, r2
 8002b70:	001a      	movs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a32      	ldr	r2, [pc, #200]	; (8002c50 <TIM_OC1_SetConfig+0xf8>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4393      	bics	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	4393      	bics	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a28      	ldr	r2, [pc, #160]	; (8002c54 <TIM_OC1_SetConfig+0xfc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <TIM_OC1_SetConfig+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <TIM_OC1_SetConfig+0x100>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <TIM_OC1_SetConfig+0x76>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <TIM_OC1_SetConfig+0x104>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d003      	beq.n	8002bce <TIM_OC1_SetConfig+0x76>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <TIM_OC1_SetConfig+0x108>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10c      	bne.n	8002be8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2204      	movs	r2, #4
 8002be4:	4393      	bics	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <TIM_OC1_SetConfig+0xfc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_OC1_SetConfig+0xb0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <TIM_OC1_SetConfig+0x100>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_OC1_SetConfig+0xb0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <TIM_OC1_SetConfig+0x104>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_OC1_SetConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <TIM_OC1_SetConfig+0x108>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d111      	bne.n	8002c2c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <TIM_OC1_SetConfig+0x10c>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <TIM_OC1_SetConfig+0x110>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b006      	add	sp, #24
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	fffeff8f 	.word	0xfffeff8f
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800
 8002c64:	fffffeff 	.word	0xfffffeff
 8002c68:	fffffdff 	.word	0xfffffdff

08002c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2210      	movs	r2, #16
 8002c82:	4393      	bics	r3, r2
 8002c84:	001a      	movs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <TIM_OC2_SetConfig+0xe8>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a2d      	ldr	r2, [pc, #180]	; (8002d58 <TIM_OC2_SetConfig+0xec>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <TIM_OC2_SetConfig+0xf0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2240      	movs	r2, #64	; 0x40
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <TIM_OC2_SetConfig+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_OC2_SetConfig+0x9e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <TIM_OC2_SetConfig+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_OC2_SetConfig+0x9e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <TIM_OC2_SetConfig+0xf8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_OC2_SetConfig+0x9e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <TIM_OC2_SetConfig+0xfc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d113      	bne.n	8002d32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <TIM_OC2_SetConfig+0x100>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <TIM_OC2_SetConfig+0x104>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b006      	add	sp, #24
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	feff8fff 	.word	0xfeff8fff
 8002d58:	fffffcff 	.word	0xfffffcff
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40014400 	.word	0x40014400
 8002d68:	40014800 	.word	0x40014800
 8002d6c:	fffffbff 	.word	0xfffffbff
 8002d70:	fffff7ff 	.word	0xfffff7ff

08002d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <TIM_OC3_SetConfig+0xe4>)
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <TIM_OC3_SetConfig+0xe8>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2203      	movs	r2, #3
 8002da8:	4393      	bics	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <TIM_OC3_SetConfig+0xec>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <TIM_OC3_SetConfig+0xf0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10d      	bne.n	8002dee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <TIM_OC3_SetConfig+0xf4>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <TIM_OC3_SetConfig+0xf8>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <TIM_OC3_SetConfig+0xf0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <TIM_OC3_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <TIM_OC3_SetConfig+0xfc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_OC3_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <TIM_OC3_SetConfig+0x100>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_OC3_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <TIM_OC3_SetConfig+0x104>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <TIM_OC3_SetConfig+0x108>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <TIM_OC3_SetConfig+0x10c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	621a      	str	r2, [r3, #32]
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b006      	add	sp, #24
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	fffffeff 	.word	0xfffffeff
 8002e5c:	fffeff8f 	.word	0xfffeff8f
 8002e60:	fffffdff 	.word	0xfffffdff
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	fffff7ff 	.word	0xfffff7ff
 8002e6c:	fffffbff 	.word	0xfffffbff
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800
 8002e7c:	ffffefff 	.word	0xffffefff
 8002e80:	ffffdfff 	.word	0xffffdfff

08002e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <TIM_OC4_SetConfig+0xb0>)
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <TIM_OC4_SetConfig+0xb4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <TIM_OC4_SetConfig+0xb8>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <TIM_OC4_SetConfig+0xbc>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <TIM_OC4_SetConfig+0xc0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_OC4_SetConfig+0x78>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <TIM_OC4_SetConfig+0xc4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_OC4_SetConfig+0x78>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <TIM_OC4_SetConfig+0xc8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_OC4_SetConfig+0x78>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <TIM_OC4_SetConfig+0xcc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d109      	bne.n	8002f10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <TIM_OC4_SetConfig+0xd0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	019b      	lsls	r3, r3, #6
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b006      	add	sp, #24
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	ffffefff 	.word	0xffffefff
 8002f38:	feff8fff 	.word	0xfeff8fff
 8002f3c:	fffffcff 	.word	0xfffffcff
 8002f40:	ffffdfff 	.word	0xffffdfff
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40014400 	.word	0x40014400
 8002f50:	40014800 	.word	0x40014800
 8002f54:	ffffbfff 	.word	0xffffbfff

08002f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <TIM_OC5_SetConfig+0xa4>)
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <TIM_OC5_SetConfig+0xa8>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <TIM_OC5_SetConfig+0xac>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <TIM_OC5_SetConfig+0xb0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <TIM_OC5_SetConfig+0x6e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a16      	ldr	r2, [pc, #88]	; (800300c <TIM_OC5_SetConfig+0xb4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_OC5_SetConfig+0x6e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a15      	ldr	r2, [pc, #84]	; (8003010 <TIM_OC5_SetConfig+0xb8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_OC5_SetConfig+0x6e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <TIM_OC5_SetConfig+0xbc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d109      	bne.n	8002fda <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <TIM_OC5_SetConfig+0xa4>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	621a      	str	r2, [r3, #32]
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b006      	add	sp, #24
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	fffeffff 	.word	0xfffeffff
 8003000:	fffeff8f 	.word	0xfffeff8f
 8003004:	fffdffff 	.word	0xfffdffff
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800

08003018 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <TIM_OC6_SetConfig+0xa8>)
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <TIM_OC6_SetConfig+0xac>)
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <TIM_OC6_SetConfig+0xb0>)
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	051b      	lsls	r3, r3, #20
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <TIM_OC6_SetConfig+0xb4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_OC6_SetConfig+0x70>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <TIM_OC6_SetConfig+0xb8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_OC6_SetConfig+0x70>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <TIM_OC6_SetConfig+0xbc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_OC6_SetConfig+0x70>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <TIM_OC6_SetConfig+0xc0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d109      	bne.n	800309c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <TIM_OC6_SetConfig+0xc4>)
 800308c:	4013      	ands	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	ffefffff 	.word	0xffefffff
 80030c4:	feff8fff 	.word	0xfeff8fff
 80030c8:	ffdfffff 	.word	0xffdfffff
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800
 80030dc:	fffbffff 	.word	0xfffbffff

080030e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4393      	bics	r3, r2
 80030fa:	001a      	movs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	22f0      	movs	r2, #240	; 0xf0
 800310a:	4393      	bics	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	220a      	movs	r2, #10
 800311c:	4393      	bics	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b006      	add	sp, #24
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	2210      	movs	r2, #16
 8003154:	4393      	bics	r3, r2
 8003156:	001a      	movs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4a0d      	ldr	r2, [pc, #52]	; (800319c <TIM_TI2_ConfigInputStage+0x60>)
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	22a0      	movs	r2, #160	; 0xa0
 8003178:	4393      	bics	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	ffff0fff 	.word	0xffff0fff

080031a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <TIM_ITRx_SetConfig+0x34>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	2207      	movs	r2, #7
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	609a      	str	r2, [r3, #8]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	ffcfff8f 	.word	0xffcfff8f

080031d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <TIM_ETR_SetConfig+0x3c>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b006      	add	sp, #24
 8003212:	bd80      	pop	{r7, pc}
 8003214:	ffff00ff 	.word	0xffff00ff

08003218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	221f      	movs	r2, #31
 8003228:	4013      	ands	r3, r2
 800322a:	2201      	movs	r2, #1
 800322c:	409a      	lsls	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	43d2      	mvns	r2, r2
 800323a:	401a      	ands	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	211f      	movs	r1, #31
 8003248:	400b      	ands	r3, r1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4099      	lsls	r1, r3
 800324e:	000b      	movs	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b006      	add	sp, #24
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	223c      	movs	r2, #60	; 0x3c
 800326e:	5c9b      	ldrb	r3, [r3, r2]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003274:	2302      	movs	r3, #2
 8003276:	e05a      	b.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	223c      	movs	r2, #60	; 0x3c
 800327c:	2101      	movs	r1, #1
 800327e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	223d      	movs	r2, #61	; 0x3d
 8003284:	2102      	movs	r1, #2
 8003286:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a25      	ldr	r2, [pc, #148]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2270      	movs	r2, #112	; 0x70
 80032b8:	4393      	bics	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d014      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	05db      	lsls	r3, r3, #23
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d00e      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10c      	bne.n	800331c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	4393      	bics	r3, r2
 8003308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	223d      	movs	r2, #61	; 0x3d
 8003320:	2101      	movs	r1, #1
 8003322:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	223c      	movs	r2, #60	; 0x3c
 8003328:	2100      	movs	r1, #0
 800332a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b004      	add	sp, #16
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	40012c00 	.word	0x40012c00
 800333c:	ff0fffff 	.word	0xff0fffff
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40014000 	.word	0x40014000

0800334c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223c      	movs	r2, #60	; 0x3c
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e06f      	b.n	8003448 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	223c      	movs	r2, #60	; 0x3c
 800336c:	2101      	movs	r1, #1
 800336e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	22ff      	movs	r2, #255	; 0xff
 8003374:	4393      	bics	r3, r2
 8003376:	001a      	movs	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a33      	ldr	r2, [pc, #204]	; (8003450 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003384:	401a      	ands	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a30      	ldr	r2, [pc, #192]	; (8003454 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003392:	401a      	ands	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80033a0:	401a      	ands	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a2b      	ldr	r2, [pc, #172]	; (800345c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80033ae:	401a      	ands	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a29      	ldr	r2, [pc, #164]	; (8003460 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80033bc:	401a      	ands	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80033ca:	401a      	ands	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80033d8:	401a      	ands	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80033e8:	401a      	ands	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d11c      	bne.n	8003436 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003400:	401a      	ands	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	051b      	lsls	r3, r3, #20
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003410:	401a      	ands	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800341e:	401a      	ands	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800342c:	401a      	ands	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	223c      	movs	r2, #60	; 0x3c
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	fffffcff 	.word	0xfffffcff
 8003454:	fffffbff 	.word	0xfffffbff
 8003458:	fffff7ff 	.word	0xfffff7ff
 800345c:	ffffefff 	.word	0xffffefff
 8003460:	ffffdfff 	.word	0xffffdfff
 8003464:	ffffbfff 	.word	0xffffbfff
 8003468:	fff0ffff 	.word	0xfff0ffff
 800346c:	efffffff 	.word	0xefffffff
 8003470:	40012c00 	.word	0x40012c00
 8003474:	ff0fffff 	.word	0xff0fffff
 8003478:	feffffff 	.word	0xfeffffff
 800347c:	fdffffff 	.word	0xfdffffff
 8003480:	dfffffff 	.word	0xdfffffff

08003484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e046      	b.n	8003524 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2288      	movs	r2, #136	; 0x88
 800349a:	589b      	ldr	r3, [r3, r2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2284      	movs	r2, #132	; 0x84
 80034a4:	2100      	movs	r1, #0
 80034a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd fbb6 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2288      	movs	r2, #136	; 0x88
 80034b4:	2124      	movs	r1, #36	; 0x24
 80034b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 fb82 	bl	8003bdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 f828 	bl	8003530 <UART_SetConfig>
 80034e0:	0003      	movs	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e01c      	b.n	8003524 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	490d      	ldr	r1, [pc, #52]	; (800352c <HAL_UART_Init+0xa8>)
 80034f6:	400a      	ands	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	212a      	movs	r1, #42	; 0x2a
 8003506:	438a      	bics	r2, r1
 8003508:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fc11 	bl	8003d44 <UART_CheckIdleState>
 8003522:	0003      	movs	r3, r0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}
 800352c:	ffffb7ff 	.word	0xffffb7ff

08003530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b090      	sub	sp, #64	; 0x40
 8003534:	af00      	add	r7, sp, #0
 8003536:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003538:	231a      	movs	r3, #26
 800353a:	2220      	movs	r2, #32
 800353c:	189b      	adds	r3, r3, r2
 800353e:	19db      	adds	r3, r3, r7
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	4313      	orrs	r3, r2
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4ac1      	ldr	r2, [pc, #772]	; (8003868 <UART_SetConfig+0x338>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356e:	430b      	orrs	r3, r1
 8003570:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4abc      	ldr	r2, [pc, #752]	; (800386c <UART_SetConfig+0x33c>)
 800357a:	4013      	ands	r3, r2
 800357c:	0018      	movs	r0, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	0003      	movs	r3, r0
 8003588:	430b      	orrs	r3, r1
 800358a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4ab6      	ldr	r2, [pc, #728]	; (8003870 <UART_SetConfig+0x340>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d009      	beq.n	80035b0 <UART_SetConfig+0x80>
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4ab4      	ldr	r2, [pc, #720]	; (8003874 <UART_SetConfig+0x344>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ac:	4313      	orrs	r3, r2
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4ab0      	ldr	r2, [pc, #704]	; (8003878 <UART_SetConfig+0x348>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	220f      	movs	r2, #15
 80035ce:	4393      	bics	r3, r2
 80035d0:	0018      	movs	r0, r3
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	0003      	movs	r3, r0
 80035dc:	430b      	orrs	r3, r1
 80035de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4aa5      	ldr	r2, [pc, #660]	; (800387c <UART_SetConfig+0x34c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d131      	bne.n	800364e <UART_SetConfig+0x11e>
 80035ea:	4ba5      	ldr	r3, [pc, #660]	; (8003880 <UART_SetConfig+0x350>)
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	2203      	movs	r2, #3
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d01d      	beq.n	8003632 <UART_SetConfig+0x102>
 80035f6:	d823      	bhi.n	8003640 <UART_SetConfig+0x110>
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d00c      	beq.n	8003616 <UART_SetConfig+0xe6>
 80035fc:	d820      	bhi.n	8003640 <UART_SetConfig+0x110>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <UART_SetConfig+0xd8>
 8003602:	2b01      	cmp	r3, #1
 8003604:	d00e      	beq.n	8003624 <UART_SetConfig+0xf4>
 8003606:	e01b      	b.n	8003640 <UART_SetConfig+0x110>
 8003608:	231b      	movs	r3, #27
 800360a:	2220      	movs	r2, #32
 800360c:	189b      	adds	r3, r3, r2
 800360e:	19db      	adds	r3, r3, r7
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e154      	b.n	80038c0 <UART_SetConfig+0x390>
 8003616:	231b      	movs	r3, #27
 8003618:	2220      	movs	r2, #32
 800361a:	189b      	adds	r3, r3, r2
 800361c:	19db      	adds	r3, r3, r7
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e14d      	b.n	80038c0 <UART_SetConfig+0x390>
 8003624:	231b      	movs	r3, #27
 8003626:	2220      	movs	r2, #32
 8003628:	189b      	adds	r3, r3, r2
 800362a:	19db      	adds	r3, r3, r7
 800362c:	2204      	movs	r2, #4
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e146      	b.n	80038c0 <UART_SetConfig+0x390>
 8003632:	231b      	movs	r3, #27
 8003634:	2220      	movs	r2, #32
 8003636:	189b      	adds	r3, r3, r2
 8003638:	19db      	adds	r3, r3, r7
 800363a:	2208      	movs	r2, #8
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e13f      	b.n	80038c0 <UART_SetConfig+0x390>
 8003640:	231b      	movs	r3, #27
 8003642:	2220      	movs	r2, #32
 8003644:	189b      	adds	r3, r3, r2
 8003646:	19db      	adds	r3, r3, r7
 8003648:	2210      	movs	r2, #16
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e138      	b.n	80038c0 <UART_SetConfig+0x390>
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a8c      	ldr	r2, [pc, #560]	; (8003884 <UART_SetConfig+0x354>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d131      	bne.n	80036bc <UART_SetConfig+0x18c>
 8003658:	4b89      	ldr	r3, [pc, #548]	; (8003880 <UART_SetConfig+0x350>)
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	220c      	movs	r2, #12
 800365e:	4013      	ands	r3, r2
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d01d      	beq.n	80036a0 <UART_SetConfig+0x170>
 8003664:	d823      	bhi.n	80036ae <UART_SetConfig+0x17e>
 8003666:	2b08      	cmp	r3, #8
 8003668:	d00c      	beq.n	8003684 <UART_SetConfig+0x154>
 800366a:	d820      	bhi.n	80036ae <UART_SetConfig+0x17e>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <UART_SetConfig+0x146>
 8003670:	2b04      	cmp	r3, #4
 8003672:	d00e      	beq.n	8003692 <UART_SetConfig+0x162>
 8003674:	e01b      	b.n	80036ae <UART_SetConfig+0x17e>
 8003676:	231b      	movs	r3, #27
 8003678:	2220      	movs	r2, #32
 800367a:	189b      	adds	r3, r3, r2
 800367c:	19db      	adds	r3, r3, r7
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e11d      	b.n	80038c0 <UART_SetConfig+0x390>
 8003684:	231b      	movs	r3, #27
 8003686:	2220      	movs	r2, #32
 8003688:	189b      	adds	r3, r3, r2
 800368a:	19db      	adds	r3, r3, r7
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e116      	b.n	80038c0 <UART_SetConfig+0x390>
 8003692:	231b      	movs	r3, #27
 8003694:	2220      	movs	r2, #32
 8003696:	189b      	adds	r3, r3, r2
 8003698:	19db      	adds	r3, r3, r7
 800369a:	2204      	movs	r2, #4
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e10f      	b.n	80038c0 <UART_SetConfig+0x390>
 80036a0:	231b      	movs	r3, #27
 80036a2:	2220      	movs	r2, #32
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	19db      	adds	r3, r3, r7
 80036a8:	2208      	movs	r2, #8
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e108      	b.n	80038c0 <UART_SetConfig+0x390>
 80036ae:	231b      	movs	r3, #27
 80036b0:	2220      	movs	r2, #32
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	19db      	adds	r3, r3, r7
 80036b6:	2210      	movs	r2, #16
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e101      	b.n	80038c0 <UART_SetConfig+0x390>
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a71      	ldr	r2, [pc, #452]	; (8003888 <UART_SetConfig+0x358>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d131      	bne.n	800372a <UART_SetConfig+0x1fa>
 80036c6:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <UART_SetConfig+0x350>)
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	2230      	movs	r2, #48	; 0x30
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b30      	cmp	r3, #48	; 0x30
 80036d0:	d01d      	beq.n	800370e <UART_SetConfig+0x1de>
 80036d2:	d823      	bhi.n	800371c <UART_SetConfig+0x1ec>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d00c      	beq.n	80036f2 <UART_SetConfig+0x1c2>
 80036d8:	d820      	bhi.n	800371c <UART_SetConfig+0x1ec>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <UART_SetConfig+0x1b4>
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d00e      	beq.n	8003700 <UART_SetConfig+0x1d0>
 80036e2:	e01b      	b.n	800371c <UART_SetConfig+0x1ec>
 80036e4:	231b      	movs	r3, #27
 80036e6:	2220      	movs	r2, #32
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	19db      	adds	r3, r3, r7
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e0e6      	b.n	80038c0 <UART_SetConfig+0x390>
 80036f2:	231b      	movs	r3, #27
 80036f4:	2220      	movs	r2, #32
 80036f6:	189b      	adds	r3, r3, r2
 80036f8:	19db      	adds	r3, r3, r7
 80036fa:	2202      	movs	r2, #2
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e0df      	b.n	80038c0 <UART_SetConfig+0x390>
 8003700:	231b      	movs	r3, #27
 8003702:	2220      	movs	r2, #32
 8003704:	189b      	adds	r3, r3, r2
 8003706:	19db      	adds	r3, r3, r7
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e0d8      	b.n	80038c0 <UART_SetConfig+0x390>
 800370e:	231b      	movs	r3, #27
 8003710:	2220      	movs	r2, #32
 8003712:	189b      	adds	r3, r3, r2
 8003714:	19db      	adds	r3, r3, r7
 8003716:	2208      	movs	r2, #8
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e0d1      	b.n	80038c0 <UART_SetConfig+0x390>
 800371c:	231b      	movs	r3, #27
 800371e:	2220      	movs	r2, #32
 8003720:	189b      	adds	r3, r3, r2
 8003722:	19db      	adds	r3, r3, r7
 8003724:	2210      	movs	r2, #16
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e0ca      	b.n	80038c0 <UART_SetConfig+0x390>
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a57      	ldr	r2, [pc, #348]	; (800388c <UART_SetConfig+0x35c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d106      	bne.n	8003742 <UART_SetConfig+0x212>
 8003734:	231b      	movs	r3, #27
 8003736:	2220      	movs	r2, #32
 8003738:	189b      	adds	r3, r3, r2
 800373a:	19db      	adds	r3, r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	e0be      	b.n	80038c0 <UART_SetConfig+0x390>
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a52      	ldr	r2, [pc, #328]	; (8003890 <UART_SetConfig+0x360>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d106      	bne.n	800375a <UART_SetConfig+0x22a>
 800374c:	231b      	movs	r3, #27
 800374e:	2220      	movs	r2, #32
 8003750:	189b      	adds	r3, r3, r2
 8003752:	19db      	adds	r3, r3, r7
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	e0b2      	b.n	80038c0 <UART_SetConfig+0x390>
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a4d      	ldr	r2, [pc, #308]	; (8003894 <UART_SetConfig+0x364>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d106      	bne.n	8003772 <UART_SetConfig+0x242>
 8003764:	231b      	movs	r3, #27
 8003766:	2220      	movs	r2, #32
 8003768:	189b      	adds	r3, r3, r2
 800376a:	19db      	adds	r3, r3, r7
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e0a6      	b.n	80038c0 <UART_SetConfig+0x390>
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3e      	ldr	r2, [pc, #248]	; (8003870 <UART_SetConfig+0x340>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d13e      	bne.n	80037fa <UART_SetConfig+0x2ca>
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <UART_SetConfig+0x350>)
 800377e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003780:	23c0      	movs	r3, #192	; 0xc0
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4013      	ands	r3, r2
 8003786:	22c0      	movs	r2, #192	; 0xc0
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	4293      	cmp	r3, r2
 800378c:	d027      	beq.n	80037de <UART_SetConfig+0x2ae>
 800378e:	22c0      	movs	r2, #192	; 0xc0
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	4293      	cmp	r3, r2
 8003794:	d82a      	bhi.n	80037ec <UART_SetConfig+0x2bc>
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	4293      	cmp	r3, r2
 800379c:	d011      	beq.n	80037c2 <UART_SetConfig+0x292>
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d822      	bhi.n	80037ec <UART_SetConfig+0x2bc>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <UART_SetConfig+0x284>
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	00d2      	lsls	r2, r2, #3
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <UART_SetConfig+0x2a0>
 80037b2:	e01b      	b.n	80037ec <UART_SetConfig+0x2bc>
 80037b4:	231b      	movs	r3, #27
 80037b6:	2220      	movs	r2, #32
 80037b8:	189b      	adds	r3, r3, r2
 80037ba:	19db      	adds	r3, r3, r7
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e07e      	b.n	80038c0 <UART_SetConfig+0x390>
 80037c2:	231b      	movs	r3, #27
 80037c4:	2220      	movs	r2, #32
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	19db      	adds	r3, r3, r7
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e077      	b.n	80038c0 <UART_SetConfig+0x390>
 80037d0:	231b      	movs	r3, #27
 80037d2:	2220      	movs	r2, #32
 80037d4:	189b      	adds	r3, r3, r2
 80037d6:	19db      	adds	r3, r3, r7
 80037d8:	2204      	movs	r2, #4
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e070      	b.n	80038c0 <UART_SetConfig+0x390>
 80037de:	231b      	movs	r3, #27
 80037e0:	2220      	movs	r2, #32
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	19db      	adds	r3, r3, r7
 80037e6:	2208      	movs	r2, #8
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e069      	b.n	80038c0 <UART_SetConfig+0x390>
 80037ec:	231b      	movs	r3, #27
 80037ee:	2220      	movs	r2, #32
 80037f0:	189b      	adds	r3, r3, r2
 80037f2:	19db      	adds	r3, r3, r7
 80037f4:	2210      	movs	r2, #16
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e062      	b.n	80038c0 <UART_SetConfig+0x390>
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <UART_SetConfig+0x344>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d157      	bne.n	80038b4 <UART_SetConfig+0x384>
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <UART_SetConfig+0x350>)
 8003806:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003808:	23c0      	movs	r3, #192	; 0xc0
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4013      	ands	r3, r2
 800380e:	22c0      	movs	r2, #192	; 0xc0
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	4293      	cmp	r3, r2
 8003814:	d040      	beq.n	8003898 <UART_SetConfig+0x368>
 8003816:	22c0      	movs	r2, #192	; 0xc0
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	4293      	cmp	r3, r2
 800381c:	d843      	bhi.n	80038a6 <UART_SetConfig+0x376>
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	4293      	cmp	r3, r2
 8003824:	d011      	beq.n	800384a <UART_SetConfig+0x31a>
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	4293      	cmp	r3, r2
 800382c:	d83b      	bhi.n	80038a6 <UART_SetConfig+0x376>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <UART_SetConfig+0x30c>
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	0052      	lsls	r2, r2, #1
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <UART_SetConfig+0x328>
 800383a:	e034      	b.n	80038a6 <UART_SetConfig+0x376>
 800383c:	231b      	movs	r3, #27
 800383e:	2220      	movs	r2, #32
 8003840:	189b      	adds	r3, r3, r2
 8003842:	19db      	adds	r3, r3, r7
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e03a      	b.n	80038c0 <UART_SetConfig+0x390>
 800384a:	231b      	movs	r3, #27
 800384c:	2220      	movs	r2, #32
 800384e:	189b      	adds	r3, r3, r2
 8003850:	19db      	adds	r3, r3, r7
 8003852:	2202      	movs	r2, #2
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e033      	b.n	80038c0 <UART_SetConfig+0x390>
 8003858:	231b      	movs	r3, #27
 800385a:	2220      	movs	r2, #32
 800385c:	189b      	adds	r3, r3, r2
 800385e:	19db      	adds	r3, r3, r7
 8003860:	2204      	movs	r2, #4
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e02c      	b.n	80038c0 <UART_SetConfig+0x390>
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	cfff69f3 	.word	0xcfff69f3
 800386c:	ffffcfff 	.word	0xffffcfff
 8003870:	40008000 	.word	0x40008000
 8003874:	40008400 	.word	0x40008400
 8003878:	11fff4ff 	.word	0x11fff4ff
 800387c:	40013800 	.word	0x40013800
 8003880:	40021000 	.word	0x40021000
 8003884:	40004400 	.word	0x40004400
 8003888:	40004800 	.word	0x40004800
 800388c:	40004c00 	.word	0x40004c00
 8003890:	40005000 	.word	0x40005000
 8003894:	40013c00 	.word	0x40013c00
 8003898:	231b      	movs	r3, #27
 800389a:	2220      	movs	r2, #32
 800389c:	189b      	adds	r3, r3, r2
 800389e:	19db      	adds	r3, r3, r7
 80038a0:	2208      	movs	r2, #8
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e00c      	b.n	80038c0 <UART_SetConfig+0x390>
 80038a6:	231b      	movs	r3, #27
 80038a8:	2220      	movs	r2, #32
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	19db      	adds	r3, r3, r7
 80038ae:	2210      	movs	r2, #16
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e005      	b.n	80038c0 <UART_SetConfig+0x390>
 80038b4:	231b      	movs	r3, #27
 80038b6:	2220      	movs	r2, #32
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	19db      	adds	r3, r3, r7
 80038bc:	2210      	movs	r2, #16
 80038be:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4ac1      	ldr	r2, [pc, #772]	; (8003bcc <UART_SetConfig+0x69c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d005      	beq.n	80038d6 <UART_SetConfig+0x3a6>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4ac0      	ldr	r2, [pc, #768]	; (8003bd0 <UART_SetConfig+0x6a0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d000      	beq.n	80038d6 <UART_SetConfig+0x3a6>
 80038d4:	e093      	b.n	80039fe <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038d6:	231b      	movs	r3, #27
 80038d8:	2220      	movs	r2, #32
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	19db      	adds	r3, r3, r7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d015      	beq.n	8003910 <UART_SetConfig+0x3e0>
 80038e4:	dc18      	bgt.n	8003918 <UART_SetConfig+0x3e8>
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d00d      	beq.n	8003906 <UART_SetConfig+0x3d6>
 80038ea:	dc15      	bgt.n	8003918 <UART_SetConfig+0x3e8>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <UART_SetConfig+0x3c6>
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d005      	beq.n	8003900 <UART_SetConfig+0x3d0>
 80038f4:	e010      	b.n	8003918 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f6:	f7fe fa3b 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 80038fa:	0003      	movs	r3, r0
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038fe:	e014      	b.n	800392a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003900:	4bb4      	ldr	r3, [pc, #720]	; (8003bd4 <UART_SetConfig+0x6a4>)
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003904:	e011      	b.n	800392a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003906:	f7fe f9a7 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 800390a:	0003      	movs	r3, r0
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800390e:	e00c      	b.n	800392a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003916:	e008      	b.n	800392a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800391c:	231a      	movs	r3, #26
 800391e:	2220      	movs	r2, #32
 8003920:	189b      	adds	r3, r3, r2
 8003922:	19db      	adds	r3, r3, r7
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
        break;
 8003928:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	2b00      	cmp	r3, #0
 800392e:	d100      	bne.n	8003932 <UART_SetConfig+0x402>
 8003930:	e135      	b.n	8003b9e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003936:	4ba8      	ldr	r3, [pc, #672]	; (8003bd8 <UART_SetConfig+0x6a8>)
 8003938:	0052      	lsls	r2, r2, #1
 800393a:	5ad3      	ldrh	r3, [r2, r3]
 800393c:	0019      	movs	r1, r3
 800393e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003940:	f7fc fbe0 	bl	8000104 <__udivsi3>
 8003944:	0003      	movs	r3, r0
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	0013      	movs	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	189b      	adds	r3, r3, r2
 8003952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003954:	429a      	cmp	r2, r3
 8003956:	d305      	bcc.n	8003964 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800395e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003960:	429a      	cmp	r2, r3
 8003962:	d906      	bls.n	8003972 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003964:	231a      	movs	r3, #26
 8003966:	2220      	movs	r2, #32
 8003968:	189b      	adds	r3, r3, r2
 800396a:	19db      	adds	r3, r3, r7
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e044      	b.n	80039fc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397e:	4b96      	ldr	r3, [pc, #600]	; (8003bd8 <UART_SetConfig+0x6a8>)
 8003980:	0052      	lsls	r2, r2, #1
 8003982:	5ad3      	ldrh	r3, [r2, r3]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	69b8      	ldr	r0, [r7, #24]
 8003990:	69f9      	ldr	r1, [r7, #28]
 8003992:	f7fc fd2d 	bl	80003f0 <__aeabi_uldivmod>
 8003996:	0002      	movs	r2, r0
 8003998:	000b      	movs	r3, r1
 800399a:	0e11      	lsrs	r1, r2, #24
 800399c:	021d      	lsls	r5, r3, #8
 800399e:	430d      	orrs	r5, r1
 80039a0:	0214      	lsls	r4, r2, #8
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	68f9      	ldr	r1, [r7, #12]
 80039b2:	1900      	adds	r0, r0, r4
 80039b4:	4169      	adcs	r1, r5
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	2300      	movs	r3, #0
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f7fc fd14 	bl	80003f0 <__aeabi_uldivmod>
 80039c8:	0002      	movs	r2, r0
 80039ca:	000b      	movs	r3, r1
 80039cc:	0013      	movs	r3, r2
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d309      	bcc.n	80039ee <UART_SetConfig+0x4be>
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	035b      	lsls	r3, r3, #13
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d204      	bcs.n	80039ee <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	e006      	b.n	80039fc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80039ee:	231a      	movs	r3, #26
 80039f0:	2220      	movs	r2, #32
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	19db      	adds	r3, r3, r7
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80039fa:	e0d0      	b.n	8003b9e <UART_SetConfig+0x66e>
 80039fc:	e0cf      	b.n	8003b9e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d000      	beq.n	8003a0c <UART_SetConfig+0x4dc>
 8003a0a:	e070      	b.n	8003aee <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003a0c:	231b      	movs	r3, #27
 8003a0e:	2220      	movs	r2, #32
 8003a10:	189b      	adds	r3, r3, r2
 8003a12:	19db      	adds	r3, r3, r7
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d015      	beq.n	8003a46 <UART_SetConfig+0x516>
 8003a1a:	dc18      	bgt.n	8003a4e <UART_SetConfig+0x51e>
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d00d      	beq.n	8003a3c <UART_SetConfig+0x50c>
 8003a20:	dc15      	bgt.n	8003a4e <UART_SetConfig+0x51e>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <UART_SetConfig+0x4fc>
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d005      	beq.n	8003a36 <UART_SetConfig+0x506>
 8003a2a:	e010      	b.n	8003a4e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f7fe f9a0 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8003a30:	0003      	movs	r3, r0
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a34:	e014      	b.n	8003a60 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <UART_SetConfig+0x6a4>)
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a3a:	e011      	b.n	8003a60 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3c:	f7fe f90c 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8003a40:	0003      	movs	r3, r0
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a44:	e00c      	b.n	8003a60 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a4c:	e008      	b.n	8003a60 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a52:	231a      	movs	r3, #26
 8003a54:	2220      	movs	r2, #32
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	19db      	adds	r3, r3, r7
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
        break;
 8003a5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d100      	bne.n	8003a68 <UART_SetConfig+0x538>
 8003a66:	e09a      	b.n	8003b9e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <UART_SetConfig+0x6a8>)
 8003a6e:	0052      	lsls	r2, r2, #1
 8003a70:	5ad3      	ldrh	r3, [r2, r3]
 8003a72:	0019      	movs	r1, r3
 8003a74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a76:	f7fc fb45 	bl	8000104 <__udivsi3>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	005a      	lsls	r2, r3, #1
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	18d2      	adds	r2, r2, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	0010      	movs	r0, r2
 8003a8e:	f7fc fb39 	bl	8000104 <__udivsi3>
 8003a92:	0003      	movs	r3, r0
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d921      	bls.n	8003ae0 <UART_SetConfig+0x5b0>
 8003a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	025b      	lsls	r3, r3, #9
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d21c      	bcs.n	8003ae0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	200e      	movs	r0, #14
 8003aac:	2420      	movs	r4, #32
 8003aae:	1903      	adds	r3, r0, r4
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2207      	movs	r2, #7
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	1903      	adds	r3, r0, r4
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	1902      	adds	r2, r0, r4
 8003aca:	19d2      	adds	r2, r2, r7
 8003acc:	8812      	ldrh	r2, [r2, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1902      	adds	r2, r0, r4
 8003ad8:	19d2      	adds	r2, r2, r7
 8003ada:	8812      	ldrh	r2, [r2, #0]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	e05e      	b.n	8003b9e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae0:	231a      	movs	r3, #26
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	19db      	adds	r3, r3, r7
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e057      	b.n	8003b9e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aee:	231b      	movs	r3, #27
 8003af0:	2220      	movs	r2, #32
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d015      	beq.n	8003b28 <UART_SetConfig+0x5f8>
 8003afc:	dc18      	bgt.n	8003b30 <UART_SetConfig+0x600>
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d00d      	beq.n	8003b1e <UART_SetConfig+0x5ee>
 8003b02:	dc15      	bgt.n	8003b30 <UART_SetConfig+0x600>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <UART_SetConfig+0x5de>
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d005      	beq.n	8003b18 <UART_SetConfig+0x5e8>
 8003b0c:	e010      	b.n	8003b30 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0e:	f7fe f92f 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8003b12:	0003      	movs	r3, r0
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b16:	e014      	b.n	8003b42 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <UART_SetConfig+0x6a4>)
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b1c:	e011      	b.n	8003b42 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe f89b 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8003b22:	0003      	movs	r3, r0
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b26:	e00c      	b.n	8003b42 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b2e:	e008      	b.n	8003b42 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b34:	231a      	movs	r3, #26
 8003b36:	2220      	movs	r2, #32
 8003b38:	189b      	adds	r3, r3, r2
 8003b3a:	19db      	adds	r3, r3, r7
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
        break;
 8003b40:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02a      	beq.n	8003b9e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4c:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <UART_SetConfig+0x6a8>)
 8003b4e:	0052      	lsls	r2, r2, #1
 8003b50:	5ad3      	ldrh	r3, [r2, r3]
 8003b52:	0019      	movs	r1, r3
 8003b54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b56:	f7fc fad5 	bl	8000104 <__udivsi3>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	18d2      	adds	r2, r2, r3
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	0010      	movs	r0, r2
 8003b6e:	f7fc fac9 	bl	8000104 <__udivsi3>
 8003b72:	0003      	movs	r3, r0
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b0f      	cmp	r3, #15
 8003b7a:	d90a      	bls.n	8003b92 <UART_SetConfig+0x662>
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	025b      	lsls	r3, r3, #9
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d205      	bcs.n	8003b92 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	e005      	b.n	8003b9e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003b92:	231a      	movs	r3, #26
 8003b94:	2220      	movs	r2, #32
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	226a      	movs	r2, #106	; 0x6a
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	2268      	movs	r2, #104	; 0x68
 8003baa:	2101      	movs	r1, #1
 8003bac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003bba:	231a      	movs	r3, #26
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	781b      	ldrb	r3, [r3, #0]
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b010      	add	sp, #64	; 0x40
 8003bca:	bdb0      	pop	{r4, r5, r7, pc}
 8003bcc:	40008000 	.word	0x40008000
 8003bd0:	40008400 	.word	0x40008400
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	0800439c 	.word	0x0800439c

08003bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2208      	movs	r2, #8
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <UART_AdvFeatureConfig+0x144>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a43      	ldr	r2, [pc, #268]	; (8003d24 <UART_AdvFeatureConfig+0x148>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a3b      	ldr	r2, [pc, #236]	; (8003d28 <UART_AdvFeatureConfig+0x14c>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	2204      	movs	r2, #4
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <UART_AdvFeatureConfig+0x150>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	2210      	movs	r2, #16
 8003c72:	4013      	ands	r3, r2
 8003c74:	d00b      	beq.n	8003c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <UART_AdvFeatureConfig+0x154>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	2220      	movs	r2, #32
 8003c94:	4013      	ands	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <UART_AdvFeatureConfig+0x158>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	2240      	movs	r2, #64	; 0x40
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <UART_AdvFeatureConfig+0x15c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	035b      	lsls	r3, r3, #13
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d10b      	bne.n	8003cf6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <UART_AdvFeatureConfig+0x160>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <UART_AdvFeatureConfig+0x164>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	ffff7fff 	.word	0xffff7fff
 8003d24:	fffdffff 	.word	0xfffdffff
 8003d28:	fffeffff 	.word	0xfffeffff
 8003d2c:	fffbffff 	.word	0xfffbffff
 8003d30:	ffffefff 	.word	0xffffefff
 8003d34:	ffffdfff 	.word	0xffffdfff
 8003d38:	ffefffff 	.word	0xffefffff
 8003d3c:	ff9fffff 	.word	0xff9fffff
 8003d40:	fff7ffff 	.word	0xfff7ffff

08003d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b092      	sub	sp, #72	; 0x48
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2290      	movs	r2, #144	; 0x90
 8003d50:	2100      	movs	r1, #0
 8003d52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d54:	f7fd f868 	bl	8000e28 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2208      	movs	r2, #8
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d12d      	bne.n	8003dc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	0391      	lsls	r1, r2, #14
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4a47      	ldr	r2, [pc, #284]	; (8003e90 <UART_CheckIdleState+0x14c>)
 8003d74:	9200      	str	r2, [sp, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f000 f88e 	bl	8003e98 <UART_WaitOnFlagUntilTimeout>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d022      	beq.n	8003dc6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	438a      	bics	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2288      	movs	r2, #136	; 0x88
 8003db6:	2120      	movs	r1, #32
 8003db8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2284      	movs	r2, #132	; 0x84
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e060      	b.n	8003e88 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d146      	bne.n	8003e62 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	03d1      	lsls	r1, r2, #15
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <UART_CheckIdleState+0x14c>)
 8003dde:	9200      	str	r2, [sp, #0]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f000 f859 	bl	8003e98 <UART_WaitOnFlagUntilTimeout>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d03b      	beq.n	8003e62 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dea:	f3ef 8310 	mrs	r3, PRIMASK
 8003dee:	60fb      	str	r3, [r7, #12]
  return(result);
 8003df0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
 8003df4:	2301      	movs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4922      	ldr	r1, [pc, #136]	; (8003e94 <UART_CheckIdleState+0x150>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e20:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e22:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	438a      	bics	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	228c      	movs	r2, #140	; 0x8c
 8003e52:	2120      	movs	r1, #32
 8003e54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2284      	movs	r2, #132	; 0x84
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e012      	b.n	8003e88 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2288      	movs	r2, #136	; 0x88
 8003e66:	2120      	movs	r1, #32
 8003e68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	228c      	movs	r2, #140	; 0x8c
 8003e6e:	2120      	movs	r1, #32
 8003e70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2284      	movs	r2, #132	; 0x84
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b010      	add	sp, #64	; 0x40
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	01ffffff 	.word	0x01ffffff
 8003e94:	fffffedf 	.word	0xfffffedf

08003e98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea8:	e051      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	3301      	adds	r3, #1
 8003eae:	d04e      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb0:	f7fc ffba 	bl	8000e28 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d302      	bcc.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e051      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d038      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d035      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d111      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 f83c 	bl	8003f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2290      	movs	r2, #144	; 0x90
 8003f04:	2108      	movs	r1, #8
 8003f06:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2284      	movs	r2, #132	; 0x84
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e02c      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	401a      	ands	r2, r3
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d112      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 f81f 	bl	8003f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2290      	movs	r2, #144	; 0x90
 8003f3e:	2120      	movs	r1, #32
 8003f40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2284      	movs	r2, #132	; 0x84
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e00f      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	425a      	negs	r2, r3
 8003f5e:	4153      	adcs	r3, r2
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	001a      	movs	r2, r3
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d09e      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b004      	add	sp, #16
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	; 0x38
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f80:	f3ef 8310 	mrs	r3, PRIMASK
 8003f84:	617b      	str	r3, [r7, #20]
  return(result);
 8003f86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4926      	ldr	r1, [pc, #152]	; (800403c <UART_EndRxTransfer+0xc4>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	623b      	str	r3, [r7, #32]
  return(result);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	491b      	ldr	r1, [pc, #108]	; (8004040 <UART_EndRxTransfer+0xc8>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d118      	bne.n	800401e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2110      	movs	r1, #16
 800400e:	438a      	bics	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	228c      	movs	r2, #140	; 0x8c
 8004022:	2120      	movs	r1, #32
 8004024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b00e      	add	sp, #56	; 0x38
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	fffffedf 	.word	0xfffffedf
 8004040:	effffffe 	.word	0xeffffffe

08004044 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2284      	movs	r2, #132	; 0x84
 8004050:	5c9b      	ldrb	r3, [r3, r2]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_UARTEx_DisableFifoMode+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	e027      	b.n	80040aa <HAL_UARTEx_DisableFifoMode+0x66>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2284      	movs	r2, #132	; 0x84
 800405e:	2101      	movs	r1, #1
 8004060:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2288      	movs	r2, #136	; 0x88
 8004066:	2124      	movs	r1, #36	; 0x24
 8004068:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	438a      	bics	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2288      	movs	r2, #136	; 0x88
 800409c:	2120      	movs	r1, #32
 800409e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2284      	movs	r2, #132	; 0x84
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b004      	add	sp, #16
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	dfffffff 	.word	0xdfffffff

080040b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2284      	movs	r2, #132	; 0x84
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e02e      	b.n	800412e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2284      	movs	r2, #132	; 0x84
 80040d4:	2101      	movs	r1, #1
 80040d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2288      	movs	r2, #136	; 0x88
 80040dc:	2124      	movs	r1, #36	; 0x24
 80040de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	08d9      	lsrs	r1, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0018      	movs	r0, r3
 8004110:	f000 f854 	bl	80041bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2288      	movs	r2, #136	; 0x88
 8004120:	2120      	movs	r1, #32
 8004122:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2284      	movs	r2, #132	; 0x84
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2284      	movs	r2, #132	; 0x84
 8004146:	5c9b      	ldrb	r3, [r3, r2]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800414c:	2302      	movs	r3, #2
 800414e:	e02f      	b.n	80041b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2284      	movs	r2, #132	; 0x84
 8004154:	2101      	movs	r1, #1
 8004156:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2288      	movs	r2, #136	; 0x88
 800415c:	2124      	movs	r1, #36	; 0x24
 800415e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2101      	movs	r1, #1
 8004174:	438a      	bics	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	0018      	movs	r0, r3
 8004192:	f000 f813 	bl	80041bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2288      	movs	r2, #136	; 0x88
 80041a2:	2120      	movs	r1, #32
 80041a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2284      	movs	r2, #132	; 0x84
 80041aa:	2100      	movs	r1, #0
 80041ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b004      	add	sp, #16
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	f1ffffff 	.word	0xf1ffffff

080041bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d108      	bne.n	80041de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	226a      	movs	r2, #106	; 0x6a
 80041d0:	2101      	movs	r1, #1
 80041d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2268      	movs	r2, #104	; 0x68
 80041d8:	2101      	movs	r1, #1
 80041da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041dc:	e043      	b.n	8004266 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041de:	260f      	movs	r6, #15
 80041e0:	19bb      	adds	r3, r7, r6
 80041e2:	2208      	movs	r2, #8
 80041e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041e6:	200e      	movs	r0, #14
 80041e8:	183b      	adds	r3, r7, r0
 80041ea:	2208      	movs	r2, #8
 80041ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	0e5b      	lsrs	r3, r3, #25
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	240d      	movs	r4, #13
 80041fa:	193b      	adds	r3, r7, r4
 80041fc:	2107      	movs	r1, #7
 80041fe:	400a      	ands	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	0f5b      	lsrs	r3, r3, #29
 800420a:	b2da      	uxtb	r2, r3
 800420c:	250c      	movs	r5, #12
 800420e:	197b      	adds	r3, r7, r5
 8004210:	2107      	movs	r1, #7
 8004212:	400a      	ands	r2, r1
 8004214:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004216:	183b      	adds	r3, r7, r0
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	197a      	adds	r2, r7, r5
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	4914      	ldr	r1, [pc, #80]	; (8004270 <UARTEx_SetNbDataToProcess+0xb4>)
 8004220:	5c8a      	ldrb	r2, [r1, r2]
 8004222:	435a      	muls	r2, r3
 8004224:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004226:	197b      	adds	r3, r7, r5
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <UARTEx_SetNbDataToProcess+0xb8>)
 800422c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800422e:	0019      	movs	r1, r3
 8004230:	f7fb fff2 	bl	8000218 <__divsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	b299      	uxth	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	226a      	movs	r2, #106	; 0x6a
 800423c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800423e:	19bb      	adds	r3, r7, r6
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	193a      	adds	r2, r7, r4
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	490a      	ldr	r1, [pc, #40]	; (8004270 <UARTEx_SetNbDataToProcess+0xb4>)
 8004248:	5c8a      	ldrb	r2, [r1, r2]
 800424a:	435a      	muls	r2, r3
 800424c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800424e:	193b      	adds	r3, r7, r4
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4a08      	ldr	r2, [pc, #32]	; (8004274 <UARTEx_SetNbDataToProcess+0xb8>)
 8004254:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004256:	0019      	movs	r1, r3
 8004258:	f7fb ffde 	bl	8000218 <__divsi3>
 800425c:	0003      	movs	r3, r0
 800425e:	b299      	uxth	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2268      	movs	r2, #104	; 0x68
 8004264:	5299      	strh	r1, [r3, r2]
}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b005      	add	sp, #20
 800426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	080043b4 	.word	0x080043b4
 8004274:	080043bc 	.word	0x080043bc

08004278 <memset>:
 8004278:	0003      	movs	r3, r0
 800427a:	1882      	adds	r2, r0, r2
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	7019      	strb	r1, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	2600      	movs	r6, #0
 800428c:	4c0c      	ldr	r4, [pc, #48]	; (80042c0 <__libc_init_array+0x38>)
 800428e:	4d0d      	ldr	r5, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	2600      	movs	r6, #0
 800429a:	f000 f819 	bl	80042d0 <_init>
 800429e:	4c0a      	ldr	r4, [pc, #40]	; (80042c8 <__libc_init_array+0x40>)
 80042a0:	4d0a      	ldr	r5, [pc, #40]	; (80042cc <__libc_init_array+0x44>)
 80042a2:	1b64      	subs	r4, r4, r5
 80042a4:	10a4      	asrs	r4, r4, #2
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	00b3      	lsls	r3, r6, #2
 80042ae:	58eb      	ldr	r3, [r5, r3]
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	00b3      	lsls	r3, r6, #2
 80042b8:	58eb      	ldr	r3, [r5, r3]
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	080043cc 	.word	0x080043cc
 80042c4:	080043cc 	.word	0x080043cc
 80042c8:	080043d0 	.word	0x080043d0
 80042cc:	080043cc 	.word	0x080043cc

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
