
stm_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bac  08004bac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000005c  08004c10  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004c10  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012da1  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a90  00000000  00000000  00032e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000358f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4b  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddc0  00000000  00000000  00037743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e3f  00000000  00000000  00055503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdc23  00000000  00000000  0006b342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fe0  00000000  00000000  00128f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004a9c 	.word	0x08004a9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004a9c 	.word	0x08004a9c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MC74HCT595A_init>:
// Will point to our light patterns. A byte is an 8-bit BINARY variable to match the 8 lights
uint8_t * registerPatterns;

void clearRegisters();

void MC74HCT595A_init(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    registerPatterns = malloc(REGISTERS * sizeof(uint8_t));
 8000620:	2002      	movs	r0, #2
 8000622:	f004 f937 	bl	8004894 <malloc>
 8000626:	0003      	movs	r3, r0
 8000628:	001a      	movs	r2, r3
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MC74HCT595A_init+0x2c>)
 800062c:	601a      	str	r2, [r3, #0]
    registerPatterns[0] = 7;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MC74HCT595A_init+0x2c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2207      	movs	r2, #7
 8000634:	701a      	strb	r2, [r3, #0]
    registerPatterns[1] = 6;
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <MC74HCT595A_init+0x2c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	2206      	movs	r2, #6
 800063e:	701a      	strb	r2, [r3, #0]
//    clearRegisters();
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000078 	.word	0x20000078

0800064c <MC74HCT595A_shiftOut>:
            else
                *pattern &= ~(1 << q); 
        }
    }
}
void MC74HCT595A_shiftOut(uint8_t *data){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

    HAL_SPI_Transmit(&hspi2, data, 1, 1000);
 8000654:	23fa      	movs	r3, #250	; 0xfa
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <MC74HCT595A_shiftOut+0x20>)
 800065c:	2201      	movs	r2, #1
 800065e:	f001 ffb1 	bl	80025c4 <HAL_SPI_Transmit>
//    HAL_SPI_Transmit(hspi, data, 1, 1000);


}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	2000007c 	.word	0x2000007c

08000670 <writeToRegisters>:

void writeToRegisters() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  // Lock the registers to ready them to be written
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	01db      	lsls	r3, r3, #7
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <writeToRegisters+0x50>)
 800067c:	0019      	movs	r1, r3
 800067e:	0010      	movs	r0, r2
 8000680:	f000 ff3b 	bl	80014fa <HAL_GPIO_TogglePin>

  // Go through each of our stored patterns and write them back to the registers in order
  for (size_t i = 0; i < REGISTERS; i++) {
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e00c      	b.n	80006a4 <writeToRegisters+0x34>

    // Point to the current pattern for this register
    uint8_t * pattern = &registerPatterns[i];
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <writeToRegisters+0x54>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	603b      	str	r3, [r7, #0]

    // Write the pattern back to the register chips byte by byte
    MC74HCT595A_shiftOut(*pattern);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ffd7 	bl	800064c <MC74HCT595A_shiftOut>
  for (size_t i = 0; i < REGISTERS; i++) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d9ef      	bls.n	800068a <writeToRegisters+0x1a>
  }
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	01db      	lsls	r3, r3, #7
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <writeToRegisters+0x50>)
 80006b0:	0019      	movs	r1, r3
 80006b2:	0010      	movs	r0, r2
 80006b4:	f000 ff21 	bl	80014fa <HAL_GPIO_TogglePin>
  // Unlock the registers
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	50000400 	.word	0x50000400
 80006c4:	20000078 	.word	0x20000078

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08b      	sub	sp, #44	; 0x2c
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	2414      	movs	r4, #20
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2314      	movs	r3, #20
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f004 f999 	bl	8004a10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <MX_GPIO_Init+0x128>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <MX_GPIO_Init+0x128>)
 80006e4:	2104      	movs	r1, #4
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ea:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <MX_GPIO_Init+0x128>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	2204      	movs	r2, #4
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <MX_GPIO_Init+0x128>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fa:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <MX_GPIO_Init+0x128>)
 80006fc:	2120      	movs	r1, #32
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
 8000702:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <MX_GPIO_Init+0x128>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000706:	2220      	movs	r2, #32
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <MX_GPIO_Init+0x128>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <MX_GPIO_Init+0x128>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <MX_GPIO_Init+0x128>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_GPIO_Init+0x128>)
 8000728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x128>)
 800072c:	2102      	movs	r1, #2
 800072e:	430a      	orrs	r2, r1
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_GPIO_Init+0x128>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000736:	2202      	movs	r2, #2
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800073e:	23a0      	movs	r3, #160	; 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	0018      	movs	r0, r3
 8000748:	f000 feba 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(P_LATCH_GPIO_Port, P_LATCH_Pin, GPIO_PIN_RESET);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	01db      	lsls	r3, r3, #7
 8000750:	4828      	ldr	r0, [pc, #160]	; (80007f4 <MX_GPIO_Init+0x12c>)
 8000752:	2200      	movs	r2, #0
 8000754:	0019      	movs	r1, r3
 8000756:	f000 feb3 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2212      	movs	r2, #18
 800075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	193a      	adds	r2, r7, r4
 800076e:	23a0      	movs	r3, #160	; 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fd37 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2220      	movs	r2, #32
 800077e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2201      	movs	r2, #1
 8000784:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2202      	movs	r2, #2
 8000790:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000792:	193a      	adds	r2, r7, r4
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fd24 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2202      	movs	r2, #2
 80007a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2201      	movs	r2, #1
 80007b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x12c>)
 80007b6:	0019      	movs	r1, r3
 80007b8:	0010      	movs	r0, r2
 80007ba:	f000 fd15 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = P_LATCH_Pin;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	01d2      	lsls	r2, r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(P_LATCH_GPIO_Port, &GPIO_InitStruct);
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <MX_GPIO_Init+0x12c>)
 80007de:	0019      	movs	r1, r3
 80007e0:	0010      	movs	r0, r2
 80007e2:	f000 fd01 	bl	80011e8 <HAL_GPIO_Init>

}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b00b      	add	sp, #44	; 0x2c
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000
 80007f4:	50000400 	.word	0x50000400

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b0b9      	sub	sp, #228	; 0xe4
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fbb9 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f82f 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f7ff ff5f 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800080a:	f000 fadb 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800080e:	f000 f99b 	bl	8000b48 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000812:	f000 f875 	bl	8000900 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MC74HCT595A_init();
 8000816:	f7ff ff01 	bl	800061c <MC74HCT595A_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 800081a:	23cc      	movs	r3, #204	; 0xcc
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <main+0x68>)
 8000820:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000822:	c313      	stmia	r3!, {r0, r1, r4}
 8000824:	6811      	ldr	r1, [r2, #0]
 8000826:	6019      	str	r1, [r3, #0]
 8000828:	8892      	ldrh	r2, [r2, #4]
 800082a:	809a      	strh	r2, [r3, #4]
  uint8_t Rx_data[100] = {0};  //  creating a buffer of 10 bytes
 800082c:	2368      	movs	r3, #104	; 0x68
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	3304      	adds	r3, #4
 8000836:	2260      	movs	r2, #96	; 0x60
 8000838:	2100      	movs	r1, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f004 f8e8 	bl	8004a10 <memset>
  uint8_t Tx_data[100] = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	3304      	adds	r3, #4
 8000848:	2260      	movs	r2, #96	; 0x60
 800084a:	2100      	movs	r1, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f004 f8df 	bl	8004a10 <memset>
  	  bool start_read = false;
 8000852:	23df      	movs	r3, #223	; 0xdf
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
//	  }
//	HAL_Delay(1000);
//	  HAL_Delay(100);
//	  buzzer_stop();
//	  HAL_Delay(100);
	  writeToRegisters();
 800085a:	f7ff ff09 	bl	8000670 <writeToRegisters>
 800085e:	e7fc      	b.n	800085a <main+0x62>
 8000860:	08004ab4 	.word	0x08004ab4

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b095      	sub	sp, #84	; 0x54
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	2414      	movs	r4, #20
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	233c      	movs	r3, #60	; 0x3c
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f004 f8cb 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	0018      	movs	r0, r3
 800087e:	2310      	movs	r3, #16
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f004 f8c4 	bl	8004a10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fe4f 	bl	8001530 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2202      	movs	r2, #2
 8000896:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2240      	movs	r2, #64	; 0x40
 80008aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fe87 	bl	80015c8 <HAL_RCC_OscConfig>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008be:	f000 f819 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 f9d2 	bl	8001c88 <HAL_RCC_ClockConfig>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008e8:	f000 f804 	bl	80008f4 <Error_Handler>
  }
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b015      	add	sp, #84	; 0x54
 80008f2:	bd90      	pop	{r4, r7, pc}

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_SPI2_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_SPI2_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_SPI2_Init+0x74>)
 800090c:	2282      	movs	r2, #130	; 0x82
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI2_Init+0x74>)
 800091a:	22e0      	movs	r2, #224	; 0xe0
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI2_Init+0x74>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI2_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI2_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI2_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI2_Init+0x74>)
 800094e:	2207      	movs	r2, #7
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI2_Init+0x74>)
 800095a:	2208      	movs	r2, #8
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MX_SPI2_Init+0x74>)
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fd77 	bl	8002454 <HAL_SPI_Init>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800096a:	f7ff ffc3 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000007c 	.word	0x2000007c
 8000978:	40003800 	.word	0x40003800

0800097c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08b      	sub	sp, #44	; 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	2414      	movs	r4, #20
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f004 f83e 	bl	8004a10 <memset>
  if(spiHandle->Instance==SPI2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2c      	ldr	r2, [pc, #176]	; (8000a4c <HAL_SPI_MspInit+0xd0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d151      	bne.n	8000a42 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	01c9      	lsls	r1, r1, #7
 80009a8:	430a      	orrs	r2, r1
 80009aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ac:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	01db      	lsls	r3, r3, #7
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009c0:	2104      	movs	r1, #4
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ca:	2204      	movs	r2, #4
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_SPI_MspInit+0xd4>)
 80009e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2208      	movs	r2, #8
 80009ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2202      	movs	r2, #2
 80009f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2201      	movs	r2, #1
 8000a06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <HAL_SPI_MspInit+0xd8>)
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0010      	movs	r0, r2
 8000a10:	f000 fbea 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a14:	0021      	movs	r1, r4
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2202      	movs	r2, #2
 8000a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fbd3 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b00b      	add	sp, #44	; 0x2c
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40003800 	.word	0x40003800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	50000800 	.word	0x50000800

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0549      	lsls	r1, r1, #21
 8000a80:	430a      	orrs	r2, r1
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_MspInit+0x44>)
 8000a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	055b      	lsls	r3, r3, #21
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 fac0 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f003 ffa0 	bl	8004a44 <__errno>
 8000b04:	0003      	movs	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	425b      	negs	r3, r3
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	18d2      	adds	r2, r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b006      	add	sp, #24
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20024000 	.word	0x20024000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	200000e0 	.word	0x200000e0
 8000b38:	20000310 	.word	0x20000310

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b09c      	sub	sp, #112	; 0x70
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	0018      	movs	r0, r3
 8000b54:	2310      	movs	r3, #16
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f003 ff59 	bl	8004a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	2354      	movs	r3, #84	; 0x54
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	0018      	movs	r0, r3
 8000b64:	230c      	movs	r3, #12
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f003 ff51 	bl	8004a10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	2338      	movs	r3, #56	; 0x38
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	0018      	movs	r0, r3
 8000b74:	231c      	movs	r3, #28
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 ff49 	bl	8004a10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2334      	movs	r3, #52	; 0x34
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f003 ff42 	bl	8004a10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000b8e:	4a52      	ldr	r2, [pc, #328]	; (8000cd8 <MX_TIM1_Init+0x190>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000b94:	220f      	movs	r2, #15
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000ba0:	2263      	movs	r2, #99	; 0x63
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f001 ffd9 	bl	8002b70 <HAL_TIM_Base_Init>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000bc2:	f7ff fe97 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	2160      	movs	r1, #96	; 0x60
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	0152      	lsls	r2, r2, #5
 8000bce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 f982 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000be0:	f7ff fe88 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000be4:	4b3b      	ldr	r3, [pc, #236]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 f81a 	bl	8002c20 <HAL_TIM_PWM_Init>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000bf0:	f7ff fe80 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2154      	movs	r1, #84	; 0x54
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c08:	187a      	adds	r2, r7, r1
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 fe34 	bl	800387c <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c18:	f7ff fe6c 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2138      	movs	r1, #56	; 0x38
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2260      	movs	r2, #96	; 0x60
 8000c22:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f002 f846 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c58:	f7ff fe4c 	bl	80008f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0192      	lsls	r2, r2, #6
 8000c80:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	0492      	lsls	r2, r2, #18
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cae:	1d3a      	adds	r2, r7, #4
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 fe57 	bl	8003968 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000cbe:	f7ff fe19 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_TIM1_Init+0x18c>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f83f 	bl	8000d48 <HAL_TIM_MspPostInit>

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b01c      	add	sp, #112	; 0x70
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	200000e4 	.word	0x200000e4
 8000cd8:	40012c00 	.word	0x40012c00

08000cdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b097      	sub	sp, #92	; 0x5c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	240c      	movs	r4, #12
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	0018      	movs	r0, r3
 8000cea:	234c      	movs	r3, #76	; 0x4c
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f003 fe8e 	bl	8004a10 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_TIM_Base_MspInit+0x64>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11c      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	0392      	lsls	r2, r2, #14
 8000d04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 f964 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000d18:	f7ff fdec 	bl	80008f4 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0109      	lsls	r1, r1, #4
 8000d26:	430a      	orrs	r2, r1
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	4013      	ands	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b017      	add	sp, #92	; 0x5c
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40012c00 	.word	0x40012c00
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	240c      	movs	r4, #12
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	0018      	movs	r0, r3
 8000d56:	2314      	movs	r3, #20
 8000d58:	001a      	movs	r2, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f003 fe58 	bl	8004a10 <memset>
  if(timHandle->Instance==TIM1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_TIM_MspPostInit+0x70>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d121      	bne.n	8000dae <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_TIM_MspPostInit+0x74>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_TIM_MspPostInit+0x74>)
 8000d70:	2102      	movs	r1, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_TIM_MspPostInit+0x74>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d82:	0021      	movs	r1, r4
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2208      	movs	r2, #8
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_TIM_MspPostInit+0x78>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f000 fa1d 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b009      	add	sp, #36	; 0x24
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	50000400 	.word	0x50000400

08000dc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dca:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <MX_USART2_UART_Init+0x98>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dd0:	22e1      	movs	r2, #225	; 0xe1
 8000dd2:	0252      	lsls	r2, r2, #9
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f002 fe46 	bl	8003aa0 <HAL_UART_Init>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f7ff fd6c 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	0018      	movs	r0, r3
 8000e22:	f003 fc57 	bl	80046d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f7ff fd63 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000e30:	2100      	movs	r1, #0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f003 fc8e 	bl	8004754 <HAL_UARTEx_SetRxFifoThreshold>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f7ff fd5a 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <MX_USART2_UART_Init+0x94>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 fc0c 	bl	8004660 <HAL_UARTEx_DisableFifoMode>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f7ff fd52 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000130 	.word	0x20000130
 8000e5c:	40004400 	.word	0x40004400

08000e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b09d      	sub	sp, #116	; 0x74
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	235c      	movs	r3, #92	; 0x5c
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	2314      	movs	r3, #20
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f003 fdcc 	bl	8004a10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	2410      	movs	r4, #16
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	234c      	movs	r3, #76	; 0x4c
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f003 fdc4 	bl	8004a10 <memset>
  if(uartHandle->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d13e      	bne.n	8000f10 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2202      	movs	r2, #2
 8000e96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 f89b 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eaa:	f7ff fd23 	bl	80008f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0289      	lsls	r1, r1, #10
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ee2:	215c      	movs	r1, #92	; 0x5c
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2202      	movs	r2, #2
 8000eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2201      	movs	r2, #1
 8000f00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	187a      	adds	r2, r7, r1
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 f96c 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b01d      	add	sp, #116	; 0x74
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f7ff fe0a 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f4e:	f003 fd7f 	bl	8004a50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f52:	f7ff fc51 	bl	80007f8 <main>

08000f56 <LoopForever>:

LoopForever:
  b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   r0, =_estack
 8000f58:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f64:	08004bb4 	.word	0x08004bb4
  ldr r2, =_sbss
 8000f68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f6c:	20000310 	.word	0x20000310

08000f70 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_COMP_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x3c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Init+0x3c>)
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	0049      	lsls	r1, r1, #1
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f810 	bl	8000fb4 <HAL_InitTick>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e001      	b.n	8000fa4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fd5a 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_InitTick+0x88>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d02b      	beq.n	8001024 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_InitTick+0x8c>)
 8000fce:	681c      	ldr	r4, [r3, #0]
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_InitTick+0x88>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	23fa      	movs	r3, #250	; 0xfa
 8000fd8:	0098      	lsls	r0, r3, #2
 8000fda:	f7ff f893 	bl	8000104 <__udivsi3>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	0020      	movs	r0, r4
 8000fe4:	f7ff f88e 	bl	8000104 <__udivsi3>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f8ef 	bl	80011ce <HAL_SYSTICK_Config>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d112      	bne.n	800101a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d80a      	bhi.n	8001010 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	425b      	negs	r3, r3
 8001000:	2200      	movs	r2, #0
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f8ce 	bl	80011a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_InitTick+0x90>)
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e00d      	b.n	800102c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001010:	230f      	movs	r3, #15
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e008      	b.n	800102c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e003      	b.n	800102c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001024:	230f      	movs	r3, #15
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800102c:	230f      	movs	r3, #15
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b005      	add	sp, #20
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000008 	.word	0x20000008
 8001040:	20000000 	.word	0x20000000
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	001a      	movs	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	18d2      	adds	r2, r2, r3
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_IncTick+0x20>)
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	20000008 	.word	0x20000008
 8001068:	200001c4 	.word	0x200001c4

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	200001c4 	.word	0x200001c4

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b7f      	cmp	r3, #127	; 0x7f
 8001094:	d828      	bhi.n	80010e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <__NVIC_SetPriority+0xd4>)
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	33c0      	adds	r3, #192	; 0xc0
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	589b      	ldr	r3, [r3, r2]
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	0011      	movs	r1, r2
 80010ac:	2203      	movs	r2, #3
 80010ae:	400a      	ands	r2, r1
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	401a      	ands	r2, r3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	4003      	ands	r3, r0
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	481f      	ldr	r0, [pc, #124]	; (8001154 <__NVIC_SetPriority+0xd4>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	430a      	orrs	r2, r1
 80010e0:	33c0      	adds	r3, #192	; 0xc0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e6:	e031      	b.n	800114c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <__NVIC_SetPriority+0xd8>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0019      	movs	r1, r3
 80010f0:	230f      	movs	r3, #15
 80010f2:	400b      	ands	r3, r1
 80010f4:	3b08      	subs	r3, #8
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3306      	adds	r3, #6
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3304      	adds	r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1dfa      	adds	r2, r7, #7
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	0011      	movs	r1, r2
 8001108:	2203      	movs	r2, #3
 800110a:	400a      	ands	r2, r1
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	21ff      	movs	r1, #255	; 0xff
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	401a      	ands	r2, r3
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	0018      	movs	r0, r3
 8001128:	2303      	movs	r3, #3
 800112a:	4003      	ands	r3, r0
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <__NVIC_SetPriority+0xd8>)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	001c      	movs	r4, r3
 8001138:	230f      	movs	r3, #15
 800113a:	4023      	ands	r3, r4
 800113c:	3b08      	subs	r3, #8
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	430a      	orrs	r2, r1
 8001142:	3306      	adds	r3, #6
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	18c3      	adds	r3, r0, r3
 8001148:	3304      	adds	r3, #4
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	1e5a      	subs	r2, r3, #1
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	045b      	lsls	r3, r3, #17
 800116c:	429a      	cmp	r2, r3
 800116e:	d301      	bcc.n	8001174 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001170:	2301      	movs	r3, #1
 8001172:	e010      	b.n	8001196 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <SysTick_Config+0x44>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	3a01      	subs	r2, #1
 800117a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117c:	2301      	movs	r3, #1
 800117e:	425b      	negs	r3, r3
 8001180:	2103      	movs	r1, #3
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ff7c 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x44>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	210f      	movs	r1, #15
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	1c02      	adds	r2, r0, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ffbf 	bl	800115c <SysTick_Config>
 80011de:	0003      	movs	r3, r0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e14d      	b.n	8001494 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x28>
 800120e:	e13e      	b.n	800148e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	2201      	movs	r2, #1
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	58d3      	ldr	r3, [r2, r3]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2107      	movs	r1, #7
 80012fe:	400b      	ands	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_GPIO_Init+0x174>
 800135a:	e098      	b.n	800148e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800135c:	4a53      	ldr	r2, [pc, #332]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3318      	adds	r3, #24
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	589b      	ldr	r3, [r3, r2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2203      	movs	r2, #3
 800136e:	4013      	ands	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	220f      	movs	r2, #15
 8001374:	409a      	lsls	r2, r3
 8001376:	0013      	movs	r3, r2
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	23a0      	movs	r3, #160	; 0xa0
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	429a      	cmp	r2, r3
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x1d6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <HAL_GPIO_Init+0x2c8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1d2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_GPIO_Init+0x2cc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1ce>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_GPIO_Init+0x2d0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1ca>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x2d4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1c6>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x1d8>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x1d8>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x1d8>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x1d8>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x1d8>
 80013be:	2300      	movs	r3, #0
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	2103      	movs	r1, #3
 80013c4:	400a      	ands	r2, r1
 80013c6:	00d2      	lsls	r2, r2, #3
 80013c8:	4093      	lsls	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013d0:	4936      	ldr	r1, [pc, #216]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3318      	adds	r3, #24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	035b      	lsls	r3, r3, #13
 80013f6:	4013      	ands	r3, r2
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43da      	mvns	r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	039b      	lsls	r3, r3, #14
 8001420:	4013      	ands	r3, r2
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 8001434:	2384      	movs	r3, #132	; 0x84
 8001436:	58d3      	ldr	r3, [r2, r3]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43da      	mvns	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	4013      	ands	r3, r2
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001458:	4914      	ldr	r1, [pc, #80]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 800145a:	2284      	movs	r2, #132	; 0x84
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	58d3      	ldr	r3, [r2, r3]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	025b      	lsls	r3, r3, #9
 800147a:	4013      	ands	r3, r2
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001486:	4909      	ldr	r1, [pc, #36]	; (80014ac <HAL_GPIO_Init+0x2c4>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	40da      	lsrs	r2, r3
 800149c:	1e13      	subs	r3, r2, #0
 800149e:	d000      	beq.n	80014a2 <HAL_GPIO_Init+0x2ba>
 80014a0:	e6aa      	b.n	80011f8 <HAL_GPIO_Init+0x10>
  }
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b006      	add	sp, #24
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021800 	.word	0x40021800
 80014b0:	50000400 	.word	0x50000400
 80014b4:	50000800 	.word	0x50000800
 80014b8:	50000c00 	.word	0x50000c00
 80014bc:	50001000 	.word	0x50001000

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	0008      	movs	r0, r1
 80014ca:	0011      	movs	r1, r2
 80014cc:	1cbb      	adds	r3, r7, #2
 80014ce:	1c02      	adds	r2, r0, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	1c7b      	adds	r3, r7, #1
 80014d4:	1c0a      	adds	r2, r1, #0
 80014d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	1c7b      	adds	r3, r7, #1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ea:	1cbb      	adds	r3, r7, #2
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	000a      	movs	r2, r1
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800150e:	1cbb      	adds	r3, r7, #2
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	041a      	lsls	r2, r3, #16
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	1cb9      	adds	r1, r7, #2
 800151e:	8809      	ldrh	r1, [r1, #0]
 8001520:	400b      	ands	r3, r1
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d11f      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	0013      	movs	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	189b      	adds	r3, r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4912      	ldr	r1, [pc, #72]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001562:	0018      	movs	r0, r3
 8001564:	f7fe fdce 	bl	8000104 <__udivsi3>
 8001568:	0003      	movs	r3, r0
 800156a:	3301      	adds	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156e:	e008      	b.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e001      	b.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e009      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	401a      	ands	r2, r3
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	429a      	cmp	r2, r3
 8001592:	d0ed      	beq.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40007000 	.word	0x40007000
 80015a4:	fffff9ff 	.word	0xfffff9ff
 80015a8:	20000000 	.word	0x20000000
 80015ac:	000f4240 	.word	0x000f4240

080015b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	23e0      	movs	r3, #224	; 0xe0
 80015ba:	01db      	lsls	r3, r3, #7
 80015bc:	4013      	ands	r3, r2
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f000 fb50 	bl	8001c7c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d100      	bne.n	80015e8 <HAL_RCC_OscConfig+0x20>
 80015e6:	e07c      	b.n	80016e2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e8:	4bc3      	ldr	r3, [pc, #780]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2238      	movs	r2, #56	; 0x38
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f2:	4bc1      	ldr	r3, [pc, #772]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0x40>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d002      	beq.n	800160e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d10b      	bne.n	8001626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	4bba      	ldr	r3, [pc, #744]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	029b      	lsls	r3, r3, #10
 8001616:	4013      	ands	r3, r2
 8001618:	d062      	beq.n	80016e0 <HAL_RCC_OscConfig+0x118>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d15e      	bne.n	80016e0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e32a      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	429a      	cmp	r2, r3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_OscConfig+0x7a>
 8001632:	4bb1      	ldr	r3, [pc, #708]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4bb0      	ldr	r3, [pc, #704]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0249      	lsls	r1, r1, #9
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e020      	b.n	8001684 <HAL_RCC_OscConfig+0xbc>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	23a0      	movs	r3, #160	; 0xa0
 8001648:	02db      	lsls	r3, r3, #11
 800164a:	429a      	cmp	r2, r3
 800164c:	d10e      	bne.n	800166c <HAL_RCC_OscConfig+0xa4>
 800164e:	4baa      	ldr	r3, [pc, #680]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4ba9      	ldr	r3, [pc, #676]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	02c9      	lsls	r1, r1, #11
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4ba6      	ldr	r3, [pc, #664]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4ba5      	ldr	r3, [pc, #660]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0249      	lsls	r1, r1, #9
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xbc>
 800166c:	4ba2      	ldr	r3, [pc, #648]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4ba1      	ldr	r3, [pc, #644]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001672:	49a2      	ldr	r1, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0x334>)
 8001674:	400a      	ands	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	4b9f      	ldr	r3, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800167e:	49a0      	ldr	r1, [pc, #640]	; (8001900 <HAL_RCC_OscConfig+0x338>)
 8001680:	400a      	ands	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d014      	beq.n	80016b6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fcee 	bl	800106c <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff fce9 	bl	800106c <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e2e9      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a8:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0xce>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fcd9 	bl	800106c <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcd4 	bl	800106c <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e2d4      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xf8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2202      	movs	r2, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d100      	bne.n	80016ee <HAL_RCC_OscConfig+0x126>
 80016ec:	e099      	b.n	8001822 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2238      	movs	r2, #56	; 0x38
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f8:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2203      	movs	r2, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b10      	cmp	r3, #16
 8001706:	d102      	bne.n	800170e <HAL_RCC_OscConfig+0x146>
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d002      	beq.n	8001714 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d135      	bne.n	8001780 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4013      	ands	r3, r2
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x164>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e2a7      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a74      	ldr	r2, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x33c>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	021a      	lsls	r2, r3, #8
 800173c:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d112      	bne.n	800176e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001748:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x340>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0adb      	lsrs	r3, r3, #11
 8001762:	2207      	movs	r2, #7
 8001764:	4013      	ands	r3, r2
 8001766:	4a69      	ldr	r2, [pc, #420]	; (800190c <HAL_RCC_OscConfig+0x344>)
 8001768:	40da      	lsrs	r2, r3
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x348>)
 800176c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800176e:	4b69      	ldr	r3, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x34c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff fc1e 	bl	8000fb4 <HAL_InitTick>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d051      	beq.n	8001820 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e27d      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d030      	beq.n	80017ea <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001788:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_RCC_OscConfig+0x340>)
 800178e:	4013      	ands	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	0049      	lsls	r1, r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc5f 	bl	800106c <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fc5a 	bl	800106c <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e25a      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4013      	ands	r3, r2
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a4b      	ldr	r2, [pc, #300]	; (8001904 <HAL_RCC_OscConfig+0x33c>)
 80017d8:	4013      	ands	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	021a      	lsls	r2, r3, #8
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80017f0:	4949      	ldr	r1, [pc, #292]	; (8001918 <HAL_RCC_OscConfig+0x350>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fc39 	bl	800106c <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fc34 	bl	800106c <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e234      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x238>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2208      	movs	r2, #8
 8001828:	4013      	ands	r3, r2
 800182a:	d047      	beq.n	80018bc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	4013      	ands	r3, r2
 8001834:	2b18      	cmp	r3, #24
 8001836:	d10a      	bne.n	800184e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d03c      	beq.n	80018bc <HAL_RCC_OscConfig+0x2f4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d138      	bne.n	80018bc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e216      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff fc03 	bl	800106c <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fbfe 	bl	800106c <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1fe      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d0f1      	beq.n	800186c <HAL_RCC_OscConfig+0x2a4>
 8001888:	e018      	b.n	80018bc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 800188c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 8001890:	2101      	movs	r1, #1
 8001892:	438a      	bics	r2, r1
 8001894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fbe9 	bl	800106c <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fbe4 	bl	800106c <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1e4      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d1f1      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2204      	movs	r2, #4
 80018c2:	4013      	ands	r3, r2
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x300>
 80018c6:	e0c7      	b.n	8001a58 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c8:	231f      	movs	r3, #31
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2238      	movs	r2, #56	; 0x38
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d11f      	bne.n	800191c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x330>)
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d100      	bne.n	80018e8 <HAL_RCC_OscConfig+0x320>
 80018e6:	e0b7      	b.n	8001a58 <HAL_RCC_OscConfig+0x490>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d000      	beq.n	80018f2 <HAL_RCC_OscConfig+0x32a>
 80018f0:	e0b2      	b.n	8001a58 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1c2      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40021000 	.word	0x40021000
 80018fc:	fffeffff 	.word	0xfffeffff
 8001900:	fffbffff 	.word	0xfffbffff
 8001904:	ffff80ff 	.word	0xffff80ff
 8001908:	ffffc7ff 	.word	0xffffc7ff
 800190c:	00f42400 	.word	0x00f42400
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
 8001918:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800191c:	4bb5      	ldr	r3, [pc, #724]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 800191e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x364>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x366>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d011      	beq.n	8001956 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4bb0      	ldr	r3, [pc, #704]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001936:	4baf      	ldr	r3, [pc, #700]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0549      	lsls	r1, r1, #21
 800193c:	430a      	orrs	r2, r1
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001940:	4bac      	ldr	r3, [pc, #688]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800194e:	231f      	movs	r3, #31
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001956:	4ba8      	ldr	r3, [pc, #672]	; (8001bf8 <HAL_RCC_OscConfig+0x630>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001962:	4ba5      	ldr	r3, [pc, #660]	; (8001bf8 <HAL_RCC_OscConfig+0x630>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4ba4      	ldr	r3, [pc, #656]	; (8001bf8 <HAL_RCC_OscConfig+0x630>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0049      	lsls	r1, r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001970:	f7ff fb7c 	bl	800106c <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fb77 	bl	800106c <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e177      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b9a      	ldr	r3, [pc, #616]	; (8001bf8 <HAL_RCC_OscConfig+0x630>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x3e6>
 80019a0:	4b94      	ldr	r3, [pc, #592]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a4:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x420>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x408>
 80019b6:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ba:	4b8e      	ldr	r3, [pc, #568]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019bc:	2104      	movs	r1, #4
 80019be:	430a      	orrs	r2, r1
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019c2:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	430a      	orrs	r2, r1
 80019cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x420>
 80019d0:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d4:	4b87      	ldr	r3, [pc, #540]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
 80019dc:	4b85      	ldr	r3, [pc, #532]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e0:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 80019e2:	2104      	movs	r1, #4
 80019e4:	438a      	bics	r2, r1
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d014      	beq.n	8001a1a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb3c 	bl	800106c <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fb37 	bl	800106c <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a7d      	ldr	r2, [pc, #500]	; (8001bfc <HAL_RCC_OscConfig+0x634>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e136      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x432>
 8001a18:	e013      	b.n	8001a42 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fb27 	bl	800106c <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fb22 	bl	800106c <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x634>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e121      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a38:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a42:	231f      	movs	r3, #31
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a52:	496b      	ldr	r1, [pc, #428]	; (8001c00 <HAL_RCC_OscConfig+0x638>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d039      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a6a:	4b62      	ldr	r3, [pc, #392]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	03c9      	lsls	r1, r1, #15
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff faf8 	bl	800106c <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a82:	f7ff faf3 	bl	800106c <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0f3      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4ba>
 8001aa0:	e019      	b.n	8001ad6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001aa8:	4956      	ldr	r1, [pc, #344]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff fadd 	bl	800106c <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab8:	f7ff fad8 	bl	800106c <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0d8      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x518>
 8001ade:	e0cc      	b.n	8001c7a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2238      	movs	r2, #56	; 0x38
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0x526>
 8001aec:	e07b      	b.n	8001be6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d156      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001afc:	4942      	ldr	r1, [pc, #264]	; (8001c08 <HAL_RCC_OscConfig+0x640>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fab3 	bl	800106c <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff faae 	bl	800106c <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0ae      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	049b      	lsls	r3, r3, #18
 8001b26:	4013      	ands	r3, r2
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2a:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a37      	ldr	r2, [pc, #220]	; (8001c0c <HAL_RCC_OscConfig+0x644>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	431a      	orrs	r2, r3
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0449      	lsls	r1, r1, #17
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0549      	lsls	r1, r1, #21
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fa77 	bl	800106c <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fa72 	bl	800106c <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e072      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	049b      	lsls	r3, r3, #18
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x5bc>
 8001ba2:	e06a      	b.n	8001c7a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001baa:	4917      	ldr	r1, [pc, #92]	; (8001c08 <HAL_RCC_OscConfig+0x640>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fa5c 	bl	800106c <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff fa57 	bl	800106c <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e057      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	049b      	lsls	r3, r3, #18
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_OscConfig+0x62c>)
 8001bde:	490c      	ldr	r1, [pc, #48]	; (8001c10 <HAL_RCC_OscConfig+0x648>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	e049      	b.n	8001c7a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d112      	bne.n	8001c14 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e044      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	efffffff 	.word	0xefffffff
 8001c04:	ffbfffff 	.word	0xffbfffff
 8001c08:	feffffff 	.word	0xfeffffff
 8001c0c:	11c1808c 	.word	0x11c1808c
 8001c10:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x6bc>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d126      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2270      	movs	r2, #112	; 0x70
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d11f      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	23fe      	movs	r3, #254	; 0xfe
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d116      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	23f8      	movs	r3, #248	; 0xf8
 8001c4c:	039b      	lsls	r3, r3, #14
 8001c4e:	401a      	ands	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d10e      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	23e0      	movs	r3, #224	; 0xe0
 8001c5c:	051b      	lsls	r3, r3, #20
 8001c5e:	401a      	ands	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	0f5b      	lsrs	r3, r3, #29
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b008      	add	sp, #32
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0e9      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d91e      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b70      	ldr	r3, [pc, #448]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f9d6 	bl	800106c <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cc4:	e009      	b.n	8001cda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7ff f9d1 	bl	800106c <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_RCC_ClockConfig+0x1f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0ca      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1ee      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d006      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cfc:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	21e0      	movs	r1, #224	; 0xe0
 8001d04:	01c9      	lsls	r1, r1, #7
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_RCC_ClockConfig+0x1fc>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d057      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d12b      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e097      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	049b      	lsls	r3, r3, #18
 8001d50:	4013      	ands	r3, r2
 8001d52:	d11f      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e08b      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d113      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e07f      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d108      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e074      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e06d      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7ff f960 	bl	800106c <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db0:	e009      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db2:	f7ff f95b 	bl	800106c <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <HAL_RCC_ClockConfig+0x1f4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e054      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2238      	movs	r2, #56	; 0x38
 8001dcc:	401a      	ands	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1ec      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2207      	movs	r2, #7
 8001dde:	4013      	ands	r3, r2
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d21e      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2207      	movs	r2, #7
 8001dec:	4393      	bics	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f938 	bl	800106c <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f7ff f933 	bl	800106c <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_RCC_ClockConfig+0x1f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e02c      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <HAL_RCC_ClockConfig+0x200>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e42:	f000 f829 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e46:	0001      	movs	r1, r0
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	220f      	movs	r2, #15
 8001e50:	401a      	ands	r2, r3
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x204>)
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	58d3      	ldr	r3, [r2, r3]
 8001e58:	221f      	movs	r2, #31
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_ClockConfig+0x208>)
 8001e62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x20c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff f8a3 	bl	8000fb4 <HAL_InitTick>
 8001e6e:	0003      	movs	r3, r0
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b004      	add	sp, #16
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	00001388 	.word	0x00001388
 8001e80:	40021000 	.word	0x40021000
 8001e84:	fffff0ff 	.word	0xfffff0ff
 8001e88:	ffff8fff 	.word	0xffff8fff
 8001e8c:	08004ac8 	.word	0x08004ac8
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9e:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2238      	movs	r2, #56	; 0x38
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0adb      	lsrs	r3, r3, #11
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	4835      	ldr	r0, [pc, #212]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ebe:	f7fe f921 	bl	8000104 <__udivsi3>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e05d      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2238      	movs	r2, #56	; 0x38
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e054      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2238      	movs	r2, #56	; 0x38
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d138      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2203      	movs	r2, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	4013      	ands	r3, r2
 8001efa:	3301      	adds	r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d10d      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	4824      	ldr	r0, [pc, #144]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f08:	f7fe f8fc 	bl	8000104 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	227f      	movs	r2, #127	; 0x7f
 8001f18:	4013      	ands	r3, r2
 8001f1a:	434b      	muls	r3, r1
 8001f1c:	617b      	str	r3, [r7, #20]
        break;
 8001f1e:	e00d      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	481c      	ldr	r0, [pc, #112]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f24:	f7fe f8ee 	bl	8000104 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	227f      	movs	r2, #127	; 0x7f
 8001f34:	4013      	ands	r3, r2
 8001f36:	434b      	muls	r3, r1
 8001f38:	617b      	str	r3, [r7, #20]
        break;
 8001f3a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0f5b      	lsrs	r3, r3, #29
 8001f42:	2207      	movs	r2, #7
 8001f44:	4013      	ands	r3, r2
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	6978      	ldr	r0, [r7, #20]
 8001f4e:	f7fe f8d9 	bl	8000104 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e015      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2238      	movs	r2, #56	; 0x38
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d103      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2238      	movs	r2, #56	; 0x38
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b18      	cmp	r3, #24
 8001f76:	d103      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f78:	23fa      	movs	r3, #250	; 0xfa
 8001f7a:	01db      	lsls	r3, r3, #7
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e001      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f84:	693b      	ldr	r3, [r7, #16]
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b006      	add	sp, #24
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	40021000 	.word	0x40021000
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fb4:	f7ff fff2 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fb8:	0004      	movs	r4, r0
 8001fba:	f7ff faf9 	bl	80015b0 <LL_RCC_GetAPB1Prescaler>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	0b1a      	lsrs	r2, r3, #12
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	58d3      	ldr	r3, [r2, r3]
 8001fc8:	221f      	movs	r2, #31
 8001fca:	4013      	ands	r3, r2
 8001fcc:	40dc      	lsrs	r4, r3
 8001fce:	0023      	movs	r3, r4
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	08004b08 	.word	0x08004b08

08001fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fe4:	2313      	movs	r3, #19
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fec:	2312      	movs	r3, #18
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d100      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002000:	e0ad      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2011      	movs	r0, #17
 8002004:	183b      	adds	r3, r7, r0
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800200c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	4013      	ands	r3, r2
 8002014:	d110      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b44      	ldr	r3, [pc, #272]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0549      	lsls	r1, r1, #21
 8002020:	430a      	orrs	r2, r1
 8002022:	63da      	str	r2, [r3, #60]	; 0x3c
 8002024:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	055b      	lsls	r3, r3, #21
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	183b      	adds	r3, r7, r0
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002038:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0049      	lsls	r1, r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002046:	f7ff f811 	bl	800106c <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800204e:	e00b      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002050:	f7ff f80c 	bl	800106c <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d904      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800205e:	2313      	movs	r3, #19
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
        break;
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d0ed      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002074:	2313      	movs	r3, #19
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d15e      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002082:	23c0      	movs	r3, #192	; 0xc0
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4013      	ands	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d019      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	429a      	cmp	r2, r3
 8002098:	d014      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0249      	lsls	r1, r1, #9
 80020ae:	430a      	orrs	r2, r1
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020b8:	491e      	ldr	r1, [pc, #120]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d016      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffce 	bl	800106c <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d4:	e00c      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe ffc9 	bl	800106c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d904      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020e6:	2313      	movs	r3, #19
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2203      	movs	r2, #3
 80020ec:	701a      	strb	r2, [r3, #0]
            break;
 80020ee:	e004      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0ed      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020fa:	2313      	movs	r3, #19
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002114:	430a      	orrs	r2, r1
 8002116:	65da      	str	r2, [r3, #92]	; 0x5c
 8002118:	e016      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800211a:	2312      	movs	r3, #18
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2213      	movs	r2, #19
 8002120:	18ba      	adds	r2, r7, r2
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e00f      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
 8002130:	fffffcff 	.word	0xfffffcff
 8002134:	fffeffff 	.word	0xfffeffff
 8002138:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	2312      	movs	r3, #18
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2213      	movs	r2, #19
 8002142:	18ba      	adds	r2, r7, r2
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002148:	2311      	movs	r3, #17
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d105      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002152:	4bb6      	ldr	r3, [pc, #728]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002156:	4bb5      	ldr	r3, [pc, #724]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002158:	49b5      	ldr	r1, [pc, #724]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800215a:	400a      	ands	r2, r1
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002168:	4bb0      	ldr	r3, [pc, #704]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	2203      	movs	r2, #3
 800216e:	4393      	bics	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4bad      	ldr	r3, [pc, #692]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002178:	430a      	orrs	r2, r1
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2202      	movs	r2, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002186:	4ba9      	ldr	r3, [pc, #676]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	220c      	movs	r2, #12
 800218c:	4393      	bics	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4ba5      	ldr	r3, [pc, #660]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002196:	430a      	orrs	r2, r1
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a4:	4ba1      	ldr	r3, [pc, #644]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	2230      	movs	r2, #48	; 0x30
 80021aa:	4393      	bics	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c2:	4b9a      	ldr	r3, [pc, #616]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	4a9b      	ldr	r2, [pc, #620]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	4b96      	ldr	r3, [pc, #600]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	015b      	lsls	r3, r3, #5
 80021de:	4013      	ands	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021e2:	4b92      	ldr	r3, [pc, #584]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	4a94      	ldr	r2, [pc, #592]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	4b8e      	ldr	r3, [pc, #568]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b8a      	ldr	r3, [pc, #552]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	4a8d      	ldr	r2, [pc, #564]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002210:	4b86      	ldr	r3, [pc, #536]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002212:	430a      	orrs	r2, r1
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4013      	ands	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	4a86      	ldr	r2, [pc, #536]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002230:	4b7e      	ldr	r3, [pc, #504]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002232:	430a      	orrs	r2, r1
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2220      	movs	r2, #32
 800223c:	4013      	ands	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002240:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	4a7f      	ldr	r2, [pc, #508]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002250:	430a      	orrs	r2, r1
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	4013      	ands	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800225e:	4b73      	ldr	r3, [pc, #460]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	4a79      	ldr	r2, [pc, #484]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002264:	4013      	ands	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800226e:	430a      	orrs	r2, r1
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	01db      	lsls	r3, r3, #7
 800227a:	4013      	ands	r3, r2
 800227c:	d015      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	0899      	lsrs	r1, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228a:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800228c:	430a      	orrs	r2, r1
 800228e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	05db      	lsls	r3, r3, #23
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	4b62      	ldr	r3, [pc, #392]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	031b      	lsls	r3, r3, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	4393      	bics	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	039b      	lsls	r3, r3, #14
 80022d2:	4013      	ands	r3, r2
 80022d4:	d016      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022d6:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	4a5c      	ldr	r2, [pc, #368]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e4:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	03db      	lsls	r3, r3, #15
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022f6:	4b4d      	ldr	r3, [pc, #308]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0449      	lsls	r1, r1, #17
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	03db      	lsls	r3, r3, #15
 800230c:	4013      	ands	r3, r2
 800230e:	d016      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002310:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002320:	430a      	orrs	r2, r1
 8002322:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	045b      	lsls	r3, r3, #17
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002330:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	0449      	lsls	r1, r1, #17
 800233a:	430a      	orrs	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	4013      	ands	r3, r2
 8002348:	d014      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	2203      	movs	r2, #3
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800235a:	430a      	orrs	r2, r1
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d106      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	0249      	lsls	r1, r1, #9
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	019b      	lsls	r3, r3, #6
 800237c:	4013      	ands	r3, r2
 800237e:	d014      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	220c      	movs	r2, #12
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002390:	430a      	orrs	r2, r1
 8002392:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2b04      	cmp	r3, #4
 800239a:	d106      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0249      	lsls	r1, r1, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	045b      	lsls	r3, r3, #17
 80023b2:	4013      	ands	r3, r2
 80023b4:	d016      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d106      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0449      	lsls	r1, r1, #17
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	049b      	lsls	r3, r3, #18
 80023ec:	4013      	ands	r3, r2
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002400:	430a      	orrs	r2, r1
 8002402:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	0449      	lsls	r1, r1, #17
 800241a:	430a      	orrs	r2, r1
 800241c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800241e:	2312      	movs	r3, #18
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	efffffff 	.word	0xefffffff
 8002434:	fffff3ff 	.word	0xfffff3ff
 8002438:	fffffcff 	.word	0xfffffcff
 800243c:	fff3ffff 	.word	0xfff3ffff
 8002440:	ffcfffff 	.word	0xffcfffff
 8002444:	ffffcfff 	.word	0xffffcfff
 8002448:	ffff3fff 	.word	0xffff3fff
 800244c:	ffbfffff 	.word	0xffbfffff
 8002450:	feffffff 	.word	0xfeffffff

08002454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0a8      	b.n	80025b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2382      	movs	r3, #130	; 0x82
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	429a      	cmp	r2, r3
 8002478:	d009      	beq.n	800248e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	61da      	str	r2, [r3, #28]
 8002480:	e005      	b.n	800248e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	225d      	movs	r2, #93	; 0x5d
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	225c      	movs	r2, #92	; 0x5c
 80024a4:	2100      	movs	r1, #0
 80024a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fe fa66 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	225d      	movs	r2, #93	; 0x5d
 80024b4:	2102      	movs	r1, #2
 80024b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	438a      	bics	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	23e0      	movs	r3, #224	; 0xe0
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d902      	bls.n	80024da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e002      	b.n	80024e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	23f0      	movs	r3, #240	; 0xf0
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d008      	beq.n	80024fe <HAL_SPI_Init+0xaa>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	23e0      	movs	r3, #224	; 0xe0
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	2382      	movs	r3, #130	; 0x82
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	2384      	movs	r3, #132	; 0x84
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	400b      	ands	r3, r1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2102      	movs	r1, #2
 800251a:	400b      	ands	r3, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2101      	movs	r1, #1
 8002524:	400b      	ands	r3, r1
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6999      	ldr	r1, [r3, #24]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	400b      	ands	r3, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2138      	movs	r1, #56	; 0x38
 800253a:	400b      	ands	r3, r1
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	400b      	ands	r3, r1
 8002546:	431a      	orrs	r2, r3
 8002548:	0011      	movs	r1, r2
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	2204      	movs	r2, #4
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2110      	movs	r1, #16
 800256c:	400b      	ands	r3, r1
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	2108      	movs	r1, #8
 8002576:	400b      	ands	r3, r1
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68d9      	ldr	r1, [r3, #12]
 800257e:	23f0      	movs	r3, #240	; 0xf0
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	400b      	ands	r3, r1
 8002584:	431a      	orrs	r2, r3
 8002586:	0011      	movs	r1, r2
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	401a      	ands	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4907      	ldr	r1, [pc, #28]	; (80025c0 <HAL_SPI_Init+0x16c>)
 80025a4:	400a      	ands	r2, r1
 80025a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	225d      	movs	r2, #93	; 0x5d
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b004      	add	sp, #16
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	fffff7ff 	.word	0xfffff7ff

080025c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	1dbb      	adds	r3, r7, #6
 80025d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d4:	231f      	movs	r3, #31
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	225c      	movs	r2, #92	; 0x5c
 80025e0:	5c9b      	ldrb	r3, [r3, r2]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_SPI_Transmit+0x26>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e147      	b.n	800287a <HAL_SPI_Transmit+0x2b6>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	225c      	movs	r2, #92	; 0x5c
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f2:	f7fe fd3b 	bl	800106c <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025fa:	2316      	movs	r3, #22
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	1dba      	adds	r2, r7, #6
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	225d      	movs	r2, #93	; 0x5d
 8002608:	5c9b      	ldrb	r3, [r3, r2]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d004      	beq.n	800261a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002610:	231f      	movs	r3, #31
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2202      	movs	r2, #2
 8002616:	701a      	strb	r2, [r3, #0]
    goto error;
 8002618:	e128      	b.n	800286c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_SPI_Transmit+0x64>
 8002620:	1dbb      	adds	r3, r7, #6
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002628:	231f      	movs	r3, #31
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002630:	e11c      	b.n	800286c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	225d      	movs	r2, #93	; 0x5d
 8002636:	2103      	movs	r1, #3
 8002638:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1dba      	adds	r2, r7, #6
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1dba      	adds	r2, r7, #6
 8002652:	8812      	ldrh	r2, [r2, #0]
 8002654:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2244      	movs	r2, #68	; 0x44
 8002660:	2100      	movs	r1, #0
 8002662:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2246      	movs	r2, #70	; 0x46
 8002668:	2100      	movs	r1, #0
 800266a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	429a      	cmp	r2, r3
 8002682:	d110      	bne.n	80026a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	438a      	bics	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	01c9      	lsls	r1, r1, #7
 80026a2:	430a      	orrs	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d007      	beq.n	80026c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2140      	movs	r1, #64	; 0x40
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	23e0      	movs	r3, #224	; 0xe0
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d952      	bls.n	8002776 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_SPI_Transmit+0x11e>
 80026d8:	2316      	movs	r3, #22
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d143      	bne.n	800276a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	1c9a      	adds	r2, r3, #2
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002706:	e030      	b.n	800276a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d112      	bne.n	800273c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	881a      	ldrh	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800273a:	e016      	b.n	800276a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800273c:	f7fe fc96 	bl	800106c <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d802      	bhi.n	8002752 <HAL_SPI_Transmit+0x18e>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_SPI_Transmit+0x194>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d108      	bne.n	800276a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002758:	231f      	movs	r3, #31
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2203      	movs	r2, #3
 800275e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	225d      	movs	r2, #93	; 0x5d
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]
          goto error;
 8002768:	e080      	b.n	800286c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1c9      	bne.n	8002708 <HAL_SPI_Transmit+0x144>
 8002774:	e053      	b.n	800281e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <HAL_SPI_Transmit+0x1c4>
 800277e:	2316      	movs	r3, #22
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d145      	bne.n	8002814 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80027ae:	e031      	b.n	8002814 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d113      	bne.n	80027e6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027e4:	e016      	b.n	8002814 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e6:	f7fe fc41 	bl	800106c <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d802      	bhi.n	80027fc <HAL_SPI_Transmit+0x238>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	d102      	bne.n	8002802 <HAL_SPI_Transmit+0x23e>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002802:	231f      	movs	r3, #31
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2203      	movs	r2, #3
 8002808:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	225d      	movs	r2, #93	; 0x5d
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]
          goto error;
 8002812:	e02b      	b.n	800286c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1c8      	bne.n	80027b0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 f95d 	bl	8002ae4 <SPI_EndRxTxTransaction>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d002      	beq.n	8002834 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800285a:	231f      	movs	r3, #31
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e003      	b.n	800286c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	225d      	movs	r2, #93	; 0x5d
 8002868:	2101      	movs	r1, #1
 800286a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	225c      	movs	r2, #92	; 0x5c
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002874:	231f      	movs	r3, #31
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	781b      	ldrb	r3, [r3, #0]
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b008      	add	sp, #32
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002894:	f7fe fbea 	bl	800106c <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	18d3      	adds	r3, r2, r3
 80028a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028a4:	f7fe fbe2 	bl	800106c <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ac:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	015b      	lsls	r3, r3, #5
 80028b2:	0d1b      	lsrs	r3, r3, #20
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	4353      	muls	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ba:	e058      	b.n	800296e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	d055      	beq.n	800296e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c2:	f7fe fbd3 	bl	800106c <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d902      	bls.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d142      	bne.n	800295e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	21e0      	movs	r1, #224	; 0xe0
 80028e4:	438a      	bics	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	2382      	movs	r3, #130	; 0x82
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d113      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x98>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d005      	beq.n	800290c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	438a      	bics	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	019b      	lsls	r3, r3, #6
 8002924:	429a      	cmp	r2, r3
 8002926:	d110      	bne.n	800294a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	491a      	ldr	r1, [pc, #104]	; (800299c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002934:	400a      	ands	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	0189      	lsls	r1, r1, #6
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	225d      	movs	r2, #93	; 0x5d
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	225c      	movs	r2, #92	; 0x5c
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e017      	b.n	800298e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3b01      	subs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	425a      	negs	r2, r3
 800297e:	4153      	adcs	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	001a      	movs	r2, r3
 8002984:	1dfb      	adds	r3, r7, #7
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d197      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b008      	add	sp, #32
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000000 	.word	0x20000000
 800299c:	ffffdfff 	.word	0xffffdfff

080029a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80029ae:	2317      	movs	r3, #23
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029b6:	f7fe fb59 	bl	800106c <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	18d3      	adds	r3, r2, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80029c6:	f7fe fb51 	bl	800106c <HAL_GetTick>
 80029ca:	0003      	movs	r3, r0
 80029cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	0013      	movs	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	00da      	lsls	r2, r3, #3
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	0d1b      	lsrs	r3, r3, #20
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4353      	muls	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029ec:	e068      	b.n	8002ac0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	23c0      	movs	r3, #192	; 0xc0
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10a      	bne.n	8002a0e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	2117      	movs	r1, #23
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	d055      	beq.n	8002ac0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a14:	f7fe fb2a 	bl	800106c <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d902      	bls.n	8002a2a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d142      	bne.n	8002ab0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	21e0      	movs	r1, #224	; 0xe0
 8002a36:	438a      	bics	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	2382      	movs	r3, #130	; 0x82
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d113      	bne.n	8002a6e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d005      	beq.n	8002a5e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d107      	bne.n	8002a6e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2140      	movs	r1, #64	; 0x40
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d110      	bne.n	8002a9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0189      	lsls	r1, r1, #6
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	225d      	movs	r2, #93	; 0x5d
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	225c      	movs	r2, #92	; 0x5c
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e010      	b.n	8002ad2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d18e      	bne.n	80029ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b00a      	add	sp, #40	; 0x28
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	ffffdfff 	.word	0xffffdfff

08002ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	23c0      	movs	r3, #192	; 0xc0
 8002af4:	0159      	lsls	r1, r3, #5
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	0013      	movs	r3, r2
 8002afe:	2200      	movs	r2, #0
 8002b00:	f7ff ff4e 	bl	80029a0 <SPI_WaitFifoStateUntilTimeout>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d007      	beq.n	8002b18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e027      	b.n	8002b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	0013      	movs	r3, r2
 8002b22:	2200      	movs	r2, #0
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	f7ff fead 	bl	8002884 <SPI_WaitFlagStateUntilTimeout>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d007      	beq.n	8002b3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	2220      	movs	r2, #32
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e014      	b.n	8002b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	00d9      	lsls	r1, r3, #3
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f7ff ff27 	bl	80029a0 <SPI_WaitFifoStateUntilTimeout>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d007      	beq.n	8002b66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e000      	b.n	8002b68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b004      	add	sp, #16
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e04a      	b.n	8002c18 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	223d      	movs	r2, #61	; 0x3d
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d107      	bne.n	8002b9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223c      	movs	r2, #60	; 0x3c
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7fe f89f 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223d      	movs	r2, #61	; 0x3d
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f000 fa6b 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2248      	movs	r2, #72	; 0x48
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	223e      	movs	r2, #62	; 0x3e
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223f      	movs	r2, #63	; 0x3f
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2241      	movs	r2, #65	; 0x41
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2242      	movs	r2, #66	; 0x42
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2243      	movs	r2, #67	; 0x43
 8002bea:	2101      	movs	r1, #1
 8002bec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2244      	movs	r2, #68	; 0x44
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2245      	movs	r2, #69	; 0x45
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2246      	movs	r2, #70	; 0x46
 8002c02:	2101      	movs	r1, #1
 8002c04:	5499      	strb	r1, [r3, r2]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2247      	movs	r2, #71	; 0x47
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223d      	movs	r2, #61	; 0x3d
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e04a      	b.n	8002cc8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223d      	movs	r2, #61	; 0x3d
 8002c36:	5c9b      	ldrb	r3, [r3, r2]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223c      	movs	r2, #60	; 0x3c
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f841 	bl	8002cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223d      	movs	r2, #61	; 0x3d
 8002c52:	2102      	movs	r1, #2
 8002c54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	0019      	movs	r1, r3
 8002c60:	0010      	movs	r0, r2
 8002c62:	f000 fa13 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2248      	movs	r2, #72	; 0x48
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	223e      	movs	r2, #62	; 0x3e
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	223f      	movs	r2, #63	; 0x3f
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2240      	movs	r2, #64	; 0x40
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2241      	movs	r2, #65	; 0x41
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2242      	movs	r2, #66	; 0x42
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2243      	movs	r2, #67	; 0x43
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2244      	movs	r2, #68	; 0x44
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2245      	movs	r2, #69	; 0x45
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2246      	movs	r2, #70	; 0x46
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2247      	movs	r2, #71	; 0x47
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	223d      	movs	r2, #61	; 0x3d
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2317      	movs	r3, #23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	223c      	movs	r2, #60	; 0x3c
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0e5      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	223c      	movs	r2, #60	; 0x3c
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b14      	cmp	r3, #20
 8002d0e:	d900      	bls.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d10:	e0d1      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fa48 	bl	80031bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2108      	movs	r1, #8
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2104      	movs	r1, #4
 8002d48:	438a      	bics	r2, r1
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6999      	ldr	r1, [r3, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	619a      	str	r2, [r3, #24]
      break;
 8002d5e:	e0af      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fab1 	bl	80032d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	0109      	lsls	r1, r1, #4
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4954      	ldr	r1, [pc, #336]	; (8002edc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6999      	ldr	r1, [r3, #24]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]
      break;
 8002da4:	e08c      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	0011      	movs	r1, r2
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fb12 	bl	80033d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2104      	movs	r1, #4
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69d9      	ldr	r1, [r3, #28]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	61da      	str	r2, [r3, #28]
      break;
 8002de6:	e06b      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fb79 	bl	80034e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0109      	lsls	r1, r1, #4
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4932      	ldr	r1, [pc, #200]	; (8002edc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69d9      	ldr	r1, [r3, #28]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	021a      	lsls	r2, r3, #8
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]
      break;
 8002e2c:	e048      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	0011      	movs	r1, r2
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fbc0 	bl	80035bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2108      	movs	r1, #8
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2104      	movs	r1, #4
 8002e58:	438a      	bics	r2, r1
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e6e:	e027      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 fbff 	bl	800367c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	0109      	lsls	r1, r1, #4
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4910      	ldr	r1, [pc, #64]	; (8002edc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	021a      	lsls	r2, r3, #8
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002eb4:	e004      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002eb6:	2317      	movs	r3, #23
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
      break;
 8002ebe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	223c      	movs	r2, #60	; 0x3c
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ec8:	2317      	movs	r3, #23
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
}
 8002ece:	0018      	movs	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b006      	add	sp, #24
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	08004b28 	.word	0x08004b28
 8002edc:	fffffbff 	.word	0xfffffbff

08002ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	230f      	movs	r3, #15
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223c      	movs	r2, #60	; 0x3c
 8002ef6:	5c9b      	ldrb	r3, [r3, r2]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIM_ConfigClockSource+0x20>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0bc      	b.n	800307a <HAL_TIM_ConfigClockSource+0x19a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	223c      	movs	r2, #60	; 0x3c
 8002f04:	2101      	movs	r1, #1
 8002f06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223d      	movs	r2, #61	; 0x3d
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4a5a      	ldr	r2, [pc, #360]	; (8003084 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a59      	ldr	r2, [pc, #356]	; (8003088 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0192      	lsls	r2, r2, #6
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d040      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0xde>
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0192      	lsls	r2, r2, #6
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d900      	bls.n	8002f46 <HAL_TIM_ConfigClockSource+0x66>
 8002f44:	e088      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0152      	lsls	r2, r2, #5
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d100      	bne.n	8002f50 <HAL_TIM_ConfigClockSource+0x70>
 8002f4e:	e088      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x182>
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	0152      	lsls	r2, r2, #5
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d900      	bls.n	8002f5a <HAL_TIM_ConfigClockSource+0x7a>
 8002f58:	e07e      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f5a:	2b70      	cmp	r3, #112	; 0x70
 8002f5c:	d018      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0xb0>
 8002f5e:	d900      	bls.n	8002f62 <HAL_TIM_ConfigClockSource+0x82>
 8002f60:	e07a      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f62:	2b60      	cmp	r3, #96	; 0x60
 8002f64:	d04f      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x126>
 8002f66:	d900      	bls.n	8002f6a <HAL_TIM_ConfigClockSource+0x8a>
 8002f68:	e076      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f6a:	2b50      	cmp	r3, #80	; 0x50
 8002f6c:	d03b      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x106>
 8002f6e:	d900      	bls.n	8002f72 <HAL_TIM_ConfigClockSource+0x92>
 8002f70:	e072      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d057      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x146>
 8002f76:	d900      	bls.n	8002f7a <HAL_TIM_ConfigClockSource+0x9a>
 8002f78:	e06e      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f7a:	2b30      	cmp	r3, #48	; 0x30
 8002f7c:	d063      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x166>
 8002f7e:	d86b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d060      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x166>
 8002f84:	d868      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d05d      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x166>
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d05b      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x166>
 8002f8e:	e063      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa0:	f000 fc4c 	bl	800383c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2277      	movs	r2, #119	; 0x77
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
      break;
 8002fbc:	e052      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	f000 fc35 	bl	800383c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	01c9      	lsls	r1, r1, #7
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
      break;
 8002fe4:	e03e      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	f000 fba6 	bl	8003744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2150      	movs	r1, #80	; 0x50
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fc00 	bl	8003804 <TIM_ITRx_SetConfig>
      break;
 8003004:	e02e      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003012:	001a      	movs	r2, r3
 8003014:	f000 fbc4 	bl	80037a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2160      	movs	r1, #96	; 0x60
 800301e:	0018      	movs	r0, r3
 8003020:	f000 fbf0 	bl	8003804 <TIM_ITRx_SetConfig>
      break;
 8003024:	e01e      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	001a      	movs	r2, r3
 8003034:	f000 fb86 	bl	8003744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	0018      	movs	r0, r3
 8003040:	f000 fbe0 	bl	8003804 <TIM_ITRx_SetConfig>
      break;
 8003044:	e00e      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f000 fbd7 	bl	8003804 <TIM_ITRx_SetConfig>
      break;
 8003056:	e005      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003058:	230f      	movs	r3, #15
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
      break;
 8003060:	e000      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003062:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	223d      	movs	r2, #61	; 0x3d
 8003068:	2101      	movs	r1, #1
 800306a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	223c      	movs	r2, #60	; 0x3c
 8003070:	2100      	movs	r1, #0
 8003072:	5499      	strb	r1, [r3, r2]

  return status;
 8003074:	230f      	movs	r3, #15
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b004      	add	sp, #16
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	ffceff88 	.word	0xffceff88
 8003088:	ffff00ff 	.word	0xffff00ff

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3f      	ldr	r2, [pc, #252]	; (800319c <TIM_Base_SetConfig+0x110>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00c      	beq.n	80030be <TIM_Base_SetConfig+0x32>
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	05db      	lsls	r3, r3, #23
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d007      	beq.n	80030be <TIM_Base_SetConfig+0x32>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_Base_SetConfig+0x32>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2270      	movs	r2, #112	; 0x70
 80030c2:	4393      	bics	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a32      	ldr	r2, [pc, #200]	; (800319c <TIM_Base_SetConfig+0x110>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d01c      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	05db      	lsls	r3, r3, #23
 80030de:	429a      	cmp	r2, r3
 80030e0:	d017      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <TIM_Base_SetConfig+0x120>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0x86>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <TIM_Base_SetConfig+0x128>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <TIM_Base_SetConfig+0x12c>)
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	4393      	bics	r3, r2
 800312a:	001a      	movs	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <TIM_Base_SetConfig+0x110>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0xde>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <TIM_Base_SetConfig+0x120>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0xde>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0xde>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <TIM_Base_SetConfig+0x128>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d103      	bne.n	8003172 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2201      	movs	r2, #1
 800317e:	4013      	ands	r3, r2
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2201      	movs	r2, #1
 800318a:	4393      	bics	r3, r2
 800318c:	001a      	movs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	611a      	str	r2, [r3, #16]
  }
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40002000 	.word	0x40002000
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40014400 	.word	0x40014400
 80031b4:	40014800 	.word	0x40014800
 80031b8:	fffffcff 	.word	0xfffffcff

080031bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4393      	bics	r3, r2
 80031d4:	001a      	movs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a32      	ldr	r2, [pc, #200]	; (80032b4 <TIM_OC1_SetConfig+0xf8>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2203      	movs	r2, #3
 80031f2:	4393      	bics	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2202      	movs	r2, #2
 8003204:	4393      	bics	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a28      	ldr	r2, [pc, #160]	; (80032b8 <TIM_OC1_SetConfig+0xfc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_OC1_SetConfig+0x76>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <TIM_OC1_SetConfig+0x100>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_OC1_SetConfig+0x76>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <TIM_OC1_SetConfig+0x104>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_OC1_SetConfig+0x76>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <TIM_OC1_SetConfig+0x108>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10c      	bne.n	800324c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2208      	movs	r2, #8
 8003236:	4393      	bics	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2204      	movs	r2, #4
 8003248:	4393      	bics	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <TIM_OC1_SetConfig+0xfc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_OC1_SetConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <TIM_OC1_SetConfig+0x100>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_OC1_SetConfig+0xb0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <TIM_OC1_SetConfig+0x104>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_OC1_SetConfig+0xb0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <TIM_OC1_SetConfig+0x108>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d111      	bne.n	8003290 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <TIM_OC1_SetConfig+0x10c>)
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4a15      	ldr	r2, [pc, #84]	; (80032cc <TIM_OC1_SetConfig+0x110>)
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b006      	add	sp, #24
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	fffeff8f 	.word	0xfffeff8f
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800
 80032c8:	fffffeff 	.word	0xfffffeff
 80032cc:	fffffdff 	.word	0xfffffdff

080032d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4393      	bics	r3, r2
 80032e8:	001a      	movs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	; (80033b8 <TIM_OC2_SetConfig+0xe8>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <TIM_OC2_SetConfig+0xec>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2220      	movs	r2, #32
 800331a:	4393      	bics	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <TIM_OC2_SetConfig+0xf0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10d      	bne.n	800334e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	4393      	bics	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	4393      	bics	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <TIM_OC2_SetConfig+0xf0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00b      	beq.n	800336e <TIM_OC2_SetConfig+0x9e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <TIM_OC2_SetConfig+0xf4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <TIM_OC2_SetConfig+0x9e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <TIM_OC2_SetConfig+0xf8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <TIM_OC2_SetConfig+0x9e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <TIM_OC2_SetConfig+0xfc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d113      	bne.n	8003396 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <TIM_OC2_SetConfig+0x100>)
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <TIM_OC2_SetConfig+0x104>)
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	621a      	str	r2, [r3, #32]
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b006      	add	sp, #24
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	feff8fff 	.word	0xfeff8fff
 80033bc:	fffffcff 	.word	0xfffffcff
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800
 80033d0:	fffffbff 	.word	0xfffffbff
 80033d4:	fffff7ff 	.word	0xfffff7ff

080033d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a33      	ldr	r2, [pc, #204]	; (80034bc <TIM_OC3_SetConfig+0xe4>)
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <TIM_OC3_SetConfig+0xe8>)
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2203      	movs	r2, #3
 800340c:	4393      	bics	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <TIM_OC3_SetConfig+0xec>)
 800341e:	4013      	ands	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <TIM_OC3_SetConfig+0xf0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10d      	bne.n	8003452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4a24      	ldr	r2, [pc, #144]	; (80034cc <TIM_OC3_SetConfig+0xf4>)
 800343a:	4013      	ands	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <TIM_OC3_SetConfig+0xf8>)
 800344e:	4013      	ands	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <TIM_OC3_SetConfig+0xf0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_OC3_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <TIM_OC3_SetConfig+0xfc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_OC3_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_OC3_SetConfig+0x100>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_OC3_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <TIM_OC3_SetConfig+0x104>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d113      	bne.n	800349a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <TIM_OC3_SetConfig+0x108>)
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_OC3_SetConfig+0x10c>)
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	621a      	str	r2, [r3, #32]
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b006      	add	sp, #24
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	fffffeff 	.word	0xfffffeff
 80034c0:	fffeff8f 	.word	0xfffeff8f
 80034c4:	fffffdff 	.word	0xfffffdff
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	fffff7ff 	.word	0xfffff7ff
 80034d0:	fffffbff 	.word	0xfffffbff
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40014400 	.word	0x40014400
 80034dc:	40014800 	.word	0x40014800
 80034e0:	ffffefff 	.word	0xffffefff
 80034e4:	ffffdfff 	.word	0xffffdfff

080034e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <TIM_OC4_SetConfig+0xb0>)
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a22      	ldr	r2, [pc, #136]	; (800359c <TIM_OC4_SetConfig+0xb4>)
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <TIM_OC4_SetConfig+0xb8>)
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <TIM_OC4_SetConfig+0xbc>)
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <TIM_OC4_SetConfig+0xc0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00b      	beq.n	8003560 <TIM_OC4_SetConfig+0x78>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <TIM_OC4_SetConfig+0xc4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_OC4_SetConfig+0x78>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <TIM_OC4_SetConfig+0xc8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC4_SetConfig+0x78>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <TIM_OC4_SetConfig+0xcc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d109      	bne.n	8003574 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <TIM_OC4_SetConfig+0xd0>)
 8003564:	4013      	ands	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b006      	add	sp, #24
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	ffffefff 	.word	0xffffefff
 800359c:	feff8fff 	.word	0xfeff8fff
 80035a0:	fffffcff 	.word	0xfffffcff
 80035a4:	ffffdfff 	.word	0xffffdfff
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	40014800 	.word	0x40014800
 80035b8:	ffffbfff 	.word	0xffffbfff

080035bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <TIM_OC5_SetConfig+0xa4>)
 80035d2:	401a      	ands	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <TIM_OC5_SetConfig+0xa8>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <TIM_OC5_SetConfig+0xac>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a17      	ldr	r2, [pc, #92]	; (800366c <TIM_OC5_SetConfig+0xb0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_OC5_SetConfig+0x6e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <TIM_OC5_SetConfig+0xb4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_OC5_SetConfig+0x6e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a15      	ldr	r2, [pc, #84]	; (8003674 <TIM_OC5_SetConfig+0xb8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_OC5_SetConfig+0x6e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a14      	ldr	r2, [pc, #80]	; (8003678 <TIM_OC5_SetConfig+0xbc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d109      	bne.n	800363e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <TIM_OC5_SetConfig+0xa4>)
 800362e:	4013      	ands	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b006      	add	sp, #24
 800365e:	bd80      	pop	{r7, pc}
 8003660:	fffeffff 	.word	0xfffeffff
 8003664:	fffeff8f 	.word	0xfffeff8f
 8003668:	fffdffff 	.word	0xfffdffff
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <TIM_OC6_SetConfig+0xa8>)
 8003692:	401a      	ands	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a20      	ldr	r2, [pc, #128]	; (8003728 <TIM_OC6_SetConfig+0xac>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <TIM_OC6_SetConfig+0xb0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	051b      	lsls	r3, r3, #20
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <TIM_OC6_SetConfig+0xb4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00b      	beq.n	80036ec <TIM_OC6_SetConfig+0x70>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <TIM_OC6_SetConfig+0xb8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC6_SetConfig+0x70>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <TIM_OC6_SetConfig+0xbc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC6_SetConfig+0x70>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <TIM_OC6_SetConfig+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <TIM_OC6_SetConfig+0xc4>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b006      	add	sp, #24
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	ffefffff 	.word	0xffefffff
 8003728:	feff8fff 	.word	0xfeff8fff
 800372c:	ffdfffff 	.word	0xffdfffff
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	fffbffff 	.word	0xfffbffff

08003744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	2201      	movs	r2, #1
 800375c:	4393      	bics	r3, r2
 800375e:	001a      	movs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	22f0      	movs	r2, #240	; 0xf0
 800376e:	4393      	bics	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	220a      	movs	r2, #10
 8003780:	4393      	bics	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b006      	add	sp, #24
 800379e:	bd80      	pop	{r7, pc}

080037a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	2210      	movs	r2, #16
 80037b8:	4393      	bics	r3, r2
 80037ba:	001a      	movs	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <TIM_TI2_ConfigInputStage+0x60>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	031b      	lsls	r3, r3, #12
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	22a0      	movs	r2, #160	; 0xa0
 80037dc:	4393      	bics	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b006      	add	sp, #24
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	ffff0fff 	.word	0xffff0fff

08003804 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <TIM_ITRx_SetConfig+0x34>)
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	2207      	movs	r2, #7
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	609a      	str	r2, [r3, #8]
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	ffcfff8f 	.word	0xffcfff8f

0800383c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <TIM_ETR_SetConfig+0x3c>)
 8003854:	4013      	ands	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	021a      	lsls	r2, r3, #8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	431a      	orrs	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	609a      	str	r2, [r3, #8]
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b006      	add	sp, #24
 8003876:	bd80      	pop	{r7, pc}
 8003878:	ffff00ff 	.word	0xffff00ff

0800387c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	223c      	movs	r2, #60	; 0x3c
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003890:	2302      	movs	r3, #2
 8003892:	e05a      	b.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	223c      	movs	r2, #60	; 0x3c
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	223d      	movs	r2, #61	; 0x3d
 80038a0:	2102      	movs	r1, #2
 80038a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a26      	ldr	r2, [pc, #152]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2270      	movs	r2, #112	; 0x70
 80038d4:	4393      	bics	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d014      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	05db      	lsls	r3, r3, #23
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d00e      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10c      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2280      	movs	r2, #128	; 0x80
 8003922:	4393      	bics	r3, r2
 8003924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4313      	orrs	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	223d      	movs	r2, #61	; 0x3d
 800393c:	2101      	movs	r1, #1
 800393e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	223c      	movs	r2, #60	; 0x3c
 8003944:	2100      	movs	r1, #0
 8003946:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b004      	add	sp, #16
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	40012c00 	.word	0x40012c00
 8003958:	ff0fffff 	.word	0xff0fffff
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40014000 	.word	0x40014000

08003968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223c      	movs	r2, #60	; 0x3c
 800397a:	5c9b      	ldrb	r3, [r3, r2]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003980:	2302      	movs	r3, #2
 8003982:	e06f      	b.n	8003a64 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	223c      	movs	r2, #60	; 0x3c
 8003988:	2101      	movs	r1, #1
 800398a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	4393      	bics	r3, r2
 8003992:	001a      	movs	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80039a0:	401a      	ands	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80039ae:	401a      	ands	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80039bc:	401a      	ands	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80039ca:	401a      	ands	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80039d8:	401a      	ands	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a26      	ldr	r2, [pc, #152]	; (8003a80 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80039e6:	401a      	ands	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80039f4:	401a      	ands	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003a04:	401a      	ands	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d11c      	bne.n	8003a52 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	051b      	lsls	r3, r3, #20
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003a2c:	401a      	ands	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003a48:	401a      	ands	r2, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	223c      	movs	r2, #60	; 0x3c
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b004      	add	sp, #16
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	fffffcff 	.word	0xfffffcff
 8003a70:	fffffbff 	.word	0xfffffbff
 8003a74:	fffff7ff 	.word	0xfffff7ff
 8003a78:	ffffefff 	.word	0xffffefff
 8003a7c:	ffffdfff 	.word	0xffffdfff
 8003a80:	ffffbfff 	.word	0xffffbfff
 8003a84:	fff0ffff 	.word	0xfff0ffff
 8003a88:	efffffff 	.word	0xefffffff
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	ff0fffff 	.word	0xff0fffff
 8003a94:	feffffff 	.word	0xfeffffff
 8003a98:	fdffffff 	.word	0xfdffffff
 8003a9c:	dfffffff 	.word	0xdfffffff

08003aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e046      	b.n	8003b40 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2288      	movs	r2, #136	; 0x88
 8003ab6:	589b      	ldr	r3, [r3, r2]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2284      	movs	r2, #132	; 0x84
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fd f9ca 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2288      	movs	r2, #136	; 0x88
 8003ad0:	2124      	movs	r1, #36	; 0x24
 8003ad2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fb82 	bl	80041f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f828 	bl	8003b4c <UART_SetConfig>
 8003afc:	0003      	movs	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01c      	b.n	8003b40 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	490d      	ldr	r1, [pc, #52]	; (8003b48 <HAL_UART_Init+0xa8>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	212a      	movs	r1, #42	; 0x2a
 8003b22:	438a      	bics	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 fc11 	bl	8004360 <UART_CheckIdleState>
 8003b3e:	0003      	movs	r3, r0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	ffffb7ff 	.word	0xffffb7ff

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b090      	sub	sp, #64	; 0x40
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b54:	231a      	movs	r3, #26
 8003b56:	2220      	movs	r2, #32
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4ac1      	ldr	r2, [pc, #772]	; (8003e84 <UART_SetConfig+0x338>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4abc      	ldr	r2, [pc, #752]	; (8003e88 <UART_SetConfig+0x33c>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	68d9      	ldr	r1, [r3, #12]
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4ab6      	ldr	r2, [pc, #728]	; (8003e8c <UART_SetConfig+0x340>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <UART_SetConfig+0x80>
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4ab4      	ldr	r2, [pc, #720]	; (8003e90 <UART_SetConfig+0x344>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4ab0      	ldr	r2, [pc, #704]	; (8003e94 <UART_SetConfig+0x348>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	220f      	movs	r2, #15
 8003bea:	4393      	bics	r3, r2
 8003bec:	0018      	movs	r0, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4aa5      	ldr	r2, [pc, #660]	; (8003e98 <UART_SetConfig+0x34c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d131      	bne.n	8003c6a <UART_SetConfig+0x11e>
 8003c06:	4ba5      	ldr	r3, [pc, #660]	; (8003e9c <UART_SetConfig+0x350>)
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d01d      	beq.n	8003c4e <UART_SetConfig+0x102>
 8003c12:	d823      	bhi.n	8003c5c <UART_SetConfig+0x110>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d00c      	beq.n	8003c32 <UART_SetConfig+0xe6>
 8003c18:	d820      	bhi.n	8003c5c <UART_SetConfig+0x110>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <UART_SetConfig+0xd8>
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00e      	beq.n	8003c40 <UART_SetConfig+0xf4>
 8003c22:	e01b      	b.n	8003c5c <UART_SetConfig+0x110>
 8003c24:	231b      	movs	r3, #27
 8003c26:	2220      	movs	r2, #32
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	19db      	adds	r3, r3, r7
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e154      	b.n	8003edc <UART_SetConfig+0x390>
 8003c32:	231b      	movs	r3, #27
 8003c34:	2220      	movs	r2, #32
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e14d      	b.n	8003edc <UART_SetConfig+0x390>
 8003c40:	231b      	movs	r3, #27
 8003c42:	2220      	movs	r2, #32
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2204      	movs	r2, #4
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e146      	b.n	8003edc <UART_SetConfig+0x390>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	2220      	movs	r2, #32
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	2208      	movs	r2, #8
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e13f      	b.n	8003edc <UART_SetConfig+0x390>
 8003c5c:	231b      	movs	r3, #27
 8003c5e:	2220      	movs	r2, #32
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2210      	movs	r2, #16
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e138      	b.n	8003edc <UART_SetConfig+0x390>
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a8c      	ldr	r2, [pc, #560]	; (8003ea0 <UART_SetConfig+0x354>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d131      	bne.n	8003cd8 <UART_SetConfig+0x18c>
 8003c74:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <UART_SetConfig+0x350>)
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	220c      	movs	r2, #12
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d01d      	beq.n	8003cbc <UART_SetConfig+0x170>
 8003c80:	d823      	bhi.n	8003cca <UART_SetConfig+0x17e>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d00c      	beq.n	8003ca0 <UART_SetConfig+0x154>
 8003c86:	d820      	bhi.n	8003cca <UART_SetConfig+0x17e>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <UART_SetConfig+0x146>
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d00e      	beq.n	8003cae <UART_SetConfig+0x162>
 8003c90:	e01b      	b.n	8003cca <UART_SetConfig+0x17e>
 8003c92:	231b      	movs	r3, #27
 8003c94:	2220      	movs	r2, #32
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e11d      	b.n	8003edc <UART_SetConfig+0x390>
 8003ca0:	231b      	movs	r3, #27
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	2202      	movs	r2, #2
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e116      	b.n	8003edc <UART_SetConfig+0x390>
 8003cae:	231b      	movs	r3, #27
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e10f      	b.n	8003edc <UART_SetConfig+0x390>
 8003cbc:	231b      	movs	r3, #27
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e108      	b.n	8003edc <UART_SetConfig+0x390>
 8003cca:	231b      	movs	r3, #27
 8003ccc:	2220      	movs	r2, #32
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e101      	b.n	8003edc <UART_SetConfig+0x390>
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a71      	ldr	r2, [pc, #452]	; (8003ea4 <UART_SetConfig+0x358>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d131      	bne.n	8003d46 <UART_SetConfig+0x1fa>
 8003ce2:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <UART_SetConfig+0x350>)
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	2230      	movs	r2, #48	; 0x30
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b30      	cmp	r3, #48	; 0x30
 8003cec:	d01d      	beq.n	8003d2a <UART_SetConfig+0x1de>
 8003cee:	d823      	bhi.n	8003d38 <UART_SetConfig+0x1ec>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d00c      	beq.n	8003d0e <UART_SetConfig+0x1c2>
 8003cf4:	d820      	bhi.n	8003d38 <UART_SetConfig+0x1ec>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <UART_SetConfig+0x1b4>
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d00e      	beq.n	8003d1c <UART_SetConfig+0x1d0>
 8003cfe:	e01b      	b.n	8003d38 <UART_SetConfig+0x1ec>
 8003d00:	231b      	movs	r3, #27
 8003d02:	2220      	movs	r2, #32
 8003d04:	189b      	adds	r3, r3, r2
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e0e6      	b.n	8003edc <UART_SetConfig+0x390>
 8003d0e:	231b      	movs	r3, #27
 8003d10:	2220      	movs	r2, #32
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	19db      	adds	r3, r3, r7
 8003d16:	2202      	movs	r2, #2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e0df      	b.n	8003edc <UART_SetConfig+0x390>
 8003d1c:	231b      	movs	r3, #27
 8003d1e:	2220      	movs	r2, #32
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	19db      	adds	r3, r3, r7
 8003d24:	2204      	movs	r2, #4
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e0d8      	b.n	8003edc <UART_SetConfig+0x390>
 8003d2a:	231b      	movs	r3, #27
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	19db      	adds	r3, r3, r7
 8003d32:	2208      	movs	r2, #8
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e0d1      	b.n	8003edc <UART_SetConfig+0x390>
 8003d38:	231b      	movs	r3, #27
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	2210      	movs	r2, #16
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e0ca      	b.n	8003edc <UART_SetConfig+0x390>
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a57      	ldr	r2, [pc, #348]	; (8003ea8 <UART_SetConfig+0x35c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d106      	bne.n	8003d5e <UART_SetConfig+0x212>
 8003d50:	231b      	movs	r3, #27
 8003d52:	2220      	movs	r2, #32
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	19db      	adds	r3, r3, r7
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e0be      	b.n	8003edc <UART_SetConfig+0x390>
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a52      	ldr	r2, [pc, #328]	; (8003eac <UART_SetConfig+0x360>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d106      	bne.n	8003d76 <UART_SetConfig+0x22a>
 8003d68:	231b      	movs	r3, #27
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	19db      	adds	r3, r3, r7
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e0b2      	b.n	8003edc <UART_SetConfig+0x390>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <UART_SetConfig+0x364>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d106      	bne.n	8003d8e <UART_SetConfig+0x242>
 8003d80:	231b      	movs	r3, #27
 8003d82:	2220      	movs	r2, #32
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e0a6      	b.n	8003edc <UART_SetConfig+0x390>
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <UART_SetConfig+0x340>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d13e      	bne.n	8003e16 <UART_SetConfig+0x2ca>
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <UART_SetConfig+0x350>)
 8003d9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d9c:	23c0      	movs	r3, #192	; 0xc0
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	22c0      	movs	r2, #192	; 0xc0
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d027      	beq.n	8003dfa <UART_SetConfig+0x2ae>
 8003daa:	22c0      	movs	r2, #192	; 0xc0
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d82a      	bhi.n	8003e08 <UART_SetConfig+0x2bc>
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d011      	beq.n	8003dde <UART_SetConfig+0x292>
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d822      	bhi.n	8003e08 <UART_SetConfig+0x2bc>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <UART_SetConfig+0x284>
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	00d2      	lsls	r2, r2, #3
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <UART_SetConfig+0x2a0>
 8003dce:	e01b      	b.n	8003e08 <UART_SetConfig+0x2bc>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e07e      	b.n	8003edc <UART_SetConfig+0x390>
 8003dde:	231b      	movs	r3, #27
 8003de0:	2220      	movs	r2, #32
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	2202      	movs	r2, #2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e077      	b.n	8003edc <UART_SetConfig+0x390>
 8003dec:	231b      	movs	r3, #27
 8003dee:	2220      	movs	r2, #32
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2204      	movs	r2, #4
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e070      	b.n	8003edc <UART_SetConfig+0x390>
 8003dfa:	231b      	movs	r3, #27
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	2208      	movs	r2, #8
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e069      	b.n	8003edc <UART_SetConfig+0x390>
 8003e08:	231b      	movs	r3, #27
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	19db      	adds	r3, r3, r7
 8003e10:	2210      	movs	r2, #16
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e062      	b.n	8003edc <UART_SetConfig+0x390>
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <UART_SetConfig+0x344>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d157      	bne.n	8003ed0 <UART_SetConfig+0x384>
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <UART_SetConfig+0x350>)
 8003e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e24:	23c0      	movs	r3, #192	; 0xc0
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	22c0      	movs	r2, #192	; 0xc0
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d040      	beq.n	8003eb4 <UART_SetConfig+0x368>
 8003e32:	22c0      	movs	r2, #192	; 0xc0
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d843      	bhi.n	8003ec2 <UART_SetConfig+0x376>
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	0092      	lsls	r2, r2, #2
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d011      	beq.n	8003e66 <UART_SetConfig+0x31a>
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d83b      	bhi.n	8003ec2 <UART_SetConfig+0x376>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <UART_SetConfig+0x30c>
 8003e4e:	2280      	movs	r2, #128	; 0x80
 8003e50:	0052      	lsls	r2, r2, #1
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <UART_SetConfig+0x328>
 8003e56:	e034      	b.n	8003ec2 <UART_SetConfig+0x376>
 8003e58:	231b      	movs	r3, #27
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e03a      	b.n	8003edc <UART_SetConfig+0x390>
 8003e66:	231b      	movs	r3, #27
 8003e68:	2220      	movs	r2, #32
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e033      	b.n	8003edc <UART_SetConfig+0x390>
 8003e74:	231b      	movs	r3, #27
 8003e76:	2220      	movs	r2, #32
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02c      	b.n	8003edc <UART_SetConfig+0x390>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	cfff69f3 	.word	0xcfff69f3
 8003e88:	ffffcfff 	.word	0xffffcfff
 8003e8c:	40008000 	.word	0x40008000
 8003e90:	40008400 	.word	0x40008400
 8003e94:	11fff4ff 	.word	0x11fff4ff
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40004400 	.word	0x40004400
 8003ea4:	40004800 	.word	0x40004800
 8003ea8:	40004c00 	.word	0x40004c00
 8003eac:	40005000 	.word	0x40005000
 8003eb0:	40013c00 	.word	0x40013c00
 8003eb4:	231b      	movs	r3, #27
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	19db      	adds	r3, r3, r7
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e00c      	b.n	8003edc <UART_SetConfig+0x390>
 8003ec2:	231b      	movs	r3, #27
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	19db      	adds	r3, r3, r7
 8003eca:	2210      	movs	r2, #16
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e005      	b.n	8003edc <UART_SetConfig+0x390>
 8003ed0:	231b      	movs	r3, #27
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2210      	movs	r2, #16
 8003eda:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4ac1      	ldr	r2, [pc, #772]	; (80041e8 <UART_SetConfig+0x69c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d005      	beq.n	8003ef2 <UART_SetConfig+0x3a6>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4ac0      	ldr	r2, [pc, #768]	; (80041ec <UART_SetConfig+0x6a0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d000      	beq.n	8003ef2 <UART_SetConfig+0x3a6>
 8003ef0:	e093      	b.n	800401a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef2:	231b      	movs	r3, #27
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d015      	beq.n	8003f2c <UART_SetConfig+0x3e0>
 8003f00:	dc18      	bgt.n	8003f34 <UART_SetConfig+0x3e8>
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00d      	beq.n	8003f22 <UART_SetConfig+0x3d6>
 8003f06:	dc15      	bgt.n	8003f34 <UART_SetConfig+0x3e8>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <UART_SetConfig+0x3c6>
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d005      	beq.n	8003f1c <UART_SetConfig+0x3d0>
 8003f10:	e010      	b.n	8003f34 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f12:	f7fe f84d 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8003f16:	0003      	movs	r3, r0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f1a:	e014      	b.n	8003f46 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4bb4      	ldr	r3, [pc, #720]	; (80041f0 <UART_SetConfig+0x6a4>)
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f20:	e011      	b.n	8003f46 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fd ffb9 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8003f26:	0003      	movs	r3, r0
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f2a:	e00c      	b.n	8003f46 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f32:	e008      	b.n	8003f46 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f38:	231a      	movs	r3, #26
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
        break;
 8003f44:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d100      	bne.n	8003f4e <UART_SetConfig+0x402>
 8003f4c:	e135      	b.n	80041ba <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f52:	4ba8      	ldr	r3, [pc, #672]	; (80041f4 <UART_SetConfig+0x6a8>)
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	5ad3      	ldrh	r3, [r2, r3]
 8003f58:	0019      	movs	r1, r3
 8003f5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f5c:	f7fc f8d2 	bl	8000104 <__udivsi3>
 8003f60:	0003      	movs	r3, r0
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	0013      	movs	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d305      	bcc.n	8003f80 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d906      	bls.n	8003f8e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003f80:	231a      	movs	r3, #26
 8003f82:	2220      	movs	r2, #32
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	19db      	adds	r3, r3, r7
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e044      	b.n	8004018 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9a:	4b96      	ldr	r3, [pc, #600]	; (80041f4 <UART_SetConfig+0x6a8>)
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	5ad3      	ldrh	r3, [r2, r3]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	69b8      	ldr	r0, [r7, #24]
 8003fac:	69f9      	ldr	r1, [r7, #28]
 8003fae:	f7fc fa1f 	bl	80003f0 <__aeabi_uldivmod>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	000b      	movs	r3, r1
 8003fb6:	0e11      	lsrs	r1, r2, #24
 8003fb8:	021d      	lsls	r5, r3, #8
 8003fba:	430d      	orrs	r5, r1
 8003fbc:	0214      	lsls	r4, r2, #8
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	68f9      	ldr	r1, [r7, #12]
 8003fce:	1900      	adds	r0, r0, r4
 8003fd0:	4169      	adcs	r1, r5
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f7fc fa06 	bl	80003f0 <__aeabi_uldivmod>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	0013      	movs	r3, r2
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fee:	23c0      	movs	r3, #192	; 0xc0
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d309      	bcc.n	800400a <UART_SetConfig+0x4be>
 8003ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	035b      	lsls	r3, r3, #13
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d204      	bcs.n	800400a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	e006      	b.n	8004018 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800400a:	231a      	movs	r3, #26
 800400c:	2220      	movs	r2, #32
 800400e:	189b      	adds	r3, r3, r2
 8004010:	19db      	adds	r3, r3, r7
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004016:	e0d0      	b.n	80041ba <UART_SetConfig+0x66e>
 8004018:	e0cf      	b.n	80041ba <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	429a      	cmp	r2, r3
 8004024:	d000      	beq.n	8004028 <UART_SetConfig+0x4dc>
 8004026:	e070      	b.n	800410a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004028:	231b      	movs	r3, #27
 800402a:	2220      	movs	r2, #32
 800402c:	189b      	adds	r3, r3, r2
 800402e:	19db      	adds	r3, r3, r7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b08      	cmp	r3, #8
 8004034:	d015      	beq.n	8004062 <UART_SetConfig+0x516>
 8004036:	dc18      	bgt.n	800406a <UART_SetConfig+0x51e>
 8004038:	2b04      	cmp	r3, #4
 800403a:	d00d      	beq.n	8004058 <UART_SetConfig+0x50c>
 800403c:	dc15      	bgt.n	800406a <UART_SetConfig+0x51e>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <UART_SetConfig+0x4fc>
 8004042:	2b02      	cmp	r3, #2
 8004044:	d005      	beq.n	8004052 <UART_SetConfig+0x506>
 8004046:	e010      	b.n	800406a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fd ffb2 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800404c:	0003      	movs	r3, r0
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004050:	e014      	b.n	800407c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004052:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <UART_SetConfig+0x6a4>)
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004056:	e011      	b.n	800407c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004058:	f7fd ff1e 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800405c:	0003      	movs	r3, r0
 800405e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004060:	e00c      	b.n	800407c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004068:	e008      	b.n	800407c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800406e:	231a      	movs	r3, #26
 8004070:	2220      	movs	r2, #32
 8004072:	189b      	adds	r3, r3, r2
 8004074:	19db      	adds	r3, r3, r7
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
        break;
 800407a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	2b00      	cmp	r3, #0
 8004080:	d100      	bne.n	8004084 <UART_SetConfig+0x538>
 8004082:	e09a      	b.n	80041ba <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <UART_SetConfig+0x6a8>)
 800408a:	0052      	lsls	r2, r2, #1
 800408c:	5ad3      	ldrh	r3, [r2, r3]
 800408e:	0019      	movs	r1, r3
 8004090:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004092:	f7fc f837 	bl	8000104 <__udivsi3>
 8004096:	0003      	movs	r3, r0
 8004098:	005a      	lsls	r2, r3, #1
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	18d2      	adds	r2, r2, r3
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0019      	movs	r1, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	f7fc f82b 	bl	8000104 <__udivsi3>
 80040ae:	0003      	movs	r3, r0
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d921      	bls.n	80040fc <UART_SetConfig+0x5b0>
 80040b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	025b      	lsls	r3, r3, #9
 80040be:	429a      	cmp	r2, r3
 80040c0:	d21c      	bcs.n	80040fc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	200e      	movs	r0, #14
 80040c8:	2420      	movs	r4, #32
 80040ca:	1903      	adds	r3, r0, r4
 80040cc:	19db      	adds	r3, r3, r7
 80040ce:	210f      	movs	r1, #15
 80040d0:	438a      	bics	r2, r1
 80040d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2207      	movs	r2, #7
 80040dc:	4013      	ands	r3, r2
 80040de:	b299      	uxth	r1, r3
 80040e0:	1903      	adds	r3, r0, r4
 80040e2:	19db      	adds	r3, r3, r7
 80040e4:	1902      	adds	r2, r0, r4
 80040e6:	19d2      	adds	r2, r2, r7
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1902      	adds	r2, r0, r4
 80040f4:	19d2      	adds	r2, r2, r7
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e05e      	b.n	80041ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80040fc:	231a      	movs	r3, #26
 80040fe:	2220      	movs	r2, #32
 8004100:	189b      	adds	r3, r3, r2
 8004102:	19db      	adds	r3, r3, r7
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e057      	b.n	80041ba <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410a:	231b      	movs	r3, #27
 800410c:	2220      	movs	r2, #32
 800410e:	189b      	adds	r3, r3, r2
 8004110:	19db      	adds	r3, r3, r7
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d015      	beq.n	8004144 <UART_SetConfig+0x5f8>
 8004118:	dc18      	bgt.n	800414c <UART_SetConfig+0x600>
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00d      	beq.n	800413a <UART_SetConfig+0x5ee>
 800411e:	dc15      	bgt.n	800414c <UART_SetConfig+0x600>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <UART_SetConfig+0x5de>
 8004124:	2b02      	cmp	r3, #2
 8004126:	d005      	beq.n	8004134 <UART_SetConfig+0x5e8>
 8004128:	e010      	b.n	800414c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800412a:	f7fd ff41 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800412e:	0003      	movs	r3, r0
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004132:	e014      	b.n	800415e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004134:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <UART_SetConfig+0x6a4>)
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004138:	e011      	b.n	800415e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413a:	f7fd fead 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800413e:	0003      	movs	r3, r0
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004142:	e00c      	b.n	800415e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800414a:	e008      	b.n	800415e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004150:	231a      	movs	r3, #26
 8004152:	2220      	movs	r2, #32
 8004154:	189b      	adds	r3, r3, r2
 8004156:	19db      	adds	r3, r3, r7
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
        break;
 800415c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02a      	beq.n	80041ba <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004168:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <UART_SetConfig+0x6a8>)
 800416a:	0052      	lsls	r2, r2, #1
 800416c:	5ad3      	ldrh	r3, [r2, r3]
 800416e:	0019      	movs	r1, r3
 8004170:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004172:	f7fb ffc7 	bl	8000104 <__udivsi3>
 8004176:	0003      	movs	r3, r0
 8004178:	001a      	movs	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	18d2      	adds	r2, r2, r3
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	0019      	movs	r1, r3
 8004188:	0010      	movs	r0, r2
 800418a:	f7fb ffbb 	bl	8000104 <__udivsi3>
 800418e:	0003      	movs	r3, r0
 8004190:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d90a      	bls.n	80041ae <UART_SetConfig+0x662>
 8004198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	025b      	lsls	r3, r3, #9
 800419e:	429a      	cmp	r2, r3
 80041a0:	d205      	bcs.n	80041ae <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	e005      	b.n	80041ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80041ae:	231a      	movs	r3, #26
 80041b0:	2220      	movs	r2, #32
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	19db      	adds	r3, r3, r7
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	226a      	movs	r2, #106	; 0x6a
 80041be:	2101      	movs	r1, #1
 80041c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	2268      	movs	r2, #104	; 0x68
 80041c6:	2101      	movs	r1, #1
 80041c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	2200      	movs	r2, #0
 80041ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	2200      	movs	r2, #0
 80041d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80041d6:	231a      	movs	r3, #26
 80041d8:	2220      	movs	r2, #32
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	781b      	ldrb	r3, [r3, #0]
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b010      	add	sp, #64	; 0x40
 80041e6:	bdb0      	pop	{r4, r5, r7, pc}
 80041e8:	40008000 	.word	0x40008000
 80041ec:	40008400 	.word	0x40008400
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	08004b7c 	.word	0x08004b7c

080041f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	2208      	movs	r2, #8
 8004206:	4013      	ands	r3, r2
 8004208:	d00b      	beq.n	8004222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a4a      	ldr	r2, [pc, #296]	; (800433c <UART_AdvFeatureConfig+0x144>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	2201      	movs	r2, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d00b      	beq.n	8004244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4a43      	ldr	r2, [pc, #268]	; (8004340 <UART_AdvFeatureConfig+0x148>)
 8004234:	4013      	ands	r3, r2
 8004236:	0019      	movs	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	2202      	movs	r2, #2
 800424a:	4013      	ands	r3, r2
 800424c:	d00b      	beq.n	8004266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a3b      	ldr	r2, [pc, #236]	; (8004344 <UART_AdvFeatureConfig+0x14c>)
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2204      	movs	r2, #4
 800426c:	4013      	ands	r3, r2
 800426e:	d00b      	beq.n	8004288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4a34      	ldr	r2, [pc, #208]	; (8004348 <UART_AdvFeatureConfig+0x150>)
 8004278:	4013      	ands	r3, r2
 800427a:	0019      	movs	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2210      	movs	r2, #16
 800428e:	4013      	ands	r3, r2
 8004290:	d00b      	beq.n	80042aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a2c      	ldr	r2, [pc, #176]	; (800434c <UART_AdvFeatureConfig+0x154>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	2220      	movs	r2, #32
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00b      	beq.n	80042cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4a25      	ldr	r2, [pc, #148]	; (8004350 <UART_AdvFeatureConfig+0x158>)
 80042bc:	4013      	ands	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	2240      	movs	r2, #64	; 0x40
 80042d2:	4013      	ands	r3, r2
 80042d4:	d01d      	beq.n	8004312 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <UART_AdvFeatureConfig+0x15c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	035b      	lsls	r3, r3, #13
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d10b      	bne.n	8004312 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <UART_AdvFeatureConfig+0x160>)
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	4013      	ands	r3, r2
 800431a:	d00b      	beq.n	8004334 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <UART_AdvFeatureConfig+0x164>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}
 800433c:	ffff7fff 	.word	0xffff7fff
 8004340:	fffdffff 	.word	0xfffdffff
 8004344:	fffeffff 	.word	0xfffeffff
 8004348:	fffbffff 	.word	0xfffbffff
 800434c:	ffffefff 	.word	0xffffefff
 8004350:	ffffdfff 	.word	0xffffdfff
 8004354:	ffefffff 	.word	0xffefffff
 8004358:	ff9fffff 	.word	0xff9fffff
 800435c:	fff7ffff 	.word	0xfff7ffff

08004360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b092      	sub	sp, #72	; 0x48
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2290      	movs	r2, #144	; 0x90
 800436c:	2100      	movs	r1, #0
 800436e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004370:	f7fc fe7c 	bl	800106c <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2208      	movs	r2, #8
 8004380:	4013      	ands	r3, r2
 8004382:	2b08      	cmp	r3, #8
 8004384:	d12d      	bne.n	80043e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	0391      	lsls	r1, r2, #14
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4a47      	ldr	r2, [pc, #284]	; (80044ac <UART_CheckIdleState+0x14c>)
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	f000 f88e 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d022      	beq.n	80043e2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439c:	f3ef 8310 	mrs	r3, PRIMASK
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a6:	2301      	movs	r3, #1
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	438a      	bics	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2288      	movs	r2, #136	; 0x88
 80043d2:	2120      	movs	r1, #32
 80043d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2284      	movs	r2, #132	; 0x84
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e060      	b.n	80044a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2204      	movs	r2, #4
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d146      	bne.n	800447e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	03d1      	lsls	r1, r2, #15
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <UART_CheckIdleState+0x14c>)
 80043fa:	9200      	str	r2, [sp, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f000 f859 	bl	80044b4 <UART_WaitOnFlagUntilTimeout>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d03b      	beq.n	800447e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	60fb      	str	r3, [r7, #12]
  return(result);
 800440c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4922      	ldr	r1, [pc, #136]	; (80044b0 <UART_CheckIdleState+0x150>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004438:	f3ef 8310 	mrs	r3, PRIMASK
 800443c:	61bb      	str	r3, [r7, #24]
  return(result);
 800443e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	633b      	str	r3, [r7, #48]	; 0x30
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	438a      	bics	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	228c      	movs	r2, #140	; 0x8c
 800446e:	2120      	movs	r1, #32
 8004470:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2284      	movs	r2, #132	; 0x84
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e012      	b.n	80044a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2288      	movs	r2, #136	; 0x88
 8004482:	2120      	movs	r1, #32
 8004484:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	228c      	movs	r2, #140	; 0x8c
 800448a:	2120      	movs	r1, #32
 800448c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2284      	movs	r2, #132	; 0x84
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b010      	add	sp, #64	; 0x40
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	01ffffff 	.word	0x01ffffff
 80044b0:	fffffedf 	.word	0xfffffedf

080044b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	1dfb      	adds	r3, r7, #7
 80044c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c4:	e051      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3301      	adds	r3, #1
 80044ca:	d04e      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fc fdce 	bl	800106c <HAL_GetTick>
 80044d0:	0002      	movs	r2, r0
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e051      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2204      	movs	r2, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	d03b      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d038      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d035      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2208      	movs	r2, #8
 8004506:	4013      	ands	r3, r2
 8004508:	2b08      	cmp	r3, #8
 800450a:	d111      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2208      	movs	r2, #8
 8004512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 f83c 	bl	8004594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2290      	movs	r2, #144	; 0x90
 8004520:	2108      	movs	r1, #8
 8004522:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2284      	movs	r2, #132	; 0x84
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e02c      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	401a      	ands	r2, r3
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	429a      	cmp	r2, r3
 8004542:	d112      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f81f 	bl	8004594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2290      	movs	r2, #144	; 0x90
 800455a:	2120      	movs	r1, #32
 800455c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2284      	movs	r2, #132	; 0x84
 8004562:	2100      	movs	r1, #0
 8004564:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00f      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	4013      	ands	r3, r2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	425a      	negs	r2, r3
 800457a:	4153      	adcs	r3, r2
 800457c:	b2db      	uxtb	r3, r3
 800457e:	001a      	movs	r2, r3
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d09e      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b004      	add	sp, #16
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459c:	f3ef 8310 	mrs	r3, PRIMASK
 80045a0:	617b      	str	r3, [r7, #20]
  return(result);
 80045a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4926      	ldr	r1, [pc, #152]	; (8004658 <UART_EndRxTransfer+0xc4>)
 80045be:	400a      	ands	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f383 8810 	msr	PRIMASK, r3
}
 80045cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	623b      	str	r3, [r7, #32]
  return(result);
 80045d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
 80045d8:	2301      	movs	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	491b      	ldr	r1, [pc, #108]	; (800465c <UART_EndRxTransfer+0xc8>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	f383 8810 	msr	PRIMASK, r3
}
 80045fe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d118      	bne.n	800463a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004608:	f3ef 8310 	mrs	r3, PRIMASK
 800460c:	60bb      	str	r3, [r7, #8]
  return(result);
 800460e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004612:	2301      	movs	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2110      	movs	r1, #16
 800462a:	438a      	bics	r2, r1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	228c      	movs	r2, #140	; 0x8c
 800463e:	2120      	movs	r1, #32
 8004640:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b00e      	add	sp, #56	; 0x38
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	fffffedf 	.word	0xfffffedf
 800465c:	effffffe 	.word	0xeffffffe

08004660 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2284      	movs	r2, #132	; 0x84
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_UARTEx_DisableFifoMode+0x16>
 8004672:	2302      	movs	r3, #2
 8004674:	e027      	b.n	80046c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2284      	movs	r2, #132	; 0x84
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2288      	movs	r2, #136	; 0x88
 8004682:	2124      	movs	r1, #36	; 0x24
 8004684:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2101      	movs	r1, #1
 800469a:	438a      	bics	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2288      	movs	r2, #136	; 0x88
 80046b8:	2120      	movs	r1, #32
 80046ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2284      	movs	r2, #132	; 0x84
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	dfffffff 	.word	0xdfffffff

080046d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2284      	movs	r2, #132	; 0x84
 80046e2:	5c9b      	ldrb	r3, [r3, r2]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e02e      	b.n	800474a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2284      	movs	r2, #132	; 0x84
 80046f0:	2101      	movs	r1, #1
 80046f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2288      	movs	r2, #136	; 0x88
 80046f8:	2124      	movs	r1, #36	; 0x24
 80046fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	438a      	bics	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	08d9      	lsrs	r1, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 f854 	bl	80047d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2288      	movs	r2, #136	; 0x88
 800473c:	2120      	movs	r1, #32
 800473e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2284      	movs	r2, #132	; 0x84
 8004744:	2100      	movs	r1, #0
 8004746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b004      	add	sp, #16
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2284      	movs	r2, #132	; 0x84
 8004762:	5c9b      	ldrb	r3, [r3, r2]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004768:	2302      	movs	r3, #2
 800476a:	e02f      	b.n	80047cc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2284      	movs	r2, #132	; 0x84
 8004770:	2101      	movs	r1, #1
 8004772:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2288      	movs	r2, #136	; 0x88
 8004778:	2124      	movs	r1, #36	; 0x24
 800477a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2101      	movs	r1, #1
 8004790:	438a      	bics	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 f813 	bl	80047d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2288      	movs	r2, #136	; 0x88
 80047be:	2120      	movs	r1, #32
 80047c0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2284      	movs	r2, #132	; 0x84
 80047c6:	2100      	movs	r1, #0
 80047c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b004      	add	sp, #16
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	f1ffffff 	.word	0xf1ffffff

080047d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d108      	bne.n	80047fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	226a      	movs	r2, #106	; 0x6a
 80047ec:	2101      	movs	r1, #1
 80047ee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2268      	movs	r2, #104	; 0x68
 80047f4:	2101      	movs	r1, #1
 80047f6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047f8:	e043      	b.n	8004882 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047fa:	260f      	movs	r6, #15
 80047fc:	19bb      	adds	r3, r7, r6
 80047fe:	2208      	movs	r2, #8
 8004800:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004802:	200e      	movs	r0, #14
 8004804:	183b      	adds	r3, r7, r0
 8004806:	2208      	movs	r2, #8
 8004808:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	0e5b      	lsrs	r3, r3, #25
 8004812:	b2da      	uxtb	r2, r3
 8004814:	240d      	movs	r4, #13
 8004816:	193b      	adds	r3, r7, r4
 8004818:	2107      	movs	r1, #7
 800481a:	400a      	ands	r2, r1
 800481c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	0f5b      	lsrs	r3, r3, #29
 8004826:	b2da      	uxtb	r2, r3
 8004828:	250c      	movs	r5, #12
 800482a:	197b      	adds	r3, r7, r5
 800482c:	2107      	movs	r1, #7
 800482e:	400a      	ands	r2, r1
 8004830:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004832:	183b      	adds	r3, r7, r0
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	197a      	adds	r2, r7, r5
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	4914      	ldr	r1, [pc, #80]	; (800488c <UARTEx_SetNbDataToProcess+0xb4>)
 800483c:	5c8a      	ldrb	r2, [r1, r2]
 800483e:	435a      	muls	r2, r3
 8004840:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004842:	197b      	adds	r3, r7, r5
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	4a12      	ldr	r2, [pc, #72]	; (8004890 <UARTEx_SetNbDataToProcess+0xb8>)
 8004848:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800484a:	0019      	movs	r1, r3
 800484c:	f7fb fce4 	bl	8000218 <__divsi3>
 8004850:	0003      	movs	r3, r0
 8004852:	b299      	uxth	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	226a      	movs	r2, #106	; 0x6a
 8004858:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800485a:	19bb      	adds	r3, r7, r6
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	193a      	adds	r2, r7, r4
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	490a      	ldr	r1, [pc, #40]	; (800488c <UARTEx_SetNbDataToProcess+0xb4>)
 8004864:	5c8a      	ldrb	r2, [r1, r2]
 8004866:	435a      	muls	r2, r3
 8004868:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800486a:	193b      	adds	r3, r7, r4
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <UARTEx_SetNbDataToProcess+0xb8>)
 8004870:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004872:	0019      	movs	r1, r3
 8004874:	f7fb fcd0 	bl	8000218 <__divsi3>
 8004878:	0003      	movs	r3, r0
 800487a:	b299      	uxth	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2268      	movs	r2, #104	; 0x68
 8004880:	5299      	strh	r1, [r3, r2]
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b005      	add	sp, #20
 8004888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	08004b94 	.word	0x08004b94
 8004890:	08004b9c 	.word	0x08004b9c

08004894 <malloc>:
 8004894:	b510      	push	{r4, lr}
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <malloc+0x10>)
 8004898:	0001      	movs	r1, r0
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	f000 f826 	bl	80048ec <_malloc_r>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	20000058 	.word	0x20000058

080048a8 <sbrk_aligned>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4e0f      	ldr	r6, [pc, #60]	; (80048e8 <sbrk_aligned+0x40>)
 80048ac:	000d      	movs	r5, r1
 80048ae:	6831      	ldr	r1, [r6, #0]
 80048b0:	0004      	movs	r4, r0
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d102      	bne.n	80048bc <sbrk_aligned+0x14>
 80048b6:	f000 f8b3 	bl	8004a20 <_sbrk_r>
 80048ba:	6030      	str	r0, [r6, #0]
 80048bc:	0029      	movs	r1, r5
 80048be:	0020      	movs	r0, r4
 80048c0:	f000 f8ae 	bl	8004a20 <_sbrk_r>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d00a      	beq.n	80048de <sbrk_aligned+0x36>
 80048c8:	2303      	movs	r3, #3
 80048ca:	1cc5      	adds	r5, r0, #3
 80048cc:	439d      	bics	r5, r3
 80048ce:	42a8      	cmp	r0, r5
 80048d0:	d007      	beq.n	80048e2 <sbrk_aligned+0x3a>
 80048d2:	1a29      	subs	r1, r5, r0
 80048d4:	0020      	movs	r0, r4
 80048d6:	f000 f8a3 	bl	8004a20 <_sbrk_r>
 80048da:	3001      	adds	r0, #1
 80048dc:	d101      	bne.n	80048e2 <sbrk_aligned+0x3a>
 80048de:	2501      	movs	r5, #1
 80048e0:	426d      	negs	r5, r5
 80048e2:	0028      	movs	r0, r5
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	200001cc 	.word	0x200001cc

080048ec <_malloc_r>:
 80048ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ee:	2203      	movs	r2, #3
 80048f0:	1ccb      	adds	r3, r1, #3
 80048f2:	4393      	bics	r3, r2
 80048f4:	3308      	adds	r3, #8
 80048f6:	0006      	movs	r6, r0
 80048f8:	001f      	movs	r7, r3
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d238      	bcs.n	8004970 <_malloc_r+0x84>
 80048fe:	270c      	movs	r7, #12
 8004900:	42b9      	cmp	r1, r7
 8004902:	d837      	bhi.n	8004974 <_malloc_r+0x88>
 8004904:	0030      	movs	r0, r6
 8004906:	f000 f873 	bl	80049f0 <__malloc_lock>
 800490a:	4b38      	ldr	r3, [pc, #224]	; (80049ec <_malloc_r+0x100>)
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	001c      	movs	r4, r3
 8004912:	2c00      	cmp	r4, #0
 8004914:	d133      	bne.n	800497e <_malloc_r+0x92>
 8004916:	0039      	movs	r1, r7
 8004918:	0030      	movs	r0, r6
 800491a:	f7ff ffc5 	bl	80048a8 <sbrk_aligned>
 800491e:	0004      	movs	r4, r0
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d15e      	bne.n	80049e2 <_malloc_r+0xf6>
 8004924:	9b00      	ldr	r3, [sp, #0]
 8004926:	681c      	ldr	r4, [r3, #0]
 8004928:	0025      	movs	r5, r4
 800492a:	2d00      	cmp	r5, #0
 800492c:	d14e      	bne.n	80049cc <_malloc_r+0xe0>
 800492e:	2c00      	cmp	r4, #0
 8004930:	d051      	beq.n	80049d6 <_malloc_r+0xea>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0029      	movs	r1, r5
 8004936:	18e3      	adds	r3, r4, r3
 8004938:	0030      	movs	r0, r6
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	f000 f870 	bl	8004a20 <_sbrk_r>
 8004940:	9b01      	ldr	r3, [sp, #4]
 8004942:	4283      	cmp	r3, r0
 8004944:	d147      	bne.n	80049d6 <_malloc_r+0xea>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	0030      	movs	r0, r6
 800494a:	1aff      	subs	r7, r7, r3
 800494c:	0039      	movs	r1, r7
 800494e:	f7ff ffab 	bl	80048a8 <sbrk_aligned>
 8004952:	3001      	adds	r0, #1
 8004954:	d03f      	beq.n	80049d6 <_malloc_r+0xea>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	19db      	adds	r3, r3, r7
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	9b00      	ldr	r3, [sp, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d040      	beq.n	80049e6 <_malloc_r+0xfa>
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	42a2      	cmp	r2, r4
 8004968:	d133      	bne.n	80049d2 <_malloc_r+0xe6>
 800496a:	2200      	movs	r2, #0
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	e014      	b.n	800499a <_malloc_r+0xae>
 8004970:	2b00      	cmp	r3, #0
 8004972:	dac5      	bge.n	8004900 <_malloc_r+0x14>
 8004974:	230c      	movs	r3, #12
 8004976:	2500      	movs	r5, #0
 8004978:	6033      	str	r3, [r6, #0]
 800497a:	0028      	movs	r0, r5
 800497c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800497e:	6821      	ldr	r1, [r4, #0]
 8004980:	1bc9      	subs	r1, r1, r7
 8004982:	d420      	bmi.n	80049c6 <_malloc_r+0xda>
 8004984:	290b      	cmp	r1, #11
 8004986:	d918      	bls.n	80049ba <_malloc_r+0xce>
 8004988:	19e2      	adds	r2, r4, r7
 800498a:	6027      	str	r7, [r4, #0]
 800498c:	42a3      	cmp	r3, r4
 800498e:	d112      	bne.n	80049b6 <_malloc_r+0xca>
 8004990:	9b00      	ldr	r3, [sp, #0]
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	6011      	str	r1, [r2, #0]
 8004998:	6053      	str	r3, [r2, #4]
 800499a:	0030      	movs	r0, r6
 800499c:	0025      	movs	r5, r4
 800499e:	f000 f82f 	bl	8004a00 <__malloc_unlock>
 80049a2:	2207      	movs	r2, #7
 80049a4:	350b      	adds	r5, #11
 80049a6:	1d23      	adds	r3, r4, #4
 80049a8:	4395      	bics	r5, r2
 80049aa:	1aea      	subs	r2, r5, r3
 80049ac:	429d      	cmp	r5, r3
 80049ae:	d0e4      	beq.n	800497a <_malloc_r+0x8e>
 80049b0:	1b5b      	subs	r3, r3, r5
 80049b2:	50a3      	str	r3, [r4, r2]
 80049b4:	e7e1      	b.n	800497a <_malloc_r+0x8e>
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	e7ec      	b.n	8004994 <_malloc_r+0xa8>
 80049ba:	6862      	ldr	r2, [r4, #4]
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d1d5      	bne.n	800496c <_malloc_r+0x80>
 80049c0:	9b00      	ldr	r3, [sp, #0]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e7e9      	b.n	800499a <_malloc_r+0xae>
 80049c6:	0023      	movs	r3, r4
 80049c8:	6864      	ldr	r4, [r4, #4]
 80049ca:	e7a2      	b.n	8004912 <_malloc_r+0x26>
 80049cc:	002c      	movs	r4, r5
 80049ce:	686d      	ldr	r5, [r5, #4]
 80049d0:	e7ab      	b.n	800492a <_malloc_r+0x3e>
 80049d2:	0013      	movs	r3, r2
 80049d4:	e7c4      	b.n	8004960 <_malloc_r+0x74>
 80049d6:	230c      	movs	r3, #12
 80049d8:	0030      	movs	r0, r6
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	f000 f810 	bl	8004a00 <__malloc_unlock>
 80049e0:	e7cb      	b.n	800497a <_malloc_r+0x8e>
 80049e2:	6027      	str	r7, [r4, #0]
 80049e4:	e7d9      	b.n	800499a <_malloc_r+0xae>
 80049e6:	605b      	str	r3, [r3, #4]
 80049e8:	deff      	udf	#255	; 0xff
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	200001c8 	.word	0x200001c8

080049f0 <__malloc_lock>:
 80049f0:	b510      	push	{r4, lr}
 80049f2:	4802      	ldr	r0, [pc, #8]	; (80049fc <__malloc_lock+0xc>)
 80049f4:	f000 f850 	bl	8004a98 <__retarget_lock_acquire_recursive>
 80049f8:	bd10      	pop	{r4, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	2000030c 	.word	0x2000030c

08004a00 <__malloc_unlock>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4802      	ldr	r0, [pc, #8]	; (8004a0c <__malloc_unlock+0xc>)
 8004a04:	f000 f849 	bl	8004a9a <__retarget_lock_release_recursive>
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	2000030c 	.word	0x2000030c

08004a10 <memset>:
 8004a10:	0003      	movs	r3, r0
 8004a12:	1882      	adds	r2, r0, r2
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	7019      	strb	r1, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <_sbrk_r>:
 8004a20:	2300      	movs	r3, #0
 8004a22:	b570      	push	{r4, r5, r6, lr}
 8004a24:	4d06      	ldr	r5, [pc, #24]	; (8004a40 <_sbrk_r+0x20>)
 8004a26:	0004      	movs	r4, r0
 8004a28:	0008      	movs	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f7fc f850 	bl	8000ad0 <_sbrk>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d103      	bne.n	8004a3c <_sbrk_r+0x1c>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d000      	beq.n	8004a3c <_sbrk_r+0x1c>
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	20000308 	.word	0x20000308

08004a44 <__errno>:
 8004a44:	4b01      	ldr	r3, [pc, #4]	; (8004a4c <__errno+0x8>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	4770      	bx	lr
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000058 	.word	0x20000058

08004a50 <__libc_init_array>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2600      	movs	r6, #0
 8004a54:	4c0c      	ldr	r4, [pc, #48]	; (8004a88 <__libc_init_array+0x38>)
 8004a56:	4d0d      	ldr	r5, [pc, #52]	; (8004a8c <__libc_init_array+0x3c>)
 8004a58:	1b64      	subs	r4, r4, r5
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	42a6      	cmp	r6, r4
 8004a5e:	d109      	bne.n	8004a74 <__libc_init_array+0x24>
 8004a60:	2600      	movs	r6, #0
 8004a62:	f000 f81b 	bl	8004a9c <_init>
 8004a66:	4c0a      	ldr	r4, [pc, #40]	; (8004a90 <__libc_init_array+0x40>)
 8004a68:	4d0a      	ldr	r5, [pc, #40]	; (8004a94 <__libc_init_array+0x44>)
 8004a6a:	1b64      	subs	r4, r4, r5
 8004a6c:	10a4      	asrs	r4, r4, #2
 8004a6e:	42a6      	cmp	r6, r4
 8004a70:	d105      	bne.n	8004a7e <__libc_init_array+0x2e>
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	00b3      	lsls	r3, r6, #2
 8004a76:	58eb      	ldr	r3, [r5, r3]
 8004a78:	4798      	blx	r3
 8004a7a:	3601      	adds	r6, #1
 8004a7c:	e7ee      	b.n	8004a5c <__libc_init_array+0xc>
 8004a7e:	00b3      	lsls	r3, r6, #2
 8004a80:	58eb      	ldr	r3, [r5, r3]
 8004a82:	4798      	blx	r3
 8004a84:	3601      	adds	r6, #1
 8004a86:	e7f2      	b.n	8004a6e <__libc_init_array+0x1e>
 8004a88:	08004bac 	.word	0x08004bac
 8004a8c:	08004bac 	.word	0x08004bac
 8004a90:	08004bb0 	.word	0x08004bb0
 8004a94:	08004bac 	.word	0x08004bac

08004a98 <__retarget_lock_acquire_recursive>:
 8004a98:	4770      	bx	lr

08004a9a <__retarget_lock_release_recursive>:
 8004a9a:	4770      	bx	lr

08004a9c <_init>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_fini>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr
